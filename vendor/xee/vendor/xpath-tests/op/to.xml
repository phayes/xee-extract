<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="op-to">
   <description>Tests for the to() function</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/" idref="func-to"/>

   <test-case name="rangeExpr-1">
      <description> Evaluation of a single range expression using positive integers. </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>(10, 1 to 4)</test>
      <result>
         <assert-string-value>10 1 2 3 4</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-2">
      <description> Evaluation of a range expression of length one containing the single integer 10. </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>10 to 10</test>
      <result>
         <assert-string-value>10</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-3">
      <description> Evaluation of a range expression that results in a sequence of length 0. Uses "fn:count" to avoid empty file. </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>fn:count(15 to 10)</test>
      <result>
         <assert-string-value>0</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-4">
      <description> Evaluation of a range expression that uses the "reverse" function. </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>fn:reverse(10 to 15)</test>
      <result>
         <assert-string-value>15 14 13 12 11 10</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-5">
      <description> Evaluation of a range expression that uses the empty sequence function. Uses the count function to avoid empty file. </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>fn:count((1, 2 to ()))</test>
      <result>
         <any-of>
            <assert-string-value>1</assert-string-value>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="rangeExpr-6">
      <description> Evaluation of a range expression, where both operands are addition operations. </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>((1+2) to (2+2))</test>
      <result>
         <assert-string-value>3 4</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-7">
      <description> Evaluation of a range expression, where the first operand are negative number. </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>(-4,-3 to 2)</test>
      <result>
         <assert-string-value>-4 -3 -2 -1 0 1 2</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-8">
      <description> Evaluation of a range expression, where both operands are negative integers. </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>(-4, -3 to -1)</test>
      <result>
         <assert-string-value>-4 -3 -2 -1</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-9">
      <description> Evaluation of a range expression, where the first operand is "xs:integer" function. </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>(xs:integer(1) to 5)</test>
      <result>
         <assert-string-value>1 2 3 4 5</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-10">
      <description> Evaluation of a range expression, where the second operand is "xs:integer" function. </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>(1 to xs:integer(5))</test>
      <result>
         <assert-string-value>1 2 3 4 5</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-11">
      <description> Evaluation of a range expression, where both operands are "xs:integer" functions. </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>(xs:integer(1) to xs:integer(5))</test>
      <result>
         <assert-string-value>1 2 3 4 5</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-12">
      <description> Evaluation of a range expression, using the "fn:min" function </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>(fn:min((1,2)) to 5)</test>
      <result>
         <assert-string-value>1 2 3 4 5</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-13">
      <description> Evaluation of a range expression, using the "fn:max" function </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>(fn:max((1,2)) to 5)</test>
      <result>
         <assert-string-value>2 3 4 5</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-14">
      <description> Evaluation of a range expression, using the "fn:min" and "fn:max" functions </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>(fn:min((1,2)) to fn:max((6,7)))</test>
      <result>
         <assert-string-value>1 2 3 4 5 6 7</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-15">
      <description> Evaluation of a range expression as an argument to a "fn:min" function) </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>fn:min((1 to 5))</test>
      <result>
         <assert-string-value>1</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-16">
      <description> Evaluation of a range expression as an argument to a "fn:max" function) </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>fn:max((1 to 5))</test>
      <result>
         <assert-string-value>5</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-17">
      <description> Evaluation of a range expression as an argument to an "fn:avg" function) </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>fn:avg((1 to 5))</test>
      <result>
         <assert-string-value>3</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-18">
      <description> Evaluation of a range expression as an argument to an "fn:count" function) </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>fn:count((1 to 5))</test>
      <result>
         <assert-string-value>5</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-19">
      <description> Evaluation of a range expression, where the first operand is a multiplication operation. </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>((3*2) to 10)</test>
      <result>
         <assert-string-value>6 7 8 9 10</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-20">
      <description> Evaluation of a range expression, where the second operand is a multiplication operation. </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>(1 to (3*2))</test>
      <result>
         <assert-string-value>1 2 3 4 5 6</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-21">
      <description> Evaluation of a range expression, where both operands are multiplication operations. </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>((1*2) to (3*2))</test>
      <result>
         <assert-string-value>2 3 4 5 6</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-22">
      <description> Evaluation of a range expression, where the first operand is a subtraction operation. </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>((3 - 2) to 10)</test>
      <result>
         <assert-string-value>1 2 3 4 5 6 7 8 9 10</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-23">
      <description> Evaluation of a range expression, where the second operand is a subtraction operation. </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>(1 to (3 - 2))</test>
      <result>
         <assert-string-value>1</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-24">
      <description> Evaluation of a range expression, where both operands are subtraction operations. </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>((2 - 1) to (7 - 1))</test>
      <result>
         <assert-string-value>1 2 3 4 5 6</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-25">
      <description> Evaluation of a range expression, where the first operand is a division operation. </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>((6 idiv 2) to 10)</test>
      <result>
         <assert-string-value>3 4 5 6 7 8 9 10</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-26">
      <description> Evaluation of a range expression, where the second operand is a division operation. </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>(1 to (10 idiv 2))</test>
      <result>
         <assert-string-value>1 2 3 4 5</assert-string-value>
      </result>
   </test-case>

   <test-case name="rangeExpr-27">
      <description> Evaluation of a range expression, where both operands are division operations. </description>
      <created by="Carmelo Montanez" on="2005-08-16"/>
      <test>((5 idiv 5) to (8 idiv 2))</test>
      <result>
         <assert-string-value>1 2 3 4</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="rangeExpr-28">
      <description> test op:to with large numbers </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="Michael Kay" on="2012-12-27" change="see bug 20519"/>
      <test>18446744073709551616 to 18446744073709551620</test>
      <result>
         <any-of>
            <assert-string-value>18446744073709551616 18446744073709551617 18446744073709551618 18446744073709551619 18446744073709551620</assert-string-value>
            <error code="FOAR0002"/>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="rangeExpr-29">
      <description> test op:to with large numbers </description>
      <created by="Michael Kay" on="2012-12-15"/>
      <modified by="Michael Kay" on="2012-12-27" change="see bug 20519"/>
      <test>count(18446744073709551616 to 18446744073709551620)</test>
      <result>
         <any-of>
            <assert-eq>5</assert-eq>
            <error code="FOAR0002"/>
         </any-of>         
      </result>
   </test-case>
   
   <test-case name="rangeExpr-30">
      <description> test op:to with large numbers </description>
      <created by="Michael Kay" on="2012-12-15"/>
      <modified by="Michael Kay" on="2012-12-27" change="see bug 20519"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>(28446744073709551616 to 28446744073709551620)!position()</test>
      <result>
         <any-of>
            <assert-string-value>1 2 3 4 5</assert-string-value>
            <error code="FOAR0002"/>
         </any-of>        
      </result>
   </test-case>
   
   <test-case name="rangeExpr-31">
      <description> test op:to with large numbers </description>
      <created by="Michael Kay" on="2012-12-15"/>
      <modified by="Michael Kay" on="2012-12-27" change="see bug 20519"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>((28446744073709551616 to 28446744073709551620)!last())[1]</test>
      <result>
         <any-of>
            <assert-eq>5</assert-eq>
            <error code="FOAR0002"/>
         </any-of>        
      </result>
   </test-case>
   
   <test-case name="rangeExpr-32">
      <description> test op:to with large numbers </description>
      <created by="Michael Kay" on="2012-12-15"/>
      <modified by="Michael Kay" on="2012-12-27" change="see bug 20519"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>reverse(28446744073709551616 to 28446744073709551620)</test>
      <result>
         <any-of>
            <assert-string-value>28446744073709551620 28446744073709551619 28446744073709551618 28446744073709551617 28446744073709551616</assert-string-value>
            <error code="FOAR0002"/>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="rangeExpr-33">
      <description>"to" operator is not associative (bug in Saxon 9.6)</description>
      <created by="Michael Kay" on="2015-01-21"/>
      <test>11 to 11 to 12</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
   
   <test-case name="rangeExpr-34">
      <description>"to" operator binds more tightly than "||"</description>
      <created by="Michael Kay" on="2015-01-21"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>"it is " || 10 to 1 || "already"</test>
      <result>
         <assert-eq>"it is already"</assert-eq>
      </result>
   </test-case>
   
   <test-case name="rangeExpr-35">
      <description>"to" operator binds less tightly than "+"</description>
      <created by="Michael Kay" on="2015-01-21"/>
      <test>3+1 to 4+1</test>
      <result>
         <assert-deep-eq>4, 5</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="rangeExpr-36">
      <description>General comparison involving range expressions</description>
      <created by="Michael Kay" on="2017-05-26"/>
      <test>year-from-date(current-date()) = 1 to 5000</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="rangeExpr-37">
      <description>General comparison involving range expressions</description>
      <created by="Michael Kay" on="2017-05-26"/>
      <test>year-from-date(current-date()) = 5000 to 10000</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="rangeExpr-38">
      <description>General comparison involving range expressions: many-to-many</description>
      <created by="Michael Kay" on="2017-05-26"/>
      <test>year-from-date(current-date()) to 4000 = 1500 to 2500</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="rangeExpr-39">
      <description>General comparison involving range expressions: empty endpoint to range</description>
      <created by="Michael Kay" on="2017-05-26"/>
      <test>1000 = 1 to year-from-date(current-date())[. gt 3000]</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="rangeExpr-40">
      <description>General comparison involving range expressions: empty operand</description>
      <created by="Michael Kay" on="2017-05-26"/>
      <test>1 to 5000 = year-from-date(current-date())[. gt 3000]</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="rangeExpr-41">
      <description>General comparison involving range expressions in a predicate</description>
      <created by="Michael Kay" on="2017-05-26"/>
      <test>(1 to 5000)[position() = 2001 to 2020]</test>
      <result>
         <assert-deep-eq>2001 to 2020</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="rangeExpr-42">
      <description>General comparison involving range expressions in a predicate with singleton range (Saxon bug 3666)</description>
      <created by="Michael Kay" on="2018-02-13"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>(1 to 5000)[position() = 2000 to round(year-from-date(current-date()), -3)]</test>
      <result>
         <assert-eq>2000</assert-eq>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-1">
      <description> Since the left operand has the static cardinality zero-or-more, implementations using the static typing feature may raise XPTY0004. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1 to 1 eq 1</test>
      <result>
         <any-of>
            <assert-true/>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-2">
      <description> A test whose essence is: `empty(30 to 3)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(30 to 3)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-3">
      <description> A test whose essence is: `empty(0 to -3)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(0 to -3)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-4">
      <description> A test whose essence is: `empty(1 to ())`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(1 to ())</test>
      <result>
         <any-of>
            <assert-true/>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-5">
      <description> A test whose essence is: `empty(() to 1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(() to 1)</test>
      <result>
         <any-of>
            <assert-true/>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-6">
      <description> A test whose essence is: `empty(-1 to -3)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(-1 to -3)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-7">
      <description> A test whose essence is: `count(1 to 4) eq 4`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(1 to 4) eq 4</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-8">
      <description> A test whose essence is: `count(0 to 4) eq 5`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(0 to 4) eq 5</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-9">
      <description> A test whose essence is: `count(-5 to -0) eq 6`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(-5 to -0) eq 6</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-10">
      <description> A test whose essence is: `count((10, 1 to 4)) eq 5`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count((10, 1 to 4)) eq 5</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-11">
      <description> A test whose essence is: `subsequence(-3 to -1, 1, 1) eq -3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence(-3 to -1, 1, 1) eq -3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-12">
      <description> A test whose essence is: `subsequence(-3 to -1, 3, 1) eq -1`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence(-3 to -1, 3, 1) eq -1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-13">
      <description> A test whose essence is: `empty(reverse(4 to 1))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(reverse(4 to 1))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-14">
      <description> A test whose essence is: `subsequence(reverse(1 to 3), 1, 1) eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence(reverse(1 to 3), 1, 1) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-15">
      <description> A test whose essence is: `subsequence(reverse(1 to 3), 3, 1) eq 1`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence(reverse(1 to 3), 3, 1) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-16">
      <description> A test whose essence is: `subsequence(reverse(1 to 4), 2, 1) eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence(reverse(1 to 4), 2, 1) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-17">
      <description> A test whose essence is: `subsequence(reverse(1 to 4), 3, 1) eq 2`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence(reverse(1 to 4), 3, 1) eq 2</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-18">
      <description> A test whose essence is: `subsequence(reverse(-4 to -1), 2, 1) eq -2`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>subsequence(reverse(-4 to -1), 2, 1) eq -2</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-19">
      <description> A test whose essence is: `deep-equal((-1, -2, -3, -4), reverse(-4 to -1))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>deep-equal((-1, -2, -3, -4), reverse(-4 to -1))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-20">
      <description> A test whose essence is: `deep-equal((), reverse(0 to -5))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>deep-equal((), reverse(0 to -5))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-21">
      <description> A test whose essence is: `deep-equal((0, -1, -2, -3, -4, -5), reverse(-5 to 0))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>deep-equal((0, -1, -2, -3, -4, -5), reverse(-5 to 0))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-22">
      <description> A test whose essence is: `count(reverse(-5 to -2)) eq 4`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(reverse(-5 to -2)) eq 4</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-23">
      <description> A test whose essence is: `count(reverse(-5 to -0)) eq 6`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(reverse(-5 to -0)) eq 6</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-24">
      <description> A test whose essence is: `count(reverse(1 to 4)) eq 4`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(reverse(1 to 4)) eq 4</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-25">
      <description> A test whose essence is: `empty(1 to 0)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(1 to 0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-26">
      <description> A test whose essence is: `empty(0 to -5)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(0 to -5)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-27">
      <description> A test whose essence is: `empty(-4 to -5)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(-4 to -5)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-28">
      <description> A test whose essence is: `empty(reverse(1 to 0))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(reverse(1 to 0))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-29">
      <description> A test whose essence is: `empty(reverse(0 to -5))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(reverse(0 to -5))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-30">
      <description> A test whose essence is: `empty(reverse(-4 to -5))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(reverse(-4 to -5))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-31">
      <description> A test whose essence is: `(remove((2.e0, 4), 1) treat as xs:integer to 4)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(remove((2.e0, 4), 1) treat as xs:integer to 4)</test>
      <result>
         <assert-string-value>4</assert-string-value>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-32">
      <description> A test whose essence is: `(4 to remove((2e0, 4), 1) treat as xs:integer)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(4 to remove((2e0, 4), 1) treat as xs:integer)</test>
      <result>
         <assert-string-value>4</assert-string-value>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-33">
      <description> A test whose essence is: `1.1 to 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1.1 to 3</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-34">
      <description> A test whose essence is: `3 to 1.1`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>3 to 1.1</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-35">
      <description> A test whose essence is: `1.1 to 3.3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1.1 to 3.3</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K-RangeExpr-36">
      <description> A test whose essence is: `1 + 1.1 to 5`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1 + 1.1 to 5</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-RangeExpr-1">
      <description> The range expression doesn't accept xs:double as operand. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1e3 to 3</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-RangeExpr-2">
      <description> The range expression doesn't accept xs:double as operand. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>3 to 1e3</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-RangeExpr-3">
      <description> Combine with a for expression. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>for $i in 1 to 3 return $i</test>
      <result>
         <assert-string-value>1 2 3</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-RangeExpr-4">
      <description> Expressions that are tricky for local rewrites. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[1 to <value>5</value>, 5 to <value>5</value>, <value>1</value> to 5, <value>1</value> to <value>5</value>, let $i := <e>5</e> return $i to $i, count(5 to 10), count(1000 to 2000), count(<e>5</e> to 10), count(3 to <e>10</e>), count(<e>3</e> to <e>10</e>), count(<e>5</e> to 10), count(3 to <e>10</e>), count(<e>3</e> to <e>10</e>), count(4294967295 to 4294967298)]]></test>
      <result>
         <assert-string-value>1 2 3 4 5 5 1 2 3 4 5 1 2 3 4 5 5 6 1001 6 8 8 6 8 8 4</assert-string-value>
      </result>
   </test-case>
   
     <test-case name="RangeExpr-401">
      <description>singleton</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>3 to 3</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-401a">
      <description>singleton</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>count(3 to 3)</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-401b">
      <description>singleton</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>(3 to 3)[1]</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-401c">
      <description>singleton</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>3 = 3 to 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-401d">
      <description>singleton</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>4 > 3 to 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-402">
      <description>negative singleton</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>-33 to -33</test>
      <result>
         <assert-eq>-33</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-402a">
      <description>negative singleton</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>count(-33 to -33)</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-402b">
      <description>negative singleton</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>(-33 to -33)[1]</test>
      <result>
         <assert-eq>-33</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-402c">
      <description>negative singleton</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>-33 = -33 to -33</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-402d">
      <description>negative singleton</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>-33 to -33 > -34</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-403">
      <description>zero singleton</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>0 to 0</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-403a">
      <description>zero singleton</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>count(0 to 0)</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>
   <test-case name="RangeExpr-403b">
      <description>zero singleton</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>(0 to 0)[1]</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-403c">
      <description>zero singleton</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test> 1 = 0 to 0</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-403d">
      <description>zero singleton</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test> -1 > 0 to 0</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-404">
      <description>empty range</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>10 to 0</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-404a">
      <description>empty range</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>count(10 to 0)</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-404b">
      <description>empty range</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>(10 to 0)[1]</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-404c">
      <description>empty range</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>10 = 10 to 0</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-404d">
      <description>empty range</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>10 > 10 to 0</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-405">
      <description>empty range</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>0 to -10</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-405a">
      <description>empty range</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>count(0 to -10)</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-405b">
      <description>empty range</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>(0 to -10)[1]</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-406">
      <description>multiple range</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>1 to 10</test>
      <result>
         <assert-deep-eq>1, 2, 3, 4, 5, 6, 7, 8, 9, 10</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-406a">
      <description>multiple range</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>count(1 to 10)</test>
      <result>
         <assert-eq>10</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-406b">
      <description>multiple range</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>(1 to 10)[3]</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-406c">
      <description>multiple range</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>6 = 1 to 10</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-406d">
      <description>multiple range</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>6 > 1 to 10</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-406e">
      <description>multiple range</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>1 to 10 > 6</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-406f">
      <description>multiple range, reversed</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>reverse(1 to 10)</test>
      <result>
         <assert-deep-eq>10, 9, 8, 7, 6, 5, 4, 3, 2, 1</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-407">
      <description>multiple range, negative</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>-200000 to -199997</test>
      <result>
         <assert-deep-eq>-200000, -199999, -199998, -199997</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-407a">
      <description>multiple range, negative</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>count(-200000 to -199997)</test>
      <result>
         <assert-eq>4</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-407b">
      <description>multiple range, negative</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>(-200000 to -199997)[3]</test>
      <result>
         <assert-eq>-199998</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-407c">
      <description>multiple range, negative</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>12345 > -200000 to -199997</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-407d">
      <description>multiple range, negative</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>-200000 to -199997 > 54321</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-407e">
      <description>multiple range, negative, reversed</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>reverse(-200000 to -199997)</test>
      <result>
         <assert-deep-eq>-199997, -199998, -199999, -200000</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-408">
      <description>multiple range, large numbers</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>100000000000 to 100000000003</test>
      <result>
         <assert-deep-eq>100000000000, 100000000001, 100000000002, 100000000003</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-408a">
      <description>multiple range, large numbers</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>count(100000000000 to 100000000003)</test>
      <result>
         <assert-eq>4</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-408b">
      <description>multiple range, large numbers</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>(100000000000 to 100000000003)[3]</test>
      <result>
         <assert-eq>100000000002</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-408c">
      <description>multiple range, large numbers</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>100000000002 = 100000000000 to 100001000003</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-408d">
      <description>multiple range, large numbers</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>100001000002 &lt; 100000000000 to 100001000003</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-408e">
      <description>multiple range, large numbers, reversed</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>reverse(100000000000 to 100000000003)</test>
      <result>
         <assert-deep-eq>100000000003, 100000000002, 100000000001, 100000000000</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-409">
      <description>multiple range, very large numbers</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>1000000000000000000000 to 1000000000000000000003</test>
      <result>
         <assert-deep-eq>1000000000000000000000, 1000000000000000000001, 1000000000000000000002, 1000000000000000000003</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-409a">
      <description>multiple range, very large numbers</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>count(1000000000000000000000 to 1000000000000000000003)</test>
      <result>
         <assert-eq>4</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-409b">
      <description>multiple range, very large numbers</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>(1000000000000000000000 to 1000000000000000000003)[2]</test>
      <result>
         <assert-eq>1000000000000000000001</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-409c">
      <description>multiple range, very large numbers</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>1000000000000000020001 = 1000000000000000000000 to 1000000000000010000003</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-409d">
      <description>multiple range, very large numbers</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>1000000000000000020001 &lt; 1000000000000000000000 to 1000000000000500000003</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-409e">
      <description>multiple range, very large numbers, reversed</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>reverse(1000000000000000000000 to 1000000000000000000003)</test>
      <result>
         <assert-deep-eq>1000000000000000000003, 1000000000000000000002, 1000000000000000000001, 1000000000000000000000</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-410">
      <description>multiple range, large negative numbers</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>-100000000003 to -100000000000</test>
      <result>
         <assert-deep-eq>-100000000003, -100000000002, -100000000001, -100000000000</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-410a">
      <description>multiple range, large negative numbers</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>count(-100000000003 to -100000000000)</test>
      <result>
         <assert-deep-eq>4</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-410b">
      <description>multiple range, large negative numbers</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>(-100000000003 to -100000000000)[2]</test>
      <result>
         <assert-eq>-100000000002</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-410c">
      <description>multiple range, large negative numbers</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>-100000000003 = -100000000003 to -100000000000</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-410d">
      <description>multiple range, large negative numbers</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>-100000000008 &lt; -100000000006 to -100000000003</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-410e">
      <description>multiple range, large negative numbers, reversed</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>reverse(-100000000003 to -100000000000)</test>
      <result>
         <assert-deep-eq>-100000000000, -100000000001, -100000000002, -100000000003</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="RangeExpr-411">
      <description>multiple range, very large negative numbers</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>-1000000000000000000003 to -1000000000000000000000</test>
      <result>
         <assert-deep-eq>-1000000000000000000003, -1000000000000000000002, -1000000000000000000001, -1000000000000000000000</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-411a">
      <description>multiple range, very large negative numbers</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>count(-1000000000000000000003 to -1000000000000000000000)</test>
      <result>
         <assert-eq>4</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-411b">
      <description>multiple range, very large negative numbers</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>(-1000000000000000000003 to -1000000000000000000000)[4]</test>
      <result>
         <assert-eq>-1000000000000000000000</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-411c">
      <description>multiple range, very large negative numbers</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>-1000000000000000000000 = -1000000000000000000003 to -1000000000000000000000</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-411d">
      <description>multiple range, very large negative numbers</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>-1000000000000000000000 &lt; -1000000000000000500003 to -1000000000000000000000</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-411e">
      <description>multiple range, very large negative numbers, reversed</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>reverse(-1000000000000000000003 to -1000000000000000000000)</test>
      <result>
         <assert-deep-eq>-1000000000000000000000, -1000000000000000000001, -1000000000000000000002, -1000000000000000000003</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-412">
      <description>multiple range, spanning zero</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>-5 to +5</test>
      <result>
         <assert-deep-eq>-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-412a">
      <description>multiple range, spanning zero</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>count(-5 to +5)</test>
      <result>
         <assert-eq>11</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-412b">
      <description>multiple range, spanning zero</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>(-5 to +5)[6]</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-412c">
      <description>multiple range, spanning zero</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>3 = -5 to +5</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-412d">
      <description>multiple range, spanning zero</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>-5 to +5 > 29</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-412e">
      <description>multiple range, spanning zero, reversed</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>reverse(-5 to +5)</test>
      <result>
         <assert-deep-eq>5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-413">
      <description>multiple range, not known statically</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>0 to year-from-date(current-date()) idiv 1000</test>
      <result>
         <assert-deep-eq>0, 1, 2</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-413a">
      <description>multiple range, not known statically</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>count(0 to year-from-date(current-date()) idiv 1000)</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-413b">
      <description>multiple range, not known statically</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>(0 to year-from-date(current-date()) idiv 1000)[2]</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-413c">
      <description>multiple range, not known statically</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>2 = 0 to year-from-date(current-date()) idiv 1000</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-413d">
      <description>multiple range, not known statically</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>3 >= 0 to year-from-date(current-date()) idiv 1000</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-413e">
      <description>multiple range, not known statically, reversed</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>reverse(0 to year-from-date(current-date()) idiv 1000)</test>
      <result>
         <assert-deep-eq>2, 1, 0</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-414">
      <description>multiple range, not known statically</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>year-from-date(current-date()) idiv 1000 to 5</test>
      <result>
         <assert-deep-eq>2, 3, 4, 5</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-414a">
      <description>multiple range, not known statically</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>count(year-from-date(current-date()) idiv 1000 to 5)</test>
      <result>
         <assert-eq>4</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-414b">
      <description>multiple range, not known statically</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>(year-from-date(current-date()) idiv 1000 to 5)[2]</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-414c">
      <description>multiple range, not known statically</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>year-from-date(current-date()) idiv 1000 to 5 = 4</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-414d">
      <description>multiple range, not known statically</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>year-from-date(current-date()) idiv 1000 to 5 > 6</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-415">
      <description>singleton range, not known statically</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>year-from-date(current-date()) idiv 1000 to 2</test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-415a">
      <description>singleton range, not known statically</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>count(year-from-date(current-date()) idiv 1000 to 2)</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-415b">
      <description>singleton range, not known statically</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>(year-from-date(current-date()) idiv 1000 to 2)[1]</test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-416">
      <description>empty range, not known statically</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>year-from-date(current-date()) idiv 1000 to -42</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-416a">
      <description>empty range, not known statically</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>count(year-from-date(current-date()) idiv 1000 to -42)</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-416b">
      <description>empty range, not known statically</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>(year-from-date(current-date()) idiv 1000 to -42)[2]</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-600">
      <description>empty first arg</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>year-from-date(current-date())[. lt 0] to 10</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-601">
      <description>empty last arg</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <test>1 to year-from-date(current-date())[. lt 0]</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="RangeExpr-604">
      <description>atomized first arg</description>
      <created by="Michael Kay" on="2020-11-15"/>
      <dependency type="spec" value="XQ30+"/>    
      <test><![CDATA[let $x := <e>3</e> return 1 to $x]]></test>
      <result>
         <assert-deep-eq>1, 2, 3</assert-deep-eq>
      </result>
   </test-case>
   
</test-set>