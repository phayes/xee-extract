<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://ns.saxonica.com/xslt/export" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:vv="http://saxon.sf.net/generated-variable" xmlns:java-type="http://saxon.sf.net/java-type" version="30" packageVersion="1" saxonVersion="9.7.0.15" timeStamp="2017-03-21T16:35:17.615+01:00" target="JS">
 <co id="0" binds="">
  <globalVariable name="Q{}category" type="item()*" line="36" module="file:/e:/src/xslt30-test/report/viewer/process.xsl" slots="2" visibility="PRIVATE" jsAcceptor="return val;" jsCardCheck="function c() {return true;};">
   <ifCall xmlns:map="http://www.w3.org/2005/xpath-functions/map" vn="31" baseUri="file:/e:/src/xslt30-test/report/viewer/process.xsl" ns="=http://www.w3.org/1999/xhtml xsl=http://www.w3.org/1999/XSL/Transform f=http://myfunction prop=http://saxonica.com/ns/html-property cat=http://www.w3.org/2012/10/xslt-test-catalog ixsl=http://saxonica.com/ns/interactiveXSLT style=http://saxonica.com/ns/html-style-property xs=http://www.w3.org/2001/XMLSchema" line="36" name="map:get" type="item()*">
    <ifCall xmlns:ixsl="http://saxonica.com/ns/interactiveXSLT" name="ixsl:query-params" type="map(*)"/>
    <str val="category"/>
   </ifCall>
  </globalVariable>
 </co>
 <co id="1" binds="">
  <function name="Q{http://myfunction}isInCategory" line="110" module="file:/e:/src/xslt30-test/report/viewer/process.xsl" eval="8" flags="pU" as="xs:boolean" slots="3">
   <arg name="tests-doc" as="document-node()"/>
   <arg name="test-case" as="xs:string"/>
   <arg name="category-code" as="xs:string"/>
   <fn role="body" vn="31" baseUri="file:/e:/src/xslt30-test/report/viewer/process.xsl" ns="=http://www.w3.org/1999/xhtml xsl=http://www.w3.org/1999/XSL/Transform f=http://myfunction prop=http://saxonica.com/ns/html-property cat=http://www.w3.org/2012/10/xslt-test-catalog ixsl=http://saxonica.com/ns/interactiveXSLT style=http://saxonica.com/ns/html-style-property xs=http://www.w3.org/2001/XMLSchema" line="114" name="contains-token">
    <cvUntyped to="xs:string">
     <data>
      <slash>
       <fn name="key">
        <str val="test-cases"/>
        <varRef name="test-case" slot="1"/>
        <varRef name="tests-doc" slot="0"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}categories)" jsTest="return item.name=='categories'"/>
      </slash>
     </data>
    </cvUntyped>
    <varRef name="category-code" slot="2"/>
   </fn>
  </function>
 </co>
 <co id="2" binds="3 4 5 6">
  <template name="Q{}load-aux-data" flags="os" line="49" module="file:/e:/src/xslt30-test/report/viewer/process.xsl" slots="0">
   <sequence role="body" vn="31" baseUri="file:/e:/src/xslt30-test/report/viewer/process.xsl" ns="=http://www.w3.org/1999/xhtml xsl=http://www.w3.org/1999/XSL/Transform f=http://myfunction prop=http://saxonica.com/ns/html-property cat=http://www.w3.org/2012/10/xslt-test-catalog ixsl=http://saxonica.com/ns/interactiveXSLT style=http://saxonica.com/ns/html-style-property xs=http://www.w3.org/2001/XMLSchema" line="51">
    <message>
     <gVarRef role="select" name="Q{http://saxon.sf.net/generated-variable}gg1954471782" bSlot="0"/>
     <str role="terminate" val="no"/>
     <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
    </message>
    <ifCall xmlns:ixsl="http://saxonica.com/ns/interactiveXSLT" line="52" name="ixsl:schedule-action" type="item()*">
     <int val="0"/>
     <fn name="string">
      <convert from="xs:anyURI" to="xs:string">
       <fn name="resolve-uri">
        <gVarRef name="Q{http://saxon.sf.net/generated-variable}gg1950701640" bSlot="1"/>
        <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||resolve-uri">
         <check card="1" diag="0|1||resolve-uri">
          <cvUntyped to="xs:string">
           <data>
            <ifCall name="ixsl:location" type="item()?"/>
           </data>
          </cvUntyped>
         </check>
        </treat>
       </fn>
      </convert>
     </fn>
     <callT line="53" name="handle-submission" bSlot="2">
      <withParam name="submission-doc" flags="c" as="document-node()?">
       <fn line="54" name="doc">
        <fn name="resolve-uri">
         <gVarRef name="Q{http://saxon.sf.net/generated-variable}gg243194708" bSlot="3"/>
         <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||resolve-uri">
          <check card="1" diag="0|1||resolve-uri">
           <cvUntyped to="xs:string">
            <data>
             <ifCall name="ixsl:location" type="item()?"/>
            </data>
           </cvUntyped>
          </check>
         </treat>
        </fn>
       </fn>
      </withParam>
      <withParam name="tests-doc" flags="c" as="document-node()?">
       <fn line="50" name="doc">
        <fn name="resolve-uri">
         <str val="../tests-categories.xml"/>
         <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||resolve-uri">
          <check card="1" diag="0|1||resolve-uri">
           <cvUntyped to="xs:string">
            <data>
             <ifCall name="ixsl:location" type="item()?"/>
            </data>
           </cvUntyped>
          </check>
         </treat>
        </fn>
       </fn>
      </withParam>
     </callT>
    </ifCall>
   </sequence>
  </template>
 </co>
 <co id="7" vis="PUBLIC" binds="">
  <globalParam name="Q{}notReported" type="xs:boolean" line="0" visibility="PUBLIC" jsAcceptor="return SaxonJS.U.Atomic.boolean.cast(val);" jsCardCheck="function c(n) {return n==1;};">
   <false/>
  </globalParam>
 </co>
 <co id="5" binds="0 0 0 8 8 8 7 0">
  <template name="Q{}handle-submission" flags="os" line="60" module="file:/e:/src/xslt30-test/report/viewer/process.xsl" slots="14">
   <sequence role="body" vn="31" baseUri="file:/e:/src/xslt30-test/report/viewer/process.xsl" ns="=http://www.w3.org/1999/xhtml xsl=http://www.w3.org/1999/XSL/Transform f=http://myfunction prop=http://saxonica.com/ns/html-property cat=http://www.w3.org/2012/10/xslt-test-catalog ixsl=http://saxonica.com/ns/interactiveXSLT style=http://saxonica.com/ns/html-style-property xs=http://www.w3.org/2001/XMLSchema" line="61">
    <param name="submission-doc" slot="0">
     <str role="select" val=""/>
     <supplied role="conversion" slot="0"/>
    </param>
    <param line="62" name="tests-doc" slot="1">
     <str role="select" val=""/>
     <supplied role="conversion" slot="1"/>
    </param>
    <message line="63">
     <valueOf role="select" flags="e">
      <str val="Processing submission..."/>
     </valueOf>
     <str role="terminate" val="no"/>
     <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
    </message>
    <resultDoc line="64" global="#&#xD;&#xA;#Tue Mar 21 16:35:17 CET 2017&#xD;&#xA;" local="#&#xD;&#xA;#Tue Mar 21 16:35:17 CET 2017&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xD;&#xA;">
     <str role="href" val="#content"/>
     <sequence role="content" line="65">
      <elem name="ul" nsuri="http://www.w3.org/1999/xhtml" flags="d">
       <sequence>
        <att name="class" flags="l">
         <str val="list-group"/>
        </att>
        <let line="67" var="vv:loc212683148" as="xs:string" slot="2" eval="7">
         <treat line="78" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|2||f:isInCategory">
          <check card="1" diag="0|2||f:isInCategory">
           <cvUntyped to="xs:string">
            <data>
             <gVarRef name="Q{}category" bSlot="0"/>
            </data>
           </cvUntyped>
          </check>
         </treat>
         <let var="vv:loc1716093734" as="document-node()" slot="3" eval="7">
          <treat line="78" as="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType==9||item.nodeType==11);" diag="0|0||f:isInCategory">
           <check card="1" diag="0|0||f:isInCategory">
            <varRef name="tests-doc" slot="1"/>
           </check>
          </treat>
          <let var="vv:loc1373419525" as="xs:string" slot="4" eval="7">
           <treat line="74" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|2||f:isInCategory">
            <check card="1" diag="0|2||f:isInCategory">
             <cvUntyped to="xs:string">
              <data>
               <gVarRef name="Q{}category" bSlot="1"/>
              </data>
             </cvUntyped>
            </check>
           </treat>
           <let var="vv:loc6444850" as="document-node()" slot="5" eval="7">
            <treat line="74" as="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType==9||item.nodeType==11);" diag="0|0||f:isInCategory">
             <check card="1" diag="0|0||f:isInCategory">
              <varRef name="tests-doc" slot="1"/>
             </check>
            </treat>
            <let var="vv:loc302977067" as="*:test-set*" indexable="true" slot="6" eval="3">
             <slash line="70">
              <conditionalSort>
               <fn name="exists">
                <tail start="2">
                 <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
                  <varRef name="tests-doc" slot="1"/>
                 </treat>
                </tail>
               </fn>
               <docOrder intra="0">
                <slash>
                 <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
                  <varRef name="tests-doc" slot="1"/>
                 </treat>
                 <axis name="child" nodeTest="*:all-tests" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType==1&amp;&amp;q.local == 'all-tests'"/>
                </slash>
               </docOrder>
              </conditionalSort>
              <axis name="child" nodeTest="*:test-set" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType==1&amp;&amp;q.local == 'test-set'"/>
             </slash>
             <forEach>
              <docOrder intra="0">
               <let var="vv:loc1229202732" as="document-node()" slot="7" eval="7">
                <treat as="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType==9||item.nodeType==11);" diag="0|0||f:isInCategory">
                 <check card="1" diag="0|0||f:isInCategory">
                  <varRef name="tests-doc" slot="1"/>
                 </check>
                </treat>
                <let var="vv:loc199449817" as="xs:string" slot="8" eval="7">
                 <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|2||f:isInCategory">
                  <check card="1" diag="0|2||f:isInCategory">
                   <cvUntyped to="xs:string">
                    <data>
                     <gVarRef name="Q{}category" bSlot="2"/>
                    </data>
                   </cvUntyped>
                  </check>
                 </treat>
                 <filter flags="b">
                  <slash>
                   <conditionalSort>
                    <fn name="exists">
                     <tail start="2">
                      <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
                       <varRef name="submission-doc" slot="0"/>
                      </treat>
                     </tail>
                    </fn>
                    <docOrder intra="0">
                     <slash>
                      <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
                       <varRef name="submission-doc" slot="0"/>
                      </treat>
                      <axis name="child" nodeTest="*:test-suite-result" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType==1&amp;&amp;q.local == 'test-suite-result'"/>
                     </slash>
                    </docOrder>
                   </conditionalSort>
                   <axis name="child" nodeTest="*:test-set" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType==1&amp;&amp;q.local == 'test-set'"/>
                  </slash>
                  <fn name="exists">
                   <filter flags="b">
                    <filter flags="b">
                     <axis name="child" nodeTest="*:test-case" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType==1&amp;&amp;q.local == 'test-case'"/>
                     <gcEE op="=" card="N:1" comp="CCC">
                      <gVarRef name="Q{}result-type" bSlot="3"/>
                      <data>
                       <axis name="attribute" nodeTest="attribute(Q{}result)" jsTest="return item.name=='result'"/>
                      </data>
                     </gcEE>
                    </filter>
                    <fn line="114" name="contains-token">
                     <cvUntyped to="xs:string">
                      <data>
                       <slash>
                        <fn name="key">
                         <str val="test-cases"/>
                         <check line="67" card="1" diag="0|1||f:isInCategory">
                          <cvUntyped to="xs:string">
                           <data>
                            <axis name="attribute" nodeTest="attribute(Q{}name)" jsTest="return item.name=='name'"/>
                           </data>
                          </cvUntyped>
                         </check>
                         <varRef line="67" name="vv:loc1229202732" slot="7"/>
                        </fn>
                        <axis name="attribute" nodeTest="attribute(Q{}categories)" jsTest="return item.name=='categories'"/>
                       </slash>
                      </data>
                     </cvUntyped>
                     <varRef line="67" name="vv:loc199449817" slot="8"/>
                    </fn>
                   </filter>
                  </fn>
                 </filter>
                </let>
               </let>
              </docOrder>
              <elem line="68" name="li" nsuri="http://www.w3.org/1999/xhtml" flags="dl">
               <sequence>
                <att name="class" flags="l">
                 <str val="list-group-item"/>
                </att>
                <elem line="69" name="a" nsuri="http://www.w3.org/1999/xhtml" flags="dl">
                 <sequence>
                  <att name="class" flags="l">
                   <str val="btn btn-default"/>
                  </att>
                  <att name="data-toggle" flags="l">
                   <str val="collapse"/>
                  </att>
                  <att name="href" flags="l">
                   <fn name="concat">
                    <str val="#"/>
                    <fn name="string">
                     <convert from="xs:untypedAtomic" to="xs:string">
                      <data>
                       <axis name="attribute" nodeTest="attribute(Q{}name)" jsTest="return item.name=='name'"/>
                      </data>
                     </convert>
                    </fn>
                   </fn>
                  </att>
                  <valueOf line="70" flags="l">
                   <fn name="string-join">
                    <convert from="xs:anyAtomicType" to="xs:string">
                     <let var="vv:current1587113981" as="*:test-set" slot="9" eval="7">
                      <dot type="*:test-set"/>
                      <data>
                       <slash>
                        <docOrder intra="0">
                         <let var="vv:loc171802996" as="xs:untypedAtomic?" slot="10" eval="8">
                          <data>
                           <slash simple="1">
                            <varRef name="vv:current1587113981" slot="9"/>
                            <axis name="attribute" nodeTest="attribute(Q{}name)" jsTest="return item.name=='name'"/>
                           </slash>
                          </data>
                          <indexedFilter line="67" use="left">
                           <varRef name="vv:loc302977067" slot="6"/>
                           <gc line="70" op="=" card="1:1" comp="CCC">
                            <data>
                             <axis name="attribute" nodeTest="attribute(Q{}name)" jsTest="return item.name=='name'"/>
                            </data>
                            <varRef name="vv:loc171802996" slot="10"/>
                           </gc>
                          </indexedFilter>
                         </let>
                        </docOrder>
                        <axis name="attribute" nodeTest="attribute(Q{}description)" jsTest="return item.name=='description'"/>
                       </slash>
                      </data>
                     </let>
                    </convert>
                    <str val=" "/>
                   </fn>
                  </valueOf>
                  <valueOf flags="l">
                   <str val=" &#xA;                        ["/>
                  </valueOf>
                  <valueOf line="71" flags="l">
                   <convert from="xs:untypedAtomic" to="xs:string">
                    <data>
                     <axis name="attribute" nodeTest="attribute(Q{}name)" jsTest="return item.name=='name'"/>
                    </data>
                   </convert>
                  </valueOf>
                  <valueOf flags="l">
                   <str val="]&#xA;                         "/>
                  </valueOf>
                  <elem line="73" name="span" nsuri="http://www.w3.org/1999/xhtml" flags="dl">
                   <sequence>
                    <att name="class" flags="l">
                     <str val="badge"/>
                    </att>
                    <valueOf line="74" flags="l">
                     <convert from="xs:integer" to="xs:string">
                      <fn name="count">
                       <filter flags="b">
                        <filter flags="b">
                         <axis name="child" nodeTest="*:test-case" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType==1&amp;&amp;q.local == 'test-case'"/>
                         <gcEE op="=" card="N:1" comp="CCC">
                          <gVarRef name="Q{}result-type" bSlot="4"/>
                          <data>
                           <axis name="attribute" nodeTest="attribute(Q{}result)" jsTest="return item.name=='result'"/>
                          </data>
                         </gcEE>
                        </filter>
                        <fn line="114" name="contains-token">
                         <cvUntyped to="xs:string">
                          <data>
                           <slash>
                            <fn name="key">
                             <str val="test-cases"/>
                             <check line="74" card="1" diag="0|1||f:isInCategory">
                              <cvUntyped to="xs:string">
                               <data>
                                <axis name="attribute" nodeTest="attribute(Q{}name)" jsTest="return item.name=='name'"/>
                               </data>
                              </cvUntyped>
                             </check>
                             <varRef line="67" name="vv:loc6444850" slot="5"/>
                            </fn>
                            <axis name="attribute" nodeTest="attribute(Q{}categories)" jsTest="return item.name=='categories'"/>
                           </slash>
                          </data>
                         </cvUntyped>
                         <varRef line="67" name="vv:loc1373419525" slot="4"/>
                        </fn>
                       </filter>
                      </fn>
                     </convert>
                    </valueOf>
                   </sequence>
                  </elem>
                 </sequence>
                </elem>
                <elem line="76" name="ul" nsuri="http://www.w3.org/1999/xhtml" flags="dl">
                 <sequence>
                  <att name="id" flags="l">
                   <convert from="xs:untypedAtomic" to="xs:string">
                    <data>
                     <axis name="attribute" nodeTest="attribute(Q{}name)" jsTest="return item.name=='name'"/>
                    </data>
                   </convert>
                  </att>
                  <att name="class" flags="l">
                   <str val="collapse list-group"/>
                  </att>
                  <forEach line="78">
                   <filter flags="b">
                    <filter flags="b">
                     <axis name="child" nodeTest="*:test-case" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType==1&amp;&amp;q.local == 'test-case'"/>
                     <gcEE op="=" card="N:1" comp="CCC">
                      <gVarRef name="Q{}result-type" bSlot="5"/>
                      <data>
                       <axis name="attribute" nodeTest="attribute(Q{}result)" jsTest="return item.name=='result'"/>
                      </data>
                     </gcEE>
                    </filter>
                    <fn line="114" name="contains-token">
                     <cvUntyped to="xs:string">
                      <data>
                       <slash>
                        <fn name="key">
                         <str val="test-cases"/>
                         <check line="78" card="1" diag="0|1||f:isInCategory">
                          <cvUntyped to="xs:string">
                           <data>
                            <axis name="attribute" nodeTest="attribute(Q{}name)" jsTest="return item.name=='name'"/>
                           </data>
                          </cvUntyped>
                         </check>
                         <varRef line="67" name="vv:loc1716093734" slot="3"/>
                        </fn>
                        <axis name="attribute" nodeTest="attribute(Q{}categories)" jsTest="return item.name=='categories'"/>
                       </slash>
                      </data>
                     </cvUntyped>
                     <varRef line="67" name="vv:loc212683148" slot="2"/>
                    </fn>
                   </filter>
                   <elem line="79" name="li" nsuri="http://www.w3.org/1999/xhtml" flags="dl">
                    <sequence>
                     <att name="class" flags="l">
                      <str val="list-group-item"/>
                     </att>
                     <elem line="80" name="a" nsuri="http://www.w3.org/1999/xhtml" flags="dl">
                      <sequence>
                       <att name="href" flags="l">
                        <fn name="concat">
                         <str val="testcase.html?t="/>
                         <fn name="string">
                          <convert from="xs:untypedAtomic" to="xs:string">
                           <data>
                            <axis name="attribute" nodeTest="attribute(Q{}name)" jsTest="return item.name=='name'"/>
                           </data>
                          </convert>
                         </fn>
                         <str val="&amp;s="/>
                         <fn name="string-join">
                          <convert from="xs:untypedAtomic" to="xs:string">
                           <data>
                            <slash>
                             <axis name="parent" nodeTest="(element()|document-node())" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType==9||item.nodeType==11||item.nodeType==1);"/>
                             <axis name="attribute" nodeTest="attribute(Q{}name)" jsTest="return item.name=='name'"/>
                            </slash>
                           </data>
                          </convert>
                          <str val=" "/>
                         </fn>
                        </fn>
                       </att>
                       <att name="target" flags="l">
                        <str val="testcase"/>
                       </att>
                       <valueOf flags="el">
                        <convert from="xs:untypedAtomic" to="xs:string">
                         <data>
                          <axis name="attribute" nodeTest="attribute(Q{}name)" jsTest="return item.name=='name'"/>
                         </data>
                        </convert>
                       </valueOf>
                      </sequence>
                     </elem>
                     <choose line="81">
                      <fn name="exists">
                       <axis name="attribute" nodeTest="attribute(Q{}comment)" jsTest="return item.name=='comment'"/>
                      </fn>
                      <valueOf flags="el">
                       <fn name="concat">
                        <str val="&#xA;                                    ("/>
                        <fn name="string">
                         <convert from="xs:untypedAtomic" to="xs:string">
                          <data>
                           <axis name="attribute" nodeTest="attribute(Q{}comment)" jsTest="return item.name=='comment'"/>
                          </data>
                         </convert>
                        </fn>
                        <str val=")  &#xA;                                "/>
                       </fn>
                      </valueOf>
                     </choose>
                    </sequence>
                   </elem>
                  </forEach>
                 </sequence>
                </elem>
               </sequence>
              </elem>
             </forEach>
            </let>
           </let>
          </let>
         </let>
        </let>
       </sequence>
      </elem>
      <choose line="90">
       <gVarRef name="Q{}notReported" bSlot="6"/>
       <let line="91" var="runned-test" as="xs:string*" slot="11" eval="3">
        <slash>
         <docOrder intra="0">
          <slash>
           <docOrder intra="0">
            <slash>
             <conditionalSort>
              <fn name="exists">
               <tail start="2">
                <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
                 <varRef name="submission-doc" slot="0"/>
                </treat>
               </tail>
              </fn>
              <docOrder intra="0">
               <slash>
                <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
                 <varRef name="submission-doc" slot="0"/>
                </treat>
                <axis name="child" nodeTest="*:test-suite-result" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType==1&amp;&amp;q.local == 'test-suite-result'"/>
               </slash>
              </docOrder>
             </conditionalSort>
             <axis name="child" nodeTest="*:test-set" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType==1&amp;&amp;q.local == 'test-set'"/>
            </slash>
           </docOrder>
           <axis name="child" nodeTest="*:test-case" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType==1&amp;&amp;q.local == 'test-case'"/>
          </slash>
         </docOrder>
         <fn name="string">
          <axis name="attribute" nodeTest="attribute(Q{}name)" jsTest="return item.name=='name'"/>
         </fn>
        </slash>
        <let line="92" var="not-reported" as="*:test-case*" slot="12" eval="3">
         <docOrder intra="0">
          <filter flags="b">
           <let var="vv:loc718068661" as="xs:string" slot="13" eval="7">
            <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||contains-token">
             <check card="1" diag="0|1||contains-token">
              <cvUntyped to="xs:string">
               <data>
                <gVarRef name="Q{}category" bSlot="7"/>
               </data>
              </cvUntyped>
             </check>
            </treat>
            <filter flags="b">
             <slash>
              <docOrder intra="0">
               <slash>
                <conditionalSort>
                 <fn name="exists">
                  <tail start="2">
                   <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
                    <varRef name="tests-doc" slot="1"/>
                   </treat>
                  </tail>
                 </fn>
                 <docOrder intra="0">
                  <slash>
                   <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
                    <varRef name="tests-doc" slot="1"/>
                   </treat>
                   <axis name="child" nodeTest="element()" jsTest="return item.nodeType==1;"/>
                  </slash>
                 </docOrder>
                </conditionalSort>
                <axis name="child" nodeTest="*:test-set" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType==1&amp;&amp;q.local == 'test-set'"/>
               </slash>
              </docOrder>
              <axis name="child" nodeTest="*:test-case" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType==1&amp;&amp;q.local == 'test-case'"/>
             </slash>
             <fn name="contains-token">
              <cvUntyped to="xs:string">
               <data>
                <axis name="attribute" nodeTest="attribute(Q{}categories)" jsTest="return item.name=='categories'"/>
               </data>
              </cvUntyped>
              <varRef name="vv:loc718068661" slot="13"/>
             </fn>
            </filter>
           </let>
           <fn name="not">
            <gcEE op="=" card="N:1" comp="CCC">
             <varRef name="runned-test" slot="11"/>
             <data>
              <axis name="attribute" nodeTest="attribute(Q{}name)" jsTest="return item.name=='name'"/>
             </data>
            </gcEE>
           </fn>
          </filter>
         </docOrder>
         <choose line="93">
          <fn name="exists">
           <varRef name="not-reported" slot="12"/>
          </fn>
          <sequence line="94">
           <elem name="h3" nsuri="http://www.w3.org/1999/xhtml" flags="d">
            <valueOf flags="el">
             <str val="Not reported tests"/>
            </valueOf>
           </elem>
           <elem line="96" name="ul" nsuri="http://www.w3.org/1999/xhtml" flags="d">
            <forEach>
             <varRef name="not-reported" slot="12"/>
             <elem line="98" name="li" nsuri="http://www.w3.org/1999/xhtml" flags="dl">
              <elem name="a" nsuri="http://www.w3.org/1999/xhtml" flags="dl">
               <sequence>
                <att name="href" flags="l">
                 <fn name="concat">
                  <str val="testcase.html?t="/>
                  <fn name="string">
                   <convert from="xs:untypedAtomic" to="xs:string">
                    <data>
                     <axis name="attribute" nodeTest="attribute(Q{}name)" jsTest="return item.name=='name'"/>
                    </data>
                   </convert>
                  </fn>
                  <str val="&amp;s="/>
                  <fn name="string-join">
                   <convert from="xs:untypedAtomic" to="xs:string">
                    <data>
                     <slash>
                      <axis name="parent" nodeTest="(element()|document-node())" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType==9||item.nodeType==11||item.nodeType==1);"/>
                      <axis name="attribute" nodeTest="attribute(Q{}name)" jsTest="return item.name=='name'"/>
                     </slash>
                    </data>
                   </convert>
                   <str val=" "/>
                  </fn>
                 </fn>
                </att>
                <valueOf flags="el">
                 <convert from="xs:untypedAtomic" to="xs:string">
                  <data>
                   <axis name="attribute" nodeTest="attribute(Q{}name)" jsTest="return item.name=='name'"/>
                  </data>
                 </convert>
                </valueOf>
               </sequence>
              </elem>
             </elem>
            </forEach>
           </elem>
          </sequence>
         </choose>
        </let>
       </let>
      </choose>
     </sequence>
    </resultDoc>
   </sequence>
  </template>
 </co>
 <co id="9" binds="">
  <globalVariable name="Q{}category-names" type="map(xs:string, xs:string)" line="33" module="file:/e:/src/xslt30-test/report/viewer/process.xsl" visibility="PRIVATE" jsAcceptor="if (typeof val == 'object') {return val;} else {throw SaxonJS.XError('Cannot convert supplied JS value to a map or array');}" jsCardCheck="function c(n) {return n==1;};">
   <treat vn="31" baseUri="file:/e:/src/xslt30-test/report/viewer/process.xsl" ns="=http://www.w3.org/1999/xhtml xsl=http://www.w3.org/1999/XSL/Transform f=http://myfunction prop=http://saxonica.com/ns/html-property cat=http://www.w3.org/2012/10/xslt-test-catalog ixsl=http://saxonica.com/ns/interactiveXSLT style=http://saxonica.com/ns/html-style-property xs=http://www.w3.org/2001/XMLSchema" line="33" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|category-names">
    <ifCall xmlns:map="http://www.w3.org/2005/xpath-functions/map" name="map:_new" type="map(*)">
     <sequence>
      <ifCall name="map:entry" type="map(*)">
       <str val="BC"/>
       <str val="Basic Conformance"/>
      </ifCall>
      <ifCall name="map:entry" type="map(*)">
       <str val="STRM"/>
       <str val="Streaming"/>
      </ifCall>
      <ifCall name="map:entry" type="map(*)">
       <str val="SA"/>
       <str val="Schema-Aware"/>
      </ifCall>
      <ifCall name="map:entry" type="map(*)">
       <str val="XP10"/>
       <str val="Backwards Compatibility"/>
      </ifCall>
      <ifCall name="map:entry" type="map(*)">
       <str val="XP31"/>
       <str val="XPath 3.1"/>
      </ifCall>
      <ifCall name="map:entry" type="map(*)">
       <str val="HOF"/>
       <str val="Higher-Order Functions"/>
      </ifCall>
      <ifCall name="map:entry" type="map(*)">
       <str val="SER"/>
       <str val="Serialization"/>
      </ifCall>
      <ifCall name="map:entry" type="map(*)">
       <str val="EVAL"/>
       <str val="Dynamic Evaluation"/>
      </ifCall>
     </sequence>
    </ifCall>
   </treat>
  </globalVariable>
 </co>
 <co id="4" binds="10">
  <globalVariable name="Q{http://saxon.sf.net/generated-variable}gg1950701640" type="xs:string?" line="52" module="file:/e:/src/xslt30-test/report/viewer/process.xsl" visibility="PRIVATE" jsAcceptor="return SaxonJS.U.Atomic.string.cast(val);" jsCardCheck="function c(n) {return n&lt;=1;};">
   <check vn="31" baseUri="file:/e:/src/xslt30-test/report/viewer/process.xsl" ns="=http://www.w3.org/1999/xhtml xsl=http://www.w3.org/1999/XSL/Transform f=http://myfunction prop=http://saxonica.com/ns/html-property cat=http://www.w3.org/2012/10/xslt-test-catalog ixsl=http://saxonica.com/ns/interactiveXSLT style=http://saxonica.com/ns/html-style-property xs=http://www.w3.org/2001/XMLSchema" line="52" card="?" diag="0|0||resolve-uri">
    <cvUntyped to="xs:string">
     <data>
      <indexedFilter use="right">
       <gVarRef name="Q{}results" bSlot="0"/>
       <gc op="=" card="M:N" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <ifCall xmlns:map="http://www.w3.org/2005/xpath-functions/map" name="map:get" type="item()*">
          <ifCall xmlns:ixsl="http://saxonica.com/ns/interactiveXSLT" name="ixsl:query-params" type="map(*)"/>
          <str val="product"/>
         </ifCall>
        </data>
        <data>
         <axis name="attribute" nodeTest="attribute(Q{}name)" jsTest="return item.name=='name'"/>
        </data>
       </gc>
      </indexedFilter>
     </data>
    </cvUntyped>
   </check>
  </globalVariable>
 </co>
 <co id="8" vis="PUBLIC" binds="">
  <globalParam name="Q{}result-type" type="xs:string+" line="0" visibility="PUBLIC" flags="i" jsAcceptor="return SaxonJS.U.Atomic.string.cast(val);" jsCardCheck="function c(n) {return n&gt;=1;};"/>
 </co>
 <co id="11" binds="9 0 2">
  <template name="Q{}main" flags="os" line="38" module="file:/e:/src/xslt30-test/report/viewer/process.xsl" slots="0">
   <sequence role="body" vn="31" baseUri="file:/e:/src/xslt30-test/report/viewer/process.xsl" ns="=http://www.w3.org/1999/xhtml xsl=http://www.w3.org/1999/XSL/Transform f=http://myfunction prop=http://saxonica.com/ns/html-property cat=http://www.w3.org/2012/10/xslt-test-catalog ixsl=http://saxonica.com/ns/interactiveXSLT style=http://saxonica.com/ns/html-style-property xs=http://www.w3.org/2001/XMLSchema" line="39">
    <message>
     <valueOf role="select" flags="Se">
      <str val="Started..."/>
     </valueOf>
     <str role="terminate" val="no"/>
     <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
    </message>
    <resultDoc line="40" global="#&#xD;&#xA;#Tue Mar 21 16:35:17 CET 2017&#xD;&#xA;" local="#&#xD;&#xA;#Tue Mar 21 16:35:17 CET 2017&#xD;&#xA;">
     <str role="href" val="#subtitle"/>
     <valueOf role="content" flags="e">
      <fn name="concat">
       <str val="&#xA;            for "/>
       <fn name="string-join">
        <convert from="xs:anyAtomicType" to="xs:string">
         <data>
          <mergeAdj>
           <ifCall xmlns:map="http://www.w3.org/2005/xpath-functions/map" name="map:get" type="item()*">
            <ifCall xmlns:ixsl="http://saxonica.com/ns/interactiveXSLT" name="ixsl:query-params" type="map(*)"/>
            <str val="product"/>
           </ifCall>
          </mergeAdj>
         </data>
        </convert>
        <str val=" "/>
       </fn>
       <str val=" (in category "/>
       <fn name="string-join">
        <convert from="xs:anyAtomicType" to="xs:string">
         <data>
          <mergeAdj>
           <ifCall xmlns:map="http://www.w3.org/2005/xpath-functions/map" name="map:get" type="item()*">
            <gVarRef name="Q{}category-names" bSlot="0"/>
            <atomSing diag="0|1||map:get">
             <gVarRef name="Q{}category" bSlot="1"/>
            </atomSing>
           </ifCall>
          </mergeAdj>
         </data>
        </convert>
        <str val=" "/>
       </fn>
       <str val=") &#xA;        "/>
      </fn>
     </valueOf>
    </resultDoc>
    <message line="43">
     <valueOf role="select" flags="e">
      <str val="Fetching tests and their categories..."/>
     </valueOf>
     <str role="terminate" val="no"/>
     <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
    </message>
    <ifCall xmlns:ixsl="http://saxonica.com/ns/interactiveXSLT" line="44" name="ixsl:schedule-action" type="item()*">
     <int val="0"/>
     <fn name="string">
      <convert from="xs:anyURI" to="xs:string">
       <fn name="resolve-uri">
        <str val="../tests-categories.xml"/>
        <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||resolve-uri">
         <check card="1" diag="0|1||resolve-uri">
          <cvUntyped to="xs:string">
           <data>
            <ifCall name="ixsl:location" type="item()?"/>
           </data>
          </cvUntyped>
         </check>
        </treat>
       </fn>
      </convert>
     </fn>
     <callT line="45" name="load-aux-data" bSlot="2"/>
    </ifCall>
   </sequence>
  </template>
 </co>
 <co id="10" binds="">
  <globalVariable name="Q{}results" type="element(Q{}result)+" line="17" module="file:/e:/src/xslt30-test/report/viewer/process.xsl" visibility="PRIVATE" flags="x" jsAcceptor="function test(item) {function a() {var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType==1 &amp;&amp; q.uri==''&amp;&amp;q.local=='result';};function b() {function a() {var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType==1 &amp;&amp; q.uri==''&amp;&amp;q.local=='result';};function b() {return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType==1;};return a()&amp;&amp;b();};return a()&amp;&amp;b();};if (test(val)) {return val;} else {throw SaxonJS.XError('Conversion failed', 'XTTE0590');}" jsCardCheck="function c(n) {return n&gt;=1;};">
   <treat vn="31" baseUri="file:/e:/src/xslt30-test/report/viewer/process.xsl" ns="xsl=http://www.w3.org/1999/XSL/Transform f=http://myfunction prop=http://saxonica.com/ns/html-property cat=http://www.w3.org/2012/10/xslt-test-catalog ixsl=http://saxonica.com/ns/interactiveXSLT style=http://saxonica.com/ns/html-style-property xs=http://www.w3.org/2001/XMLSchema" line="18" as="element(Q{}result)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType==1 &amp;&amp; q.uri==''&amp;&amp;q.local=='result';" diag="3|0|XTTE0570|results">
    <sequence>
     <elem name="result">
      <sequence>
       <att name="name" flags="l">
        <str val="Exselt"/>
       </att>
       <valueOf flags="Sel">
        <str val="../submission/exselt.xml"/>
       </valueOf>
      </sequence>
     </elem>
     <elem line="19" name="result">
      <sequence>
       <att name="name" flags="l">
        <str val="Saxon-9.8"/>
       </att>
       <valueOf flags="Sel">
        <str val="../submission/Saxon_9.8.xml"/>
       </valueOf>
      </sequence>
     </elem>
     <elem line="20" name="result">
      <sequence>
       <att name="name" flags="l">
        <str val="Saxon-JS"/>
       </att>
       <valueOf flags="Sel">
        <str val="../submission/Saxon-JS_1.0.xml"/>
       </valueOf>
      </sequence>
     </elem>
     <elem line="21" name="result">
      <sequence>
       <att name="name" flags="l">
        <str val="Parrot"/>
       </att>
       <valueOf flags="Sel">
        <str val="../submission/Parrot_2017.xml"/>
       </valueOf>
      </sequence>
     </elem>
    </sequence>
   </treat>
  </globalVariable>
 </co>
 <co id="3" binds="10">
  <globalVariable name="Q{http://saxon.sf.net/generated-variable}gg1954471782" type="item()+" line="51" module="file:/e:/src/xslt30-test/report/viewer/process.xsl" visibility="PRIVATE" jsAcceptor="return val;" jsCardCheck="function c(n) {return n&gt;=1;};">
   <sequence vn="31" baseUri="file:/e:/src/xslt30-test/report/viewer/process.xsl" ns="=http://www.w3.org/1999/xhtml xsl=http://www.w3.org/1999/XSL/Transform f=http://myfunction prop=http://saxonica.com/ns/html-property cat=http://www.w3.org/2012/10/xslt-test-catalog ixsl=http://saxonica.com/ns/interactiveXSLT style=http://saxonica.com/ns/html-style-property xs=http://www.w3.org/2001/XMLSchema" line="51">
    <str val="Fetching: "/>
    <indexedFilter use="right">
     <gVarRef name="Q{}results" bSlot="0"/>
     <gc op="=" card="M:N" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
      <data>
       <ifCall xmlns:map="http://www.w3.org/2005/xpath-functions/map" name="map:get" type="item()*">
        <ifCall xmlns:ixsl="http://saxonica.com/ns/interactiveXSLT" name="ixsl:query-params" type="map(*)"/>
        <str val="product"/>
       </ifCall>
      </data>
      <data>
       <axis name="attribute" nodeTest="attribute(Q{}name)" jsTest="return item.name=='name'"/>
      </data>
     </gc>
    </indexedFilter>
   </sequence>
  </globalVariable>
 </co>
 <co id="12" binds="">
  <mode onNo="TC" flags="dW" patternSlots="0"/>
 </co>
 <co id="6" binds="10">
  <globalVariable name="Q{http://saxon.sf.net/generated-variable}gg243194708" type="xs:string?" line="54" module="file:/e:/src/xslt30-test/report/viewer/process.xsl" visibility="PRIVATE" jsAcceptor="return SaxonJS.U.Atomic.string.cast(val);" jsCardCheck="function c(n) {return n&lt;=1;};">
   <check vn="31" baseUri="file:/e:/src/xslt30-test/report/viewer/process.xsl" ns="=http://www.w3.org/1999/xhtml xsl=http://www.w3.org/1999/XSL/Transform f=http://myfunction prop=http://saxonica.com/ns/html-property cat=http://www.w3.org/2012/10/xslt-test-catalog ixsl=http://saxonica.com/ns/interactiveXSLT style=http://saxonica.com/ns/html-style-property xs=http://www.w3.org/2001/XMLSchema" line="54" card="?" diag="0|0||resolve-uri">
    <cvUntyped to="xs:string">
     <data>
      <indexedFilter use="right">
       <gVarRef name="Q{}results" bSlot="0"/>
       <gc op="=" card="M:N" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <ifCall xmlns:map="http://www.w3.org/2005/xpath-functions/map" name="map:get" type="item()*">
          <ifCall xmlns:ixsl="http://saxonica.com/ns/interactiveXSLT" name="ixsl:query-params" type="map(*)"/>
          <str val="product"/>
         </ifCall>
        </data>
        <data>
         <axis name="attribute" nodeTest="attribute(Q{}name)" jsTest="return item.name=='name'"/>
        </data>
       </gc>
      </indexedFilter>
     </data>
    </cvUntyped>
   </check>
  </globalVariable>
 </co>
 <overridden/>
 <key name="Q{}test-cases" line="108" module="file:/e:/src/xslt30-test/report/viewer/process.xsl" binds="">
  <p.nodeTest test="element(Q{http://www.w3.org/2012/10/xslt-test-catalog}test-case)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType==1 &amp;&amp; q.uri=='http://www.w3.org/2012/10/xslt-test-catalog'&amp;&amp;q.local=='test-case';"/>
  <data vn="31" baseUri="file:/e:/src/xslt30-test/report/viewer/process.xsl" ns="=http://www.w3.org/1999/xhtml xsl=http://www.w3.org/1999/XSL/Transform f=http://myfunction prop=http://saxonica.com/ns/html-property cat=http://www.w3.org/2012/10/xslt-test-catalog ixsl=http://saxonica.com/ns/interactiveXSLT style=http://saxonica.com/ns/html-style-property xs=http://www.w3.org/2001/XMLSchema" line="108">
   <axis name="attribute" nodeTest="attribute(Q{}name)" jsTest="return item.name=='name'"/>
  </data>
 </key>
 <output>
  <property name="{http://saxon.sf.net/}stylesheet-version" value="30"/>
 </output>
 <decimalFormat decimal-separator="46" grouping-separator="44" digit="35" minus-sign="45" percent="37" per-mille="8240" zero-digit="48" exponent-separator="101" pattern-separator="59" infinity="Infinity" NaN="NaN"/>
</package>
<?Σ 79b2bde6?>
