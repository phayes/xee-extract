<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns="http://www.w3.org/2012/10/xslt-test-catalog" xmlns:xs="http://www.w3.org/2001/XMLSchema" name="sf-deep-equal">
   <description>deep-equal() function with streaming</description>
   
   <environment name="sf-deep-equal-A">
     <stylesheet file="sf-deep-equal-A.xsl"/>
   </environment>
   
   <dependencies>
      <spec value="XSLT30+"/>
      <feature value="streaming"/>
   </dependencies>
      
   <test-case name="sf-deep-equal-003">
      <description>Basic Test of xsl:stream instruction with deep-equal()</description>
      <keywords>striding-then-grounded grounded PathExpr xs:decimal</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-003"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-003a">
      <description>Basic Test of xsl:stream instruction with deep-equal()</description>
      <keywords>PathExpr striding-then-grounded xs:decimal</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-003a"/>
      </test>
      <result early-exit-possible="true">
         <assert>/out = 'false'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-003b">
      <description>Basic Test of xsl:stream instruction with deep-equal()</description>
      <keywords>PathExpr striding-then-grounded xs:decimal</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-003b"/>
      </test>
      <result>
         <assert>/out = 'false'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-003c">
      <description>Basic Test of xsl:stream instruction with deep-equal()</description>
      <keywords>PathExpr xs:decimal striding-then-grounded</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-003c"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-003d">
      <description>Basic Test of xsl:stream instruction with deep-equal()</description>
      <keywords>PathExpr striding-then-grounded xs:decimal</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-003d"/>
      </test>
      <result early-exit-possible="true">
         <assert>/out = 'false'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-003e">
      <description>Basic Test of xsl:stream instruction with deep-equal()</description>
      <keywords>PathExpr striding-then-grounded xs:decimal</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-003d"/>
      </test>
      <result early-exit-possible="true">
         <assert>/out = 'false'</assert>
      </result>
   </test-case>

   <test-case name="sf-deep-equal-004">
      <description>Test of xsl:stream instruction with deep-equal(), filtered with a motionless predicate</description>
      <keywords>striding-then-grounded xs:decimal PathExpr motionless-predicate</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-004"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>

   <test-case name="sf-deep-equal-005">
      <description>Test of xsl:stream instruction with deep-equal(), filtered with a positional predicate</description>
      <keywords>positional-predicate striding-then-grounded xs:decimal PathExpr</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-005"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>

   <test-case name="sf-deep-equal-006">
      <description>Test of xsl:stream instruction with deep-equal(), filtered with a positional predicate</description>
      <keywords>striding-then-grounded xs:decimal PathExpr positional-predicate</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-006"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>

   <test-case name="sf-deep-equal-007">
      <description>Test of xsl:stream instruction with deep-equal(), grounded element nodes</description>
      <keywords>variable-reference striding-then-grounded fn:copy-of PathExpr</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-007"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-007a">
      <description>Test of xsl:stream instruction with deep-equal(), grounded element nodes</description>
      <keywords>striding-then-grounded variable-reference fn:copy-of PathExpr</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-007a"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-007b">
      <description>Test of xsl:stream instruction with deep-equal(), grounded element nodes</description>
      <keywords>striding-then-grounded variable-reference fn:copy-of PathExpr</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-007b"/>
      </test>
      <result early-exit-possible="true">
         <assert>/out = 'false'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-007c">
      <description>Test of xsl:stream instruction with deep-equal(), grounded element nodes</description>
      <keywords>striding-then-grounded variable-reference fn:copy-of PathExpr</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-007c"/>
      </test>
      <result early-exit-possible="true">
         <assert>/out = 'false'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-007d">
      <description>Test of xsl:stream instruction with deep-equal(), grounded element nodes</description>
      <keywords>striding-then-grounded variable-reference fn:copy-of PathExpr</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-007d"/>
      </test>
      <result early-exit-possible="true">
         <assert>/out = 'false'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-008">
      <description>Test of xsl:stream instruction with deep-equal(), non-grounded element nodes</description>
      <keywords>striding variable-reference PathExpr</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-008"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-008a">
      <description>Test of xsl:stream instruction with deep-equal(), non-grounded element nodes</description>
      <keywords>striding variable-reference PathExpr</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-008a"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-008b">
      <description>Test of xsl:stream instruction with deep-equal(), non-grounded element nodes</description>
      <keywords>variable-reference striding PathExpr _WRONG:fix-initial-template-name</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-007b"/>
      </test>
      <result early-exit-possible="true">
         <assert>/out = 'false'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-008c">
      <description>Test of xsl:stream instruction with deep-equal(), non-grounded element nodes</description>
      <keywords>striding variable-reference PathExpr</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-008c"/>
      </test>
      <result early-exit-possible="true">
         <assert>/out = 'false'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-008d">
      <description>Test of xsl:stream instruction with deep-equal(), non-grounded element nodes</description>
      <keywords>striding variable-reference PathExpr</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-008d"/>
      </test>
      <result early-exit-possible="true">
         <assert>/out = 'false'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-009">
      <description>Test of xsl:stream instruction with deep-equal(), filtered with text() to make the predicates motionless</description>
      <keywords>childless-nodes motionless-predicate text-nodes striding PathExpr</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-009"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-011">
      <description>deep-equal() selecting nothing, returning the $zero case</description>
      <keywords>empty-sequence PathExpr</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-011"/>
      </test>
      <result>
         <assert>/out = 'false'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-012">
      <description>deep-equal() selecting both streamed nodes and literals</description>
      <keywords>striding-then-grounded sequence-comparison fn:number PathExpr</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-012"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-018">
      <description>Test of xsl:stream instruction with deep-equal() over attribute values</description>
      <keywords>fn:doc striding-then-climbing attribute-axis childless-nodes PathExpr</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-018"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>

   <test-case name="sf-deep-equal-040">
      <description>deep-equal() over an empty grounded expression</description>
      <keywords>fn:outermost crawling crawling-then-striding empty-sequence fn:data PathExpr</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-040"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-041">
      <description>deep-equal() over an empty striding expression</description>
      <keywords>striding empty-sequence PathExpr</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-041"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-042">
      <description>deep-equal() over an empty crawling expression</description>
      <keywords>fn:outermost crawling crawling-then-striding empty-sequence PathExpr</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-042"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-043">
      <description>deep-equal() over an empty grounded expression</description>
      <keywords>crawling-then-climbing empty-sequence PathExpr</keywords>
      <created by="Michael Kay" on="2013-12-16"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-043"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-050">
      <description>deep-equal() - collation argument present</description>
      <keywords>fn:outermost crawling-then-striding striding-then-grounded sequence-comparison PathExpr collation-argument</keywords>
      <created by="Michael Kay" on="2014-01-06"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-050"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-051">
      <description>deep-equal() - collation argument present - unknown collation</description>
      <keywords>fn:outermost crawling-then-striding striding-then-grounded sequence-comparison PathExpr FOCH0002 collation-argument</keywords>
      <created by="Michael Kay" on="2014-01-06"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-051"/>
      </test>
      <result>
         <error code="FOCH0002"/>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-052">
      <description>deep-equal() - collation argument present - unknown collation - error is caught</description>
      <keywords>fn:outermost crawling-then-striding striding-then-grounded sequence-comparison xsl:try error-handling specific-catch-clause FOCH0002 PathExpr collation-argument</keywords>
      <created by="Michael Kay" on="2014-01-06"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-052"/>
      </test>
      <result>
         <assert>/out = 'caught'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-053">
      <description>deep-equal() - collation argument consumes streamed document</description>
      <keywords>sequence-comparison collation-argument grounded PathExpr</keywords>
      <created by="Michael Kay" on="2014-01-06"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-053"/>
      </test>
      <result>
         <assert>/out = 'false'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-054">
      <description>deep-equal() - collation argument consumes streamed document, unknown collation</description>
      <keywords>grounded collation-argument striding PathExpr</keywords>
      <created by="Michael Kay" on="2014-01-06"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-054"/>
      </test>
      <result>
         <error code="FOCH0002"/>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-055">
      <description>deep-equal() - collation argument consumes streamed document, unknown collation, error is caught</description>
      <keywords>collation-argument striding xsl:try error-handling specific-catch-clause FOCH0002 PathExpr</keywords>
      <created by="Michael Kay" on="2014-01-06"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-055"/>
      </test>
      <result>
         <assert>/out = 'caught'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-056">
      <description>deep-equal() over crawling nodes included nested values</description>
      <keywords>crawling-atomizing descendant-axis AxisStep PathExpr</keywords>
      <created by="Michael Kay" on="2014-05-23"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-056"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sf-deep-equal-057">
      <description>deep-equal() over crawling nodes included nested values</description>
      <keywords>crawling-atomizing descendant-axis AxisStep PathExpr</keywords>
      <created by="Michael Kay" on="2014-05-23"/>
      <environment ref="sf-deep-equal-A"/>
      <test>
         <initial-template name="s-057"/>
      </test>
      <result early-exit-possible="true">
         <assert>/out = 'false'</assert>
      </result>
   </test-case>   


</test-set>