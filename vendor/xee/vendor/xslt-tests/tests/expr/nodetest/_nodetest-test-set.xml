<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns:xs="http://www.w3.org/2001/XMLSchema"
          xmlns="http://www.w3.org/2012/10/xslt-test-catalog"
          name="nodetest">
   <description>Tests nodetest</description>

   <environment name="nodetest-e01">
      <source role="." file="nodetest-e01.xml" validation="strict"/>
      <schema role="source-reference"
              file="builtinTypeNodeTest.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="nodetest-e02">
      <source role="." file="nodetest-e02.xml" validation="strict"/>
      <schema role="source-reference"
              file="variousTypesNodeTest.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="nodetest-e04">
      <source role="." file="nodetest-e04.xml" validation="strict"/>
      <schema role="source-reference"
              file="variousTypesNodeTest.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="nodetest-e05">
      <source role="." file="nodetest-e05.xml" validation="strict"/>
      <schema role="source-reference"
              file="subgroupTypeNodeTest.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="nodetest-e07">
      <source role="." file="nodetest-e07.xml" validation="strict"/>
      <schema role="source-reference"
              file="subgroupTypeNodeTest.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="nodetest-e08">
      <source role="." file="nodetest-e08.xml" validation="strict"/>
      <schema role="source-reference"
              file="subgroupTypeNodeTest.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="nodetest-e11">
      <source role="." file="nodetest-e11.xml" validation="strict"/>
      <schema role="source-reference"
              file="subgroupTypeNodeTest.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="nodetest-e12">
      <source role="." file="nodetest-e12.xml" validation="strict"/>
      <schema role="source-reference"
              file="subgroupTypeNodeTest.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="nodetest-e24">
      <source role="." file="nodetest-e24.xml" validation="strict"/>
      <schema role="source-reference"
              file="variousTypesNodeTest.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="nodetest-e26">
      <source role="." file="nodetest-e26.xml" validation="strict"/>
      <schema role="source-reference"
              file="variousTypesNodeTest.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="nodetest-e27">
      <source role="." file="nodetest-e27.xml" validation="strict"/>
      <schema role="source-reference"
              file="attributesNodeTest.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="nodetest-e30">
      <source role="." file="nodetest-e30.xml" validation="strict"/>
      <schema role="source-reference"
              file="attributesNodeTest.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="nodetest-e31">
      <source role="." file="nodetest-e31.xml" validation="strict"/>
      <schema role="source-reference"
              file="attributesNodeTest.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="nodetest-e41">
      <source role=".">
         <content><![CDATA[<doc/>]]></content>
      </source>
      <schema role="stylesheet-import"
              file="variousTypesNodeTest.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="nodetest-e47">
      <source role="." file="nodetest-e47.xml" validation="strict"/>
      <schema role="source-reference"
              file="subgroupTypeNodeTest.xsd"
              xsd-version="1.0"/>
   </environment>
   

   <test-case name="nodetest-001">
      <description>Test for text() node test. Should say "test"</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role=".">
            <content><![CDATA[<doc>test</doc>]]></content>
         </source>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-001.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>test</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-002">
      <description>Test for comment() node test. Should say "Found comment"</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role=".">
            <content><![CDATA[<doc><!-- This is a comment -->test</doc>]]></content>
         </source>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-002.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>Found-comment<!-- This is a comment --></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-003">
      <description>Test for pi() node test, should say "Found-pi,,Found-pi" </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role=".">
            <content><![CDATA[<?a-pi some data?><doc><!-- This is a comment -->test</doc>]]></content>
         </source>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-003.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>Found-pi:a-pi<?a-pi some data?>Found-pi:a-pi<?a-pi some data?></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-004">
      <description>Test with schema-element($name) where $name is a top level element declaration in a schema with no target namespace.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e01"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-004.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>http://www.example.org/ns/test</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-005">
      <description>Test with schema-attribute($name) where $name is a top level attribute declaration in a schema with no target namespace.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e01"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-005.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>http://www.example.org/ns/test</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-006">
      <description>Test with schema-element($name) where $name has explicit prefix and is a top level element declaration in a schema with target namespace.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e02"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-006.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>http://www.example.org/ns/test</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-007">
      <description>Test with schema-element($name) where $name is expanded using the @xpath-default- namespace and is a top level element declaration in a schema with target namespace.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e02"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-007.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>http://www.example.org/ns/test</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-008">
      <description>
         Test with schema-element($name) where $name is a top level element declaration. 
         The type of the candidate node and the type in the element declaration in the schema match. 
         Types tested are: -simple built-in, simple derived, list derived, union, complex with element only content, 
         complex with mixed content, complex with simple content, complex with empty content
      </description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e04"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-008.xsl"/>
      </test>
      <result>
         <assert-xml file="nodetest-008.out"/>
      </result>
   </test-case>

   <test-case name="nodetest-009">
      <description>Show that stylesheet attribute @input-type-annotation="strip" makes the schema-element test fail.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e04"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-009.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><E1/><E2/><E3/><E4/><E5/><E6/><E7/><E8/></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-010">
      <description>Use schema-element($name) with xsl:copy-of.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e04"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-010.xsl"/>
      </test>
      <result>
         <assert-xml file="nodetest-010.out"/>
      </result>
   </test-case>

   <test-case name="nodetest-011">
      <description>Use xsl:copy inside an xsl:for-each that selects schema-element($arg).</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e04"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-011.xsl"/>
      </test>
      <result>
         <assert-xml file="nodetest-011.out"/>
      </result>
   </test-case>

   <test-case name="nodetest-012">
      <description>Use xsl:copy inside an xsl:for-each that selects schema-element($arg).</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e04"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-012.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>Mr Peter has brown hair</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-013">
      <description>Test schema-element($name) as the first step in path expression.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e04"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-013.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><E1>44</E1><E2>Notorios</E2><E3>name</E3></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-014">
      <description>Test schema-element($name) as the last step in a path expression.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e04"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-014.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>100</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-015">
      <description>Test schema-element($name) in the middle of a path expression.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e04"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-015.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><E1>44</E1><E2>Notorios</E2><E3>name</E3></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-016">
      <description>Test schema-element($name) with an axis.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e04"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-016.xsl"/>
      </test>
      <result>
         <assert-xml file="nodetest-016.out"/>
      </result>
   </test-case>

   <test-case name="nodetest-017">
      <description>
         Test with schema-element($name) where $name is a top level element declaration. 
         The type of the candidate node is derived directly from the type of the declaration in the schema.
         The candidate node is validated against a local element declaration with the same expanded-QName 
         as the top-level element declaration.
      </description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e05"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-017.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><E1>http://test1.org</E1><E2/></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-018">
      <description>Test that the nilled property of a candidate node is 'false' if it passes the schema-element($name) test, where $name is the name of a top level element declaration which is not nillable.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e05"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-018.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>http://test1.orgfalse</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-019">
      <description>Test with schema-element($name) where $name is a top level element declaration with a substitution group. The name of the candidate node matches the name of an element in the substitution group headed by $name. The types of the top-level element declaration and the element in the substritution group are the same.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e07"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-019.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>19.99</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-020">
      <description>Test with schema-element($name) where $name is a top level element declaration with a substitution group. The name of the candidate node matches the name of an element in the substitution group headed by $name. The type of the candidate node(and the node in the substitution group) is derived directly from the type of the declaration in the schema.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e08"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-020.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>12</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-021">
      <description>Show that if the name of a node in the source file complies to the schema-element($name) test but its type (different than xs:untyped) does not, the test will fail. The candidate node is validated against a local element declaration with the same expanded-QName as the top-level element declaration.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e11"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-021.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truefalse</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-022">
      <description>Show that schema-element($name) test will fail if no element is found in the source file with name matching $name or any of the element names in its substitution group.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e12"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-022.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-023">
      <description>Test with schema-attribute($name) where $name has explicit prefix and is a top level attribute declaration in a schema with target namespace.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e24"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-023.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>123-AB</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-024">
      <description>Test with schema-attribute($name) where $name is a top level attribute declaration. The type of the candidate node and the declaration in the schema match. Types tested are: -simple built-in, simple derived, list built-in, list derived, union</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e26"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-024.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><E1>five</E1><E2>red blue green</E2><E3>20</E3><E4>123-AB</E4><E5>000-SS 000-RR</E5></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-025">
      <description>Show that stylesheet attribute @input-type-annotation="strip" makes the schema-attribute test fail.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e26"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-025.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><E1/><E2/><E3/><E4/><E5/></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-026">
      <description>Use schema-attribute($name) with xsl:copy-of.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e26"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-026.xsl"/>
      </test>
      <result>
         <assert-xml file="nodetest-026.out"/>
      </result>
   </test-case>

   <test-case name="nodetest-027">
      <description>Use xsl:copy inside an xsl:for-each that selects schema-attribute($arg).</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e26"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-027.xsl"/>
      </test>
      <result>
         <assert-xml file="nodetest-027.out"/>
      </result>
   </test-case>

   <test-case name="nodetest-028">
      <description>Use xsl:apply-templates with schema-attribute($arg) test.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e26"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-028.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>123-AB</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-029">
      <description>Test schema-attribute($name) as the first step in path expression.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e26"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-029.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>my:specialPart</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-030">
      <description>Test schema-attribute($name) as the first step in path expressionTest schema-attribute($name) as the last step in a path expression.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e26"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-030.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>five</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-031">
      <description>Test schema-attribute($name) in the middle of a path expression.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e26"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-031.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>my:count</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-032">
      <description>Test schema-attribute($name) with an axis. Axes tested</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e26"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-032.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><E1/><E2/><E3>000-SS 000-RR</E3><E4/><E5/></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-033">
      <description>Test with schema-attribute($name) where $name is a top level attribute declaration. The type of the candidate node is derived directly from the type of the declaration in the schema. The candidate node is validated against a local attribute declaration with the same expanded-QName as the top-level attribute declation.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e27"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-033.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>american</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-034">
      <description>Show that if the name of a node in the source file complies to the schema-attribute($name) test but its type (different than xs:untypedAtomic) does not, the test will fail. The candidate node is validated against a local attribute declaration with the same expanded-QName as the top-level element declaration.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e30"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-034.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-035">
      <description>Show that schema-attribute($name) test will fail if no attribute is found in the source file with name matching $name.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e31"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-035.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-036">
      <description>Test schema-element($name) with a typed element created inside a variable.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e41"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-036.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><E1>10</E1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-037">
      <description>Test schema-attribute($name) with a typed attribute created inside a variable.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e41"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-037.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><E1>123-AB</E1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nodetest-038">
      <description>Test with schema-element($name) where $name is a top level element declaration of a complex type and the type of candidate nodes is set by xsi:type.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="nodetest-e47"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="nodetest-038.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>12 30</out>]]></assert-xml>
      </result>
   </test-case>
</test-set>
