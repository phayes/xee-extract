<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns:xs="http://www.w3.org/2001/XMLSchema"
   xmlns="http://www.w3.org/2012/10/xslt-test-catalog" name="xml-version">

   <description> Tests support for XML 1.1. Note that the test catalog itself is an XML 1.0
      document. </description>

   <environment name="xml-version-01">
      <source role=".">
         <content><![CDATA[<doc>
<a>This is &#x85; gonna be more fun!</a>
</doc>]]></content>
      </source>
   </environment>

   <environment name="xml-version-02">
      <source role=".">
         <content><![CDATA[<doc/>]]></content>
      </source>
      <source file="IRI_import.xsl" uri="IRI_import.xsl"/>
      <source file="IRI_include.xsl" uri="IRI_include.xsl"/>
   </environment>

   <environment name="xml-version-03">
      <source role="." file="xml-version-03.xml"/>
   </environment>

   <environment name="xml-version-04">
      <source role=".">
         <content><![CDATA[<Countries>
<Country>  Canada</Country>
<Country>   USA</Country>
<Country>UK  </Country>
<Country>  </Country>
<Country> &#x2028; </Country>
</Countries>]]></content>
      </source>
   </environment>

   <environment name="xml-version-05">
      <source role=".">
         <content><![CDATA[<doc>
	<a>&#x80;</a>;
	<a>&#x81;</a>;
	<a>&#x82;</a>;
	<a>&#x83;</a>;
	<a>&#x84;</a>;
	<name>http://example.org/pre&#x8C;</name>
</doc>]]></content>
      </source>
   </environment>

   <environment name="xml-version-06">
      <source role="." xml-version="1.1">
         <content><![CDATA[<?xml version="1.1"?><doc><rĳk RĲk="RIJK"><bell>&#7;</bell><nbh>&#131;</nbh><nel>&#133;</nel><plain>vanilla</plain></rĳk></doc>]]></content>
      </source>
   </environment>

   <dependencies>
      <feature value="XML_1.1"/>
   </dependencies>

   <test-case name="xml-version-001">
      <description>Simple test case that uses the NEL (#x85) character in an stylesheet. Use
         version="1.1" on the xml declaration of the stylesheet, on the input document and on the
         xsl:output instruction.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="xml-version-01"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-001.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
		&#133;
		<a1>This is &#133; gonna be fun!</a1>
		&#133;
		<a2>This is &#133; gonna be more fun!</a2>
		&#133;
	</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-002">
      <description> Test case that uses character references #x1 through #x1F in the text nodes
         inside an LRE in the stylesheet. These characteres were not allowed in the xml 1.0. No
         error should be raised when the xml declaration has version=1.1 and the characters should
         be serialized to the output document. </description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-002.xsl"/>
      </test>
      <result>
         <assert-xml xml-version="1.1"><![CDATA[<out>&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8;	
&#11;&#12;&#13;&#14;&#15;&#16;&#17;&#18;&#19;&#20;&#21;&#22;&#23;&#24;&#25;&#26;&#27;&#28;&#29;&#30;&#31;</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-003">
      <description> To output a document with method 'xml' and version '1.1'. The name attribute of
         an xsl:element is a an AVT that has a character reference.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-003.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><preØ xmlns="http://example.org/pre&#xC0;"/></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-004">
      <description>Test case to verify that NEL (0x85) can appear in a text node.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-004.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>Test character: &#x85;</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-005">
      <description>Test case to verify that LSEP (0x2028) can appear in a text node.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-005.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>Test character: &#x2028;</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-006">
      <description> Testcase that uses LSEP(0x2028) character as actual value in the stylesheet
         document. The character should create a line feed in the output document.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-006.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out xml:space="preserve">
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-007">
      <description> To output a document with method 'xml' and version '1.1'. To ensure that in an
         attribute node for an LRE, Control Characters in C0 range are output as Numeric Character
         Reference (NCR). </description>
      <created by="Michael Kay" on="2012-10-30"/>
      <modified by="John Lumley" on="2014-09-02" change="Declared serialization requirement"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-007.xsl"/>
         <output serialize="yes"/>
      </test>
      <result>
         <serialization-matches><![CDATA[status=["']&#(8|x8);&#(31|x1f|x1F);["']]]></serialization-matches>
      </result>
   </test-case>

   <test-case name="xml-version-008">
      <description> To output a document with method 'xml' and version '1.1'. To ensure that in an
         attribute node for an xsl:element, Control Characters in C0 range are output as Numeric
         Character Reference (NCR).</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <modified by="John Lumley" on="2014-09-02" change="Declared serialization requirement"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-008.xsl"/>
         <output serialize="yes"/>
      </test>
      <result>
         <serialization-matches><![CDATA[status=["']&#(8|x8);&#(31|x1f|x1F);["']]]></serialization-matches>
      </result>
   </test-case>

   <test-case name="xml-version-009">
      <description> To output a document with method 'xml' and version '1.1'. To ensure that in an
         attribute node for an xsl:element, Control Characters in C1 range are output as Numeric
         Character Reference (NCR).</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <modified by="John Lumley" on="2014-09-02" change="Declared serialization requirement"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-009.xsl"/>
         <output serialize="yes"/>
      </test>
      <result>
         <serialization-matches><![CDATA[status=["']&#(130|x82);&#(143|x8f|x8F);["']]]></serialization-matches>
      </result>
   </test-case>

   <test-case name="xml-version-010">
      <description> To output a document with method 'xml' and version '1.1'. To ensure that in an
         attribute node for an LRE, Control Characters in C1 range are output as Numeric Character
         Reference (NCR).</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <modified by="John Lumley" on="2014-09-02" change="Declared serialization requirement"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-010.xsl"/>
         <output serialize="yes"/>
      </test>
      <result>
         <serialization-matches><![CDATA[status=["']&#(130|x82);&#(143|x8f|x8F);["']]]></serialization-matches>
      </result>
   </test-case>

   <test-case name="xml-version-011">
      <description>Tests #x13F character in the name of an xsl:element when the XML version of the
         stylesheet is 1.1.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-011.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><testğ/></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-012">
      <description> Tests a character that was not permitted in XML 1.0 (#x140 character) in the
         QNames for LRE when the XML version of the stylesheet is 1.1. </description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet xml-version="1.1" file="xml-version-012.xsl"/>
      </test>
      <result>
         <all-of>
            <assert>/out/*[starts-with(namespace-uri(), 'http://www.example.com/pr')]</assert>
            <assert>deep-equal(string-to-codepoints(local-name(/out/*)), (116, 101, 115, 116, 838))</assert>
            <assert>string-to-codepoints(namespace-uri(/out/*))[last()] = 838</assert>
         </all-of>
      </result>
   </test-case>

   <test-case name="xml-version-013">
      <description>Test case that uses IRI on the name of the element, as well as its
         namespace.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-013.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><pre:outÃ xmlns:pre="http://example.org/pre&#xC0;"/></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-014">
      <description> Tests character references with xsl:import and tunnel parameters. Test case uses
         version="1.0" on the main stylesheet and version="1.1 in the xml declaration of the
         imported stylesheet.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-014.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
		The best is: rosé</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-015">
      <description>Tests character references with xsl:include and tunnel parameters. Test case uses
         version="1.0" on the main stylesheet and version="1.1 in the xml declaration of the
         included stylesheet.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-015.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
		The best is: rosé</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-016">
      <description>Tests constructing an xs:qname where the string literal is an XML 1.1
         NCNAME.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-016.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out xmlns:xs="http://www.w3.org/2001/XMLSchema">pre:Ĭ</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-017">
      <description> Tests undeclare-prefixes="no" on xsl:output element where the method is 'xml'
         and version is '1.1', the namespace is an IRI. </description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-017.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><a xmlns:pref="http://example.org/pre&#xC0;"><b/></a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-018">
      <description> To output a document with method 'xml' and version '1.1'. To ensure that in an
         attribute node for an xsl:element, Control Characters in C1 range are output as Numeric
         Character Reference (NCR).</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <modified by="John Lumley" on="2014-09-02" change="Declared serialization requirement"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-018.xsl"/>
         <output serialize="yes"/>
      </test>
      <result>
         <serialization-matches><![CDATA[status=["']&#(130|x82);&#(143|x8f|x8F);["']]]></serialization-matches>
      </result>
   </test-case>

   <test-case name="xml-version-019">
      <description>To output a document with method 'xml' and version '1.1'. When NEL (0x0085) and
         LSEP (0x2028) appear as Numeric Character Reference (NCR), they must be output as NCR in an
         attribute node of an xsl:element instruction.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-019.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><a name="&#133;&#8232;"/></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-020">
      <description>Tests the use of character references to the control characters #x1 through #x1F
         in the input document, no error should be raised if the xml declaration of the input
         document has verion=1.1 and the characters are not copied to the output
         document.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="xml-version-03"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-020.xsl"/>
      </test>
      <result>
         <assert-xml xml-version="1.1"><![CDATA[<out>&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8;	
&#11;&#12;&#13;&#14;&#15;&#16;&#17;&#18;&#19;&#20;&#21;&#22;&#23;&#24;&#25;&#26;&#27;&#28;&#29;&#30;&#31;</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-021">
      <description>Test case that uses the LSEP(0x2028) character in xsl:strip-space instruction.The
         character reference should appear in the output document.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="xml-version-04"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-021.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<Countries>
<Country>  Canada</Country>
<Country>   USA</Country>
<Country>UK  </Country>
<Country/>
<Country> &#x2028; </Country>
</Countries>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-022">
      <description>To output a document with method 'xml' and version '1.1'. The name and namespace
         attributes of an xsl:attribute are evaluated using AVT that have a character reference (Ø)
         for the name and a character reference (&#x8c;) for the namespace, the value of the
         separator attribute is also a character reference.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="xml-version-05"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-022.xsl"/>
      </test>
      <result>
         <assert-xml file="xml-version-022.out"/>
      </result>
   </test-case>

   <test-case name="xml-version-023">
      <description>Generate XML 1.1 output</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-023.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml xml-version="1.1"
            ><![CDATA[<doc><rĳk RĲk="RIJK"><bell>&#7;</bell><nbh>&#131;</nbh><nel>&#133;</nel><plain>vanilla</plain></rĳk></doc>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-024">
      <description>Path expression containing XML 1.1 name characters</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="xml-version-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-024.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<doc>1</doc>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-025">
      <description>Function and variable names containing XML 1.1 name characters</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="xml-version-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-025.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<doc xmlns:x="http://rijk.com/">7</doc>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-026">
      <description>See if a namespace undeclaration in a stylesheet works.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <modified by="Michael Kay" on="2014-06-04" change="See bug 20340"/>
      <modified by="John Lumley" on="2014-09-02" change="Declared serialization requirement"/>
      <environment ref="xml-version-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-026.xsl"/>
         <output serialize="yes"/>
      </test>
      <result>
         <all-of>
            <serialization-matches>version=['"]1.1['"]</serialization-matches>
            <serialization-matches>xmlns:a=(""|'')</serialization-matches>
         </all-of>
      </result>
   </test-case>

   <test-case name="xml-version-027">
      <description>Representation of namespace undeclaration with undeclare="no"</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <modified by="John Lumley" on="2014-09-02" change="Declared serialization requirement"/>
      <environment ref="xml-version-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-027.xsl"/>
         <output serialize="yes"/>
      </test>
      <result>
         <serialization-matches><![CDATA[<chap><para/><para/></chap>]]></serialization-matches>
      </result>
   </test-case>

   <test-case name="xml-version-028">
      <description>Representation of namespace undeclaration with version="1.0"</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <modified by="John Lumley" on="2014-09-02" change="Declared serialization requirement"/>
      <environment ref="xml-version-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-028.xsl"/>
         <output serialize="yes"/>
      </test>
      <result>
         <serialization-matches><![CDATA[<chap><para/><para/></chap>]]></serialization-matches>
      </result>
   </test-case>

   <test-case name="xml-version-029">
      <description>Error: serialize document containing XML 1.1 name characters as v
         1.0</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <modified by="John Lumley" on="2014-09-02" change="Declared serialization requirement"/>
      <modified by="Michael Kay" on="2018-09-25" change="The 'IJ' character is allowed in recent editions of XML 1.0, so SERE0005 no longer arises. 
         Instead, SERE0006 is reported in respect of the BEL character appearing in a text node"/>
      <environment ref="xml-version-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-029.xsl"/>
         <output serialize="yes"/>
      </test>
      <result>
         <any-of>
            <assert-serialization-error code="SERE0005"/>
            <assert-serialization-error code="SERE0006"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="xml-version-030">
      <description>Error: serialize document containing XML 1.1 control characters as v
         1.0</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <modified by="John Lumley" on="2014-09-04" change="Declared serialization requirement"/>
      <environment ref="xml-version-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-030.xsl"/>
         <output serialize="yes"/>
      </test>
      <result>
         <assert-serialization-error code="SERE0006"/>
      </result>
   </test-case>

   <test-case name="xml-version-031">
      <description>See if a namespace undeclaration (using undeclare-prefixes="true") in a
         stylesheet works.</description>
      <created by="Debbie Lockett" on="2014-08-07"/>
      <modified by="John Lumley" on="2014-09-02" change="Declared serialization requirement"/>
      <environment ref="xml-version-06"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-031.xsl"/>
         <output serialize="yes"/>
      </test>
      <result>
         <all-of>
            <serialization-matches>version=['"]1.1['"]</serialization-matches>
            <serialization-matches>xmlns:a=(""|'')</serialization-matches>
         </all-of>
      </result>
   </test-case>

   <test-case name="xml-version-032">
      <description>See if a namespace undeclaration (using undeclare-prefixes=" 1 ") in a stylesheet
         works.</description>
      <created by="Debbie Lockett" on="2014-08-07"/>
      <modified by="John Lumley" on="2014-09-02" change="Declared serialization requirement"/>
      <environment ref="xml-version-06"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-032.xsl"/>
         <output serialize="yes"/>
      </test>
      <result>
         <all-of>
            <serialization-matches>version=['"]1.1['"]</serialization-matches>
            <serialization-matches>xmlns:a=(""|'')</serialization-matches>
         </all-of>
      </result>
   </test-case>

   <test-case name="xml-version-033">
      <description> Tests undeclare-prefixes="false" on xsl:output element where the method is 'xml'
         and version is '1.1', the namespace is an IRI. </description>
      <created by="Debbie Lockett" on="2014-08-07"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-033.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><a xmlns:pref="http://example.org/pre&#xC0;"><b/></a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-034">
      <description> Tests undeclare-prefixes="0" on xsl:output element where the method is 'xml' and
         version is '1.1', the namespace is an IRI. </description>
      <created by="Debbie Lockett" on="2014-08-07"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-034.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><a xmlns:pref="http://example.org/pre&#xC0;"><b/></a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-035">
      <description>See if a namespace undeclaration (using undeclare-prefixes="yes" on
         xsl:result-document) in a stylesheet works.</description>
      <created by="Debbie Lockett" on="2014-08-11"/>
      <modified by="John Lumley" on="2014-09-02" change="Declared serialization requirement"/>
      <modified by="Michael Kay" on="2017-04-29" change="Corrected version='1.1' to output-version='1.1'"/>
      <environment ref="xml-version-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-035.xsl"/>
         <output serialize="yes"/>
      </test>
      <result>
         <all-of>
            <serialization-matches>version=['"]1.1['"]</serialization-matches>
            <serialization-matches>xmlns:a=(""|'')</serialization-matches>
         </all-of>
      </result>
   </test-case>

   <test-case name="xml-version-036">
      <description> Tests undeclare-prefixes=" no " on xsl:result-document element where the method
         is 'xml' and version is '1.1', the namespace is an IRI. </description>
      <created by="Debbie Lockett" on="2014-08-11"/>
      <modified by="Michael Kay" on="2017-04-29" change="Corrected version='1.1' to output-version='1.1'"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-036.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><a xmlns:pref="http://example.org/pre&#xC0;"><b/></a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-037">
      <description>See if a namespace undeclaration (using undeclare-prefixes="true" on
         xsl:result-document) in a stylesheet works.</description>
      <created by="Debbie Lockett" on="2014-08-11"/>
      <modified by="John Lumley" on="2014-09-02" change="Declared serialization requirement"/>
      <modified by="Michael Kay" on="2017-04-29" change="Corrected version='1.1' to output-version='1.1'"/>
      <environment ref="xml-version-06"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-037.xsl"/>
         <output serialize="yes"/>
      </test>
      <result>
         <all-of>
            <serialization-matches>version=['"]1.1['"]</serialization-matches>
            <serialization-matches>xmlns:a=(""|'')</serialization-matches>
         </all-of>
      </result>
   </test-case>

   <test-case name="xml-version-038">
      <description> Tests undeclare-prefixes="false" on xsl:result-document element where the method
         is 'xml' and version is '1.1', the namespace is an IRI. </description>
      <created by="Debbie Lockett" on="2014-08-11"/>
      <modified by="Michael Kay" on="2017-04-29" change="Corrected version='1.1' to output-version='1.1'"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-038.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><a xmlns:pref="http://example.org/pre&#xC0;"><b/></a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-039">
      <description>See if a namespace undeclaration (using undeclare-prefixes="1" on
         xsl:result-document) in a stylesheet works.</description>
      <created by="Debbie Lockett" on="2014-08-11"/>
      <modified by="John Lumley" on="2014-09-02" change="Declared serialization requirement"/>
      <modified by="Michael Kay" on="2017-04-29" change="Corrected version='1.1' to output-version='1.1'"/>
      <environment ref="xml-version-06"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-039.xsl"/>
         <output serialize="yes"/>
      </test>
      <result>
         <all-of>
            <serialization-matches>version=['"]1.1['"]</serialization-matches>
            <serialization-matches>xmlns:a=(""|'')</serialization-matches>
         </all-of>
      </result>
   </test-case>

   <test-case name="xml-version-040">
      <description> Tests undeclare-prefixes="0" on xsl:result-document element where the method is
         'xml' and version is '1.1', the namespace is an IRI. </description>
      <created by="Debbie Lockett" on="2014-08-11"/>
      <modified by="Michael Kay" on="2017-04-29" change="Corrected version='1.1' to output-version='1.1'"/>
      <environment ref="xml-version-02"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-040.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><a xmlns:pref="http://example.org/pre&#xC0;"><b/></a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="xml-version-041">
      <description>See if a namespace undeclaration (using undeclare-prefixes="T" on
         xsl:result-document) in a stylesheet works (not allowed).</description>
      <created by="Debbie Lockett" on="2014-08-11"/>
      <modified by="Michael Kay" on="2017-04-29" change="Corrected version='1.1' to output-version='1.1'"/>
      <environment ref="xml-version-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-041.xsl"/>
      </test>
      <result>
         <any-of>
            <assert-serialization-error code="SEPM0016"/>
            <error code="XTSE0020"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="xml-version-042">
      <description>Test AVT in @undeclare-prefixes of xsl:result-document, which evaluates to " yes
         ".</description>
      <created by="Debbie Lockett" on="2014-08-11"/>
      <modified by="John Lumley" on="2014-09-02" change="Declared serialization requirement"/>
      <modified by="Michael Kay" on="2017-04-29" change="Corrected version='1.1' to output-version='1.1'"/>
      <environment ref="xml-version-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="xml-version-042.xsl"/>
         <output serialize="yes"/>
      </test>
      <result>
         <all-of>
            <serialization-matches>version=['"]1.1['"]</serialization-matches>
            <serialization-matches>xmlns:a=(""|'')</serialization-matches>
         </all-of>
      </result>
   </test-case>
</test-set>
