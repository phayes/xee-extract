<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns:xs="http://www.w3.org/2001/XMLSchema"
          xmlns="http://www.w3.org/2012/10/xslt-test-catalog"
          name="number">
   
   <description>Tests the xsl:number instruction</description>
   
   <environment name="number-01">
      <source role="." file="number-01.xml"/>
   </environment>
     
   <environment name="number-04">
      <source role="." file="number-04.xml"/>
   </environment>
   
   <environment name="number-06">
      <source role=".">
         <content><![CDATA[<doc/>]]></content>
      </source>
   </environment>
   
   <environment name="number-09">
      <source role="." file="number-09.xml"/>
   </environment>
   
   <environment name="number-11">
      <source role="." file="number-11.xml"/>
   </environment>
    
   <environment name="number-15">
      <source role="." file="number-15.xml"/>
   </environment>
   
   <environment name="number-17">
      <source role=".">
         <content><![CDATA[<doc><a><a/></a><a><b/></a><a><a/></a><a><b/><b/></a></doc>]]></content>
      </source>
   </environment>
   
   <environment name="number-20">
      <source role="." file="number-20.xml"/>
   </environment>  
   
   <environment name="number-24">
      <source role="." file="number-24.xml"/>
   </environment>
   
   <environment name="number-25">
      <source role="." file="number-25.xml"/>
   </environment>
   
   <environment name="number-26">
      <source role="." file="number-26.xml"/>
   </environment>
   
   <environment name="number-28">
      <source role="." file="number-28.xml"/>
   </environment>
   
   <environment name="number-29">
      <source role="." file="number-29.xml"/>
   </environment>
   
   <environment name="number-30">
      <source role="." file="number-30.xml"/>
   </environment>
   
   <environment name="number-32">
      <source role="." file="number-32.xml"/>
   </environment>
   
   <environment name="number-34">
      <source role="." file="number-34.xml"/>
   </environment>
   
   <environment name="number-37">
      <source role="." file="number-37.xml"/>
   </environment>
   
   <environment name="number-38">
      <source role="." file="number-38.xml"/>
   </environment>
    
   <environment name="number-42">
      <source role="." file="number-42.xml"/>
   </environment>
   
   <environment name="number-44">
      <source role=".">
         <!-- whitespace here is intentional -->
         <content><![CDATA[<doc>
            <chapter><note>aaa</note></chapter>
            <chapter><note>zzz</note></chapter>
         </doc>]]></content>
      </source>
   </environment>   

   <test-case name="number-0101">
      <description>xsl:number value="position()" format="1.1 "</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-01"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0101.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><a name="Andy">1</a><a name="Thomas">2</a><a name="Peter">3</a><a name="Paul">4</a><a name="Matthew">5</a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0102">
      <description>Use start-at attribute new in 3.0</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-01"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0102.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><a name="Andy">0</a><a name="Thomas">1</a><a name="Peter">2</a><a name="Paul">3</a><a name="Matthew">4</a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0103">
      <description>Use start-at attribute new in 3.0</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-01"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0103.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><a name="Andy">m</a><a name="Thomas">mi</a><a name="Peter">mii</a><a name="Paul">miii</a><a name="Matthew">miv</a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0104">
      <description>Use start-at attribute new in 3.0 - level=multiple</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-01"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0104.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><a name="Andy">c.c.d.c</a><a name="Thomas">c.c.d.d</a><a name="Peter">c.c.d.e</a><a name="Paul">c.c.d.f</a><a name="Matthew">c.c.d.g</a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0105">
      <description>Use start-at attribute new in 3.0 - negative start</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-01"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0105.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><a name="Andy">Zero</a><a name="Thomas">Seven</a><a name="Peter">Fourteen</a><a name="Paul">Twenty One</a><a name="Matthew">Twenty Eight</a></out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="number-0106">
      <description>Use start-at attribute - level=multiple with different start-at values</description>
      <created by="Michael Kay" on="2014-10-24"/>
      <environment ref="number-01"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0106.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><a name="Andy">c.b.b.a</a><a name="Thomas">c.b.b.b</a><a name="Peter">c.b.b.c</a><a name="Paul">c.b.b.d</a><a name="Matthew">c.b.b.e</a></out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="number-0107">
      <description>Use start-at attribute -value attribute, sequence of numbers, sequence of start-at values</description>
      <created by="Michael Kay" on="2014-10-24"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0107.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert>/out = "0.4.6.10.13.16.20.25.29.41.52"</assert>
      </result>
   </test-case>

   <test-case name="number-0108">
      <description>Use start-at attribute -value attribute, sequence of numbers, sequence of start-at values, with minus signs</description>
      <created by="Michael Kay" on="2014-10-24"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0108.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert>/out = "0.4.2.10.5.16.8.25.13.41.52"</assert>
      </result>
   </test-case>
   
   <test-case name="number-0109">
      <description>Invalid start-at attribute</description>
      <created by="Michael Kay" on="2014-10-24"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0109.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <error code="XTSE0020"/>
      </result>
   </test-case>
   
   <test-case name="number-0110">
      <description>test xsl:number with count="." (XSLT 3.0)</description>
      <created by="Michael Kay" on="2017-05-17"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0110.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><n>1.1.1</n><n>1.1.2</n><n>1.1.3</n></out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="number-0111">
      <description>Test xsl:number with large integers (XSLT 3.0)</description>
      <created by="Michael Kay" on="2018-05-17"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0111.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>[1:881676371:789154860:897069003(1:881676371:789154860:897069003)(١:٨٨١٦٧٦٣٧١:٧٨٩١٥٤٨٦٠:٨٩٧٠٦٩٠٠٣)]</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0201">
      <description></description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role=".">
            <content><![CDATA[<doc><ol><item>aaa</item><item>bbb</item><item>ccc</item><item>ddd</item></ol></doc>]]></content>
         </source>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0201.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out xmlns:fo="http://www.w3.org/XSL/Format/1.0"><fo:block>1. aaa</fo:block><fo:block>2. bbb</fo:block><fo:block>3. ccc</fo:block><fo:block>4. ddd</fo:block></out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="number-0202">
      <description>The count pattern on xsl:number has two predicates (Saxon bug)</description>
      <created by="Michael Kay" on="2014-02-24"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0202.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert>/out = 1</assert>
      </result>
   </test-case>

   <test-case name="number-0301">
      <description></description>
      <created by="Michael Kay" on="2012-11-07"/>
      <modified by="Tim Mills" on="2012-12-20" change="Removed duplicate xml declaration and whitespace from expected result"/>
      <environment>
         <source role="." file="number-03.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0301.xsl"/>
      </test>
      <result>
         <assert-xml file="number-0301.out"/>
      </result>
   </test-case>

   <test-case name="number-0401">
      <description>Example from draft</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-04"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0401.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out xmlns:fo="http://www.w3.org/XSL/Format/1.0"><fo:block>(1) aaa</fo:block><fo:block>(2) bbb</fo:block><fo:block>(3) ccc</fo:block><fo:block>(1) ddd</fo:block><fo:block>(2) eee</fo:block><fo:block>(3) fff</fo:block></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0402">
      <description>test xsl:number level="any" when it cannot be optimized, because "count" is not known statically</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-04"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0402.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out xmlns:fo="http://www.w3.org/XSL/Format/1.0"><fo:block>(1) [1] aaa</fo:block><fo:block>(2) [2] bbb</fo:block><fo:block>(3) [3] ccc</fo:block><fo:block>(1) [4] ddd</fo:block><fo:block>(2) [5] eee</fo:block><fo:block>(3) [6] fff</fo:block></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0403">
      <description>test xsl:number with a pattern containing a variable reference</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-04"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0403.xsl"/>
      </test>
      <result>
         <all-of xmlns:fo="http://www.w3.org/XSL/Format/1.0">
            <assert>/out/fo:block[1] = "(1) [1] {1} aaa"</assert>
            <assert>/out/fo:block[2] = "(2) [2] {2} bbb"</assert>
            <assert>/out/fo:block[3] = "(3) [3] {3} ccc"</assert>
            <assert>/out/fo:block[4] = "(1) [4] {1} ddd"</assert>
            <assert>/out/fo:block[5] = "(2) [5] {2} eee"</assert>
            <assert>/out/fo:block[6] = "(3) [6] {3} fff"</assert>
         </all-of>
      </result>
   </test-case>

   <test-case name="number-0404">
      <description>test xsl:number with value= a sequence</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-04"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0404.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>10,11,12,13,14,15,16,17,18,19,20</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0405">
      <description>Test based on example in spec: Test of level (any) and from attributes. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-04"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0405.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
  
    (1) aaa
    (2) bbb
    (3) ccc
  
  
    (1) ddd
    (2) eee
    (3) fff
  
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0406">
      <description>Test based on example in spec: Test level=single specified explicitly </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-04"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0406.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
  
    (1) aaa
    (2) bbb
    (3) ccc
  
  
    (1) ddd
    (2) eee
    (3) fff
  
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0407">
      <description>Simple test of non-alphanumeric separator </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-04"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0407.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
  
    A aaa
    B bbb
    C ccc
  
  
    A ddd
    B eee
    C fff
  
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0501">
      <description>From example in draft</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="number-05.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0501.xsl"/>
      </test>
      <result>
         <assert-xml file="number-0501.out"/>
      </result>
   </test-case>

   <test-case name="number-0601">
      <description>test number formatting</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0601.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>[0100]</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0602">
      <description>PURPOSE test group separation in number formatting</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0602.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>1/00/00/00</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0603">
      <description>test Roman numbering</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0603.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>xiii;
        dcccxix;
        MCMXCIX;
        100000;
    </out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0604">
      <description>test negative number formatting</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0604.xsl"/>
      </test>
      <result>
         <error code="XTDE0980"/>
      </result>
   </test-case>

   <test-case name="number-0701">
      <description>test numeric predicates in match patterns</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="number-07.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0701.xsl"/>
      </test>
      <result>
         <assert-xml file="number-0701.out"/>
      </result>
   </test-case>

   <test-case name="number-0801">
      <description>test alpha numbering</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0801.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>m;
        aem;
        BXW;
        EQXD;
    </out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0802">
      <description>test non-english numbering</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <languages_for_numbering value="de"/>
      </dependencies>
      <test>
         <stylesheet file="number-0802.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>drei;
        dreizehn;
        m;
        aem;
        BXW;
        EQXD;
    </out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0803">
      <description>test run-time formatting</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0803.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>00/00/00/01/00/00/00</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0804">
      <description>test numbering in words</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0804.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><z>OK</z><z>OK</z><z>OK</z><z>OK</z><z>OK</z><z>OK</z><z>OK</z><z>OK</z><z>OK</z><z>OK</z><z>OK</z><z>OK</z><z>OK</z><z>OK</z></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0805">
      <description>test numbering of fractional value argument</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0805.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
        10 = 10;
        3.6 = 04;
        0 = 00;
        0.3 = 00;
        0.7 = 01;
        200 div 3 = 67;
    </out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0806">
      <description>test level="any" when there are no matches</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0806.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>[];
    </out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0807">
      <description>test formatting of a number larger than a 64-bit integer</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <maximum_number_of_decimal_digits value="101"/>
      </dependencies>
      <test>
         <stylesheet file="number-0807.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>[10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0808">
      <description>test ordinal numbering in words</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0808.xsl"/>
      </test>
      <result>
         <assert-xml file="number-0808.out"/>
      </result>
   </test-case>

   <test-case name="number-0809">
      <description>test ordinal numbering e.g. 1st, 2nd, 3rd</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0809.xsl"/>
      </test>
      <result>
         <assert-xml file="number-0809.out"/>
      </result>
   </test-case>

   <test-case name="number-0810">
      <description/>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0810.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<doc>*1*</doc>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0811">
      <description/>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0811.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<doc>1</doc>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0812">
      <description>test numbering in German words</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <modified by="Michael Kay" on="2014-06-02" change="allow more flexibility in the result"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <languages_for_numbering value="de"/>
      </dependencies>
      <test>
         <stylesheet file="number-0812.xsl"/>
      </test>
      <result>
         <all-of>
            <assert>//n3 = "drei"</assert>
            <assert>//n10 = "zehn"</assert>
            <assert>//n13 = "dreizehn"</assert>
            <assert>//n20 = "zwanzig"</assert>
            <assert>matches(//n100, "EIN( |&#173;)?HUNDERT")</assert>
            <assert>matches(//n115, "EIN( |&#173;)?HUNDERT( |&#173;)?(UND)?( |&#173;)?FÜNFZEHN")</assert>
            <assert>matches(//n134, "EIN( |&#173;)?HUNDERT( |&#173;)?VIER( |&#173;)?UND( |&#173;)?DREISSIG")</assert>
            <assert>matches(//n200, "zwei( |&#173;)?hundert")</assert>
            <assert>matches(//n201, "zwei( |&#173;)?hundert( |&#173;)?(und)?( |&#173;)?ein(s?)")</assert>
            <!-- zweihunderteins as in "Section 201", zweihundertein as in "201 dalmations" -->
            <assert>matches(//n210, "zwei( |&#173;)?hundert( |&#173;)?(und)?( |&#173;)?zehn")</assert>
            <assert>matches(//n230, "zwei( |&#173;)?hundert( |&#173;)?dreißig")</assert>
            <assert>matches(//n1000, "EIN( |&#173;)?TAUSEND")</assert>
            <assert>matches(//n1005, "EIN( |&#173;)?TAUSEND( |&#173;)?FÜNF")</assert>
            <assert>matches(//n2134816, "Zwei( |&#173;)Millionen( |&#173;)Ein( |&#173;)?(H|h)undert( |&#173;)?(V|v)ier( |&#173;)?und( |&#173;)?(D|d)reißig( |&#173;)?(T|t)ausend( |&#173;)?(A|a)cht( |&#173;)?(H|h)undert( |&#173;)?(und)?( |&#173;)?(S|s)echzehn")</assert>
         </all-of>
      </result>
   </test-case>

   <test-case name="number-0813">
      <description>test ordinal numbering in German words</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <languages_for_numbering value="de"/>
         <ordinal_scheme_name value="inflection"/>
      </dependencies>
      <test>
         <stylesheet file="number-0813.xsl"/>
      </test>
      <result>
         <all-of>
            <assert>//n3 = "dritte"</assert>
            <assert>//n10 = "zehnter"</assert>
            <assert>//n13 = "dreizehntes"</assert>
            <assert>//n20 = "zwanzigsten"</assert>
            <assert>matches(//n100, "EIN( |&#173;)?HUNDERTSTE")</assert>
            <assert>matches(//n115, "EIN( |&#173;)?HUNDERT( |&#173;)?FÜNFZEHNTER")</assert>
            <assert>matches(//n134, "EIN( |&#173;)?HUNDERT( |&#173;)?VIER( |&#173;)?UND( |&#173;)?DREISSIGSTES")</assert>
            <assert>matches(//n200, "zwei( |&#173;)?hundertsten")</assert>
            <assert>matches(//n201, "zwei( |&#173;)?hundert( |&#173;)?erste")</assert>
            <assert>matches(//n210, "zwei( |&#173;)?hundert( |&#173;)?zehnter")</assert>
            <assert>matches(//n230, "zwei( |&#173;)?hundert( |&#173;)?dreißigstes")</assert>
            <assert>matches(//n1000, "EIN( |&#173;)?TAUSENDSTE")</assert>
            <assert>matches(//n1005, "EIN( |&#173;)?TAUSEND( |&#173;)?FÜNFTE")</assert>
            <assert>matches(//n2134816, "Zwei( |&#173;)Millionen( |&#173;)Ein( |&#173;)?(H|h)undert( |&#173;)?(V|v)ier( |&#173;)?und( |&#173;)?(D|d)reißig( |&#173;)?(T|t)ausend( |&#173;)?(A|a)cht( |&#173;)?(H|h)undert( |&#173;)?(S|s)echzehnter")</assert>
         </all-of>
      </result>
   </test-case>

   <test-case name="number-0814">
      <description>xsl:number applied to empty sequence, with and without backwards compatibility</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="backwards_compatibility"/>
      </dependencies>
      <test>
         <stylesheet file="number-0814.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><v2/><v1>NaN</v1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0815">
      <description>xsl:number applied to non-number, with backwards compatibility</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <feature value="backwards_compatibility"/>
      </dependencies>
      <test>
         <stylesheet file="number-0815.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><v1>NaN</v1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0816">
      <description>
         The first and last non-alpha tokens are *not* separator tokens, and shouldn't be used when 
         there are fewer tokens than numbers to be formatted
      </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0816.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<a>(5.6.7.8)</a>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0817">
      <description>The first non-alpha token is a separator tokens if it appears between two formatting tokens</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0817.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<a>5;6;7;8)</a>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0818">
      <description>test xsl:number level="any" with a count pattern that matches the root of a non-document tree</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0818.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<z>5</z>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0819">
      <description>Numbering using circled digits</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <modified by="Abel Braaksma" on="2015-05-16" change="See bug 22524, adding dependency and alternate result"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="CIRCLED DIGIT ONE" range="0 to 20" />
      </dependencies>
      <test>
         <stylesheet file="number-0819.xsl"/>
      </test>
      <result>
         <any-of>
            <assert-string-value>⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ㉑ ㉒ ㉓ ㉔ ㉕</assert-string-value>
            <assert-string-value>⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ 21 22 23 24 25</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-0820">
      <description>Numbering using parenthesized digits</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <modified by="Abel Braaksma" on="2015-05-16" change="See bug 22524, adding dependency"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="PARENTHESIZED DIGIT ONE" range="1 to 20" />
      </dependencies>
      <test>
         <stylesheet file="number-0820.xsl"/>
      </test>
      <result>
         <assert-string-value>0 ⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ 21 22 23 24 25</assert-string-value>
      </result>
   </test-case>

   <test-case name="number-0821">
      <description>Numbering using digit-full-stop characters</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <modified by="Abel Braaksma" on="2015-05-16" change="See bug 22524, adding dependency and alternate result"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DIGIT ONE FULL STOP" range="1 to 20" />
      </dependencies>
      <test>
         <stylesheet file="number-0821.xsl"/>
      </test>
      <result>
         <any-of>
            <assert-string-value>0 ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ 21 22 23 24 25</assert-string-value>
            <assert-string-value>&#127232; ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ 21 22 23 24 25</assert-string-value>
         </any-of>
      </result>
   </test-case>

   <test-case name="number-0822">
      <description>Use a non-BMP character as a grouping separator</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0822.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out xmlns:xs="http://www.w3.org/2001/XMLSchema">1&#65792;234&#65792;567</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-0823">
      <description>Error case, context item for xsl:number is an atomic value</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0823.xsl"/>
      </test>
      <result>
         <error code="XTTE0990"/>
      </result>
   </test-case>

   <test-case name="number-0824">
      <description>Error case, context item for xsl:number is undefined</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0824.xsl"/>
      </test>
      <result>
         <error code="XTTE0990"/>
      </result>
   </test-case>

   <test-case name="number-0825">
      <description>Error case, invalid lang attribute, detected statically</description>
      <created by="Michael Kay " on="2012-11-07"/>
      <modified by="Tim Mills " on="2012-12-20" change="Added XTSE0020"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0825.xsl"/>
      </test>
      <result>
	<any-of>
         <error code="XTDE0030"/>
         <error code="XTSE0020"/>
	</any-of>
      </result>
   </test-case>

   <test-case name="number-0826">
      <description>Error case, invalid lang attribute, detected dynamically</description>
      <created by="Michael Kay " on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0826.xsl"/>
      </test>
      <result>
         <error code="XTDE0030"/>
      </result>
   </test-case>

   <test-case name="number-0827">
      <description>xsl:number applied to non-number, without backwards compatibility </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-0827.xsl"/>
      </test>
      <result>
         <error code="XTDE0980"/>
      </result>
   </test-case>
   
   <test-case name="number-0828">
      <description>test ordinal numbering in German words, using CLDR numbering scheme name</description>
      <created by="Michael Kay" on="2015-04-22"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <languages_for_numbering value="de"/>
         <ordinal_scheme_name value="CLDR"/>
      </dependencies>
      <test>
         <stylesheet file="number-0828.xsl"/>
      </test>
      <result>
         <all-of>
            <assert>//n3 = "dritte"</assert>
            <assert>//n10 = "zehnter"</assert>
            <assert>//n13 = "dreizehntes"</assert>
            <assert>//n20 = "zwanzigsten"</assert>
            <assert>matches(//n100, "EIN( |&#173;)?HUNDERTSTE")</assert>
            <assert>matches(//n115, "EIN( |&#173;)?HUNDERT( |&#173;)?FÜNFZEHNTER")</assert>
            <assert>matches(//n134, "EIN( |&#173;)?HUNDERT( |&#173;)?VIER( |&#173;)?UND( |&#173;)?DREISSIGSTES")</assert>
            <assert>matches(//n200, "zwei( |&#173;)?hundertsten")</assert>
            <assert>matches(//n201, "zwei( |&#173;)?hundert( |&#173;)?erste")</assert>
            <assert>matches(//n210, "zwei( |&#173;)?hundert( |&#173;)?zehnter")</assert>
            <assert>matches(//n230, "zwei( |&#173;)?hundert( |&#173;)?dreißigstes")</assert>
            <assert>matches(//n1000, "EIN( |&#173;)?TAUSENDSTE")</assert>
            <assert>matches(//n1005, "EIN( |&#173;)?TAUSEND( |&#173;)?FÜNFTE")</assert>
            <assert>matches(//n2134816, "Zwei( |&#173;)Millionen( |&#173;)Ein( |&#173;)?(H|h)undert( |&#173;)?(V|v)ier( |&#173;)?und( |&#173;)?(D|d)reißig( |&#173;)?(T|t)ausend( |&#173;)?(A|a)cht( |&#173;)?(H|h)undert( |&#173;)?(S|s)echzehnter")</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="number-0829">
      <description>test ordinal numbering in Italian words, using CLDR numbering scheme name</description>
      <created by="Michael Kay" on="2015-04-22"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <languages_for_numbering value="it"/>
         <ordinal_scheme_name value="CLDR"/>
      </dependencies>
      <test>
         <stylesheet file="number-0829.xsl"/>
      </test>
      <result>
         <all-of>
            <assert>/out/m = "primo;secondo;terzo;quarto;quinto;sesto;settimo;ottavo;nono;decimo;"</assert>
            <assert>/out/f = "prima;seconda;terza;quarta;quinta;sesta;settima;ottava;nona;decima;"</assert>
         </all-of>
      </result>
   </test-case>

   <test-case name="number-0901">
      <description>Test of greek-numeral "traditional" sequence. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-09"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <combinations_for_numbering value="GREEK SMALL LETTER ALPHA (TRADITIONAL)"/>
      </dependencies>
      <test>
         <stylesheet file="number-0901.xsl"/>
      </test>
      <result>
         <assert-xml file="number-0901.out"/>
      </result>
   </test-case>

   <test-case name="number-0902">
      <description>Test of greek-numeral "alphabetic" sequence. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-09"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <combinations_for_numbering value="GREEK SMALL LETTER ALPHA (ALPHABETIC)"/>
      </dependencies>
      <test>
         <stylesheet file="number-0902.xsl"/>
      </test>
      <result>
         <assert-xml file="number-0902.out"/>
      </result>
   </test-case>

   <test-case name="number-1001">
      <description>XSLT 2.0: test use of select attribute of xsl:number</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="number-10.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-1001.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
    [3]
    [xiii]
  </out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="number-1002">
      <description>XSLT 2.0: test use of select attribute of xsl:number, nothing selected</description>
      <created by="Michael Kay" on="2022-08-08"/>
      <environment>
         <source role="." file="number-10.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-1002.xsl"/>
      </test>
      <result>
         <error code="XTTE1000"/>
      </result>
   </test-case>
   
   <test-case name="number-1003">
      <description>XSLT 2.0: test use of select attribute of xsl:number, multiple nodes selected</description>
      <created by="Michael Kay" on="2022-08-08"/>
      <environment>
         <source role="." file="number-10.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-1003.xsl"/>
      </test>
      <result>
         <error code="XTTE1000"/>
      </result>
   </test-case>
   
   <test-case name="number-1004">
      <description>XSLT 2.0: in xsl:number, there is no context item</description>
      <created by="Michael Kay" on="2022-08-08"/>
      <environment>
         <source role="." file="number-10.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-1004.xsl"/>
      </test>
      <result>
         <error code="XTTE0990"/>
      </result>
   </test-case>
   
   <test-case name="number-1005">
      <description>XSLT 2.0: select in xsl:number, selected element is parentless</description>
      <created by="Michael Kay" on="2022-08-08"/>
      <environment>
         <source role="." file="number-10.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-1005.xsl"/>
      </test>
      <result>
         <assert>/out='1'</assert>
      </result>
   </test-case>
   

   <test-case name="number-1101">
      <description/>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-11"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-1101.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<o xmlns:msp="urn:us:gov:ic:msp">
Test using attribute nodes:
Found source 1
Found source 2

Test using element nodes:
Found source 1
Found source 2
</o>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-1102">
      <description>Test xsl:number level="single" applied to attribute nodes</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-11"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-1102.xsl"/>
      </test>
      <result>
         <all-of>
            <assert>every $n in /out/no-from/n satisfies $n = "1"</assert>
            <assert>every $n in /out/from/n satisfies $n = "1"</assert>
            <assert>every $n in /out/matching-count/n satisfies $n = "1"</assert>
            <assert>every $n in /out/non-matching-count/n satisfies $n = ""</assert>
         </all-of>
      </result>
   </test-case>

   <test-case name="number-1201">
      <description>The first non-alpha token is a separator tokens if it appears between two formatting tokens</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role=".">
            <content><![CDATA[<doc><a/><a/><a><b/><b/><b><c/></b></a></doc>]]></content>
         </source>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-1201.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>(1.3.3.1)</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-1301">
      <description/>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role=".">
            <content><![CDATA[<doc>
  <p>a <citation/> and a <footnote>and a <citation/> in a
footnote</footnote> and a <citation/></p>
</doc>]]></content>
         </source>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-1301.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<list><number>1</number><number>2<nonumber/></number><number>3</number></list>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-1401">
      <description>Tests level="any" with a union pattern in the count attribute</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role=".">
            <content><![CDATA[<doc>
  <p>a <citation href="one"/> and a <footnote>and a <citation href="two"/> in a
    footnote</footnote> and a <citation href="one"/></p>
</doc>
]]></content>
         </source>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-1401.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<list><number first="true">1</number><number>2<nonumber first="true"/></number><number first="true">3</number></list>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-1501">
      <description>test xsl:number level="any" with a count pattern that matches the document root node</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-15"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-1501.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<z><n>2</n><n>3</n><n>7</n><n>31</n><n>150</n><n>192</n><n>225</n><n>271</n></z>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-1502">
      <description>test xsl:number level="any" with a from pattern that doesn't match any preceding or ancestor node</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-15"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-1502.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<z><n>2</n><n>3</n><n>1</n><n>1</n><n>1</n><n>1</n><n>1</n><n>1</n></z>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-1601">
      <description>Test case submitted on SourceForge saxon-help forum on 2008-01-23 by joelfisler. Tests use of a local variable in the count pattern</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role=".">
            <content><![CDATA[<lesson>
    <unit>blabla</unit>
    <unit role="tutor"/>
    <unit>flamingo</unit>
</lesson>]]></content>
         </source>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-1601.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>(1) 
    <out>(1) blabla</out>
    <out>(1.1) </out>
    <out>(1) flamingo</out>
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-1701">
      <description>Test use of current() in the count pattern</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-17"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-1701.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<doc nr=""><a nr=""><a nr="1"/></a><a nr="1"><b nr="1"/></a><a nr="1"><a nr="2"/></a><a nr="2"><b nr="2"/><b nr="2"/></a></doc>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-1702">
      <description>Test use of current() in the from pattern</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-17"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-1702.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<doc nr="1"><a nr="1"><a nr="1"/></a><a nr="2"><b nr="1"/></a><a nr="3"><a nr="1"/></a><a nr="2"><b nr="1"/><b nr="2"/></a></doc>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-1801">
      <description>Test with level=any where the node being numbered matches both the from and count patterns. Strange results - see bug 5849.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role=".">
            <content><![CDATA[<doc><a mark="true"/><a/><a/><a/><a mark="true"/><a/><a/><a/></doc>]]></content>
         </source>
      </environment>     
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-1801.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<doc nr=""><a mark="true" nr="1"/><a nr="2"/><a nr="3"/><a nr="4"/><a mark="true" nr="1"/><a nr="2"/><a nr="3"/><a nr="4"/></doc>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-1901">
      <description>Use current() within the xsl:number/@count pattern</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role=".">
            <content><![CDATA[<root><foo bar="a">1</foo><foo bar="b">2</foo><foo bar="a">3</foo></root>]]></content>
         </source>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-1901.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>1|2|3|</out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="number-1902">
      <description>Use a local variable within the xsl:number/@count pattern (level=single)</description>
      <created by="Michael Kay" on="2016-09-06"/>
      <environment>
         <source role=".">
            <content><![CDATA[<root><foo bar="1">1</foo><foo bar="2">2</foo><foo bar="3">3</foo></root>]]></content>
         </source>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-1902.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>1|1|1|</out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="number-1903">
      <description>Use a local variable within the xsl:number/@count pattern (level=any)</description>
      <created by="Michael Kay" on="2016-09-06"/>
      <environment>
         <source role=".">
            <content><![CDATA[<root><foo bar="1">1</foo><foo bar="2">2</foo><foo bar="3">3</foo></root>]]></content>
         </source>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-1903.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>1|1|1|</out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="number-1904">
      <description>Use a local variable declared locally within the xsl:number/@count pattern (level=any)</description>
      <created by="Michael Kay" on="2016-09-06"/>
      <environment>
         <source role=".">
            <content><![CDATA[<root><foo bar="1">1</foo><foo bar="2">3</foo><foo bar="3">9</foo></root>]]></content>
         </source>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="number-1904.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>1|1|2|</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-2001">
      <description>Test of numbering of multi-level document with no attributes specified. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-20"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2001.xsl"/>
      </test>
      <result>
         <assert-xml file="number-2001.out"/>
      </result>
   </test-case>

   <test-case name="number-2002">
      <description>Test based on example in spec: Test of level (multiple), count, format attributes. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-20"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2002.xsl"/>
      </test>
      <result>
         <assert-xml file="number-2002.out"/>
      </result>
   </test-case>

   <test-case name="number-2003">
      <description>Test of format attributes that vary per level. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-20"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2003.xsl"/>
      </test>
      <result>
         <assert-xml file="number-2003.out"/>
      </result>
   </test-case>

   <test-case name="number-2101">
      <description>Test based on example in spec: Test of simple numbering, no attributes specified. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role=".">
            <content><![CDATA[<doc>
  <ol>
    <item>aaa</item>
    <item>bbb</item>
    <item>ccc</item>
    <item>ddd</item>
  </ol>
</doc>]]></content>
         </source>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2101.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>1. aaa
2. bbb
3. ccc
4. ddd
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-2201">
      <description>Test based on example in spec: Test of level (any) and nested from/count. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="number-22.xml"/>
      </environment>
      
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2201.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
1.1.1 

2.1.1 

2.1.2 

2.2.1 

2.2.2 

2.2.3 
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-2301">
      <description>Test of leading zeroes in numbering. Last separator propagates. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="number-23.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2301.xsl"/>
      </test>
      <result>
         <assert-xml file="number-2301.out"/>
      </result>
   </test-case>

   <test-case name="number-2401">
      <description>Test based on example in spec: Test of value attribute. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-24"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2401.xsl"/>
      </test>
      <result>
         <assert-xml file="number-2401.out"/>
      </result>
   </test-case>

   <test-case name="number-2402">
      <description>Test of non-numeric assignment to value attribute. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-24"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2402.xsl"/>
      </test>
      <result>
         <assert-xml file="number-2402.out"/>
      </result>
   </test-case>

   <test-case name="number-2501">
      <description>Test of grouping attributes. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-25"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2501.xsl"/>
      </test>
      <result>
         <assert-xml file="number-2501.out"/>
      </result>
   </test-case>

   <test-case name="number-2502">
      <description>Test of grouping attributes. If only one of the two is present, it is ignored. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-25"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2502.xsl"/>
      </test>
      <result>
         <assert-xml file="number-2502.out"/>
      </result>
   </test-case>

   <test-case name="number-2503">
      <description>Test of grouping attributes. If only one of the two is present, it is ignored. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-25"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2503.xsl"/>
      </test>
      <result>
         <assert-xml file="number-2503.out"/>
      </result>
   </test-case>

   <test-case name="number-2504">
      <description>Test of grouping attributes. Use a grouping-separator that is not likely to be in the environment's locale settings. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-25"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2504.xsl"/>
      </test>
      <result>
         <assert-xml file="number-2504.out"/>
      </result>
   </test-case>

   <test-case name="number-2505">
      <description>Test of grouping attributes. Ensure that grouping-separator can be a space. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-25"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2505.xsl"/>
      </test>
      <result>
         <assert-xml file="number-2505.out"/>
      </result>
   </test-case>

   <test-case name="number-2506">
      <description>Test xsl:number with different values of lang attribute in a single run</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-25"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2506.xsl"/>
      </test>
      <result>
         <assert-xml file="number-2506.out"/>
      </result>
   </test-case>

   <test-case name="number-2601">
      <description>Test of alphabetic "numbering" sequence. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-26"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2601.xsl"/>
      </test>
      <result>
         <assert-xml file="number-2601.out"/>
      </result>
   </test-case>

   <test-case name="number-2602">
      <description>Test of roman-numeral "numbering" sequence. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-26"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2602.xsl"/>
      </test>
      <result>
         <assert-xml file="number-2602.out"/>
      </result>
   </test-case>

   <test-case name="number-2701">
      <description>Test of proper formation of Roman numerals. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="number-27.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2701.xsl"/>
      </test>
      <result>
         <assert-xml file="number-2701.out"/>
      </result>
   </test-case>

   <test-case name="number-2801">
      <description>Test of node numbering before and after the nodes specified in from. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-28"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2801.xsl"/>
      </test>
      <result>
         <assert-xml file="number-2801.out"/>
      </result>
   </test-case>

   <test-case name="number-2802">
      <description>Test of node numbering before and after the nodes specified in from. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-28"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2802.xsl"/>
      </test>
      <result>
         <assert-xml file="number-2802.out"/>
      </result>
   </test-case>

   <test-case name="number-2803">
      <description>Test of node numbering before and after the nodes specified in from. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-28"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2803.xsl"/>
      </test>
      <result>
         <assert-xml file="number-2803.out"/>
      </result>
   </test-case>

   <test-case name="number-2804">
      <description>Test xsl:number with a filtered count pattern, from defaulted, level=single. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-28"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2804.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>1: aaa
: bbb
2: ccc
1: ddd
: eee
2: fff
: ggg
3: hhh
: iii
1: jjj
: kkk
2: lll
4: mmm
: nnn
5: ooo
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-2805">
      <description>Test xsl:number with from and count defaulted, level=single. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-28"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2805.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>1: aaa
2: bbb
3: ccc
1: ddd
2: eee
3: fff
4: ggg
5: hhh
6: iii
1: jjj
2: kkk
3: lll
7: mmm
8: nnn
9: ooo
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-2806">
      <description>Test xsl:number with from and count defaulted, level=multiple. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-28"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2806.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>1: aaa
2: bbb
3: ccc
1: ddd
2: eee
3: fff
4: ggg
5: hhh
6: iii
1: jjj
2: kkk
3: lll
7: mmm
8: nnn
9: ooo
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-2807">
      <description>Test xsl:number with count on same level, from defaulted, level=multiple. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-28"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2807.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>1: aaa
2: bbb
3: ccc
1: ddd
2: eee
3: fff
4: ggg
5: hhh
6: iii
1: jjj
2: kkk
3: lll
7: mmm
8: nnn
9: ooo
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-2808">
      <description>Test xsl:number with count from higher level, from defaulted, level=multiple. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-28"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2808.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>: aaa
: bbb
: ccc
1: ddd
1: eee
1: fff
: ggg
: hhh
: iii
2: jjj
2: kkk
2: lll
: mmm
: nnn
: ooo
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-2809">
      <description>Test xsl:number with count specifying same and higher level, from defaulted, level=multiple. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-28"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2809.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>: aaa
: bbb
: ccc
1: ddd
2: eee
3: fff
: ggg
: hhh
: iii
1: jjj
2: kkk
3: lll
: mmm
: nnn
: ooo
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-2810">
      <description>Test xsl:number with a filtered count pattern, from defaulted, level=multiple. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-28"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2810.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>1: aaa
: bbb
2: ccc
1: ddd
: eee
2: fff
: ggg
3: hhh
: iii
1: jjj
: kkk
2: lll
4: mmm
: nnn
5: ooo
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-2811">
      <description>Test xsl:number with count on same level, from is next higher level, level=multiple. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-28"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2811.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>1: aaa
2: bbb
3: ccc
1: ddd
2: eee
3: fff
4: ggg
5: hhh
6: iii
1: jjj
2: kkk
3: lll
7: mmm
8: nnn
9: ooo
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-2812">
      <description>Test xsl:number with level=multiple, from specifies two levels. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-28"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2812.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>1: aaa
2: bbb
3: ccc
1: ddd
2: eee
3: fff
4: ggg
5: hhh
6: iii
1: jjj
2: kkk
3: lll
7: mmm
8: nnn
9: ooo
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-2813">
      <description>Test xsl:number with count on same level, from is two higher levels, level=multiple. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-28"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2813.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>1: aaa
2: bbb
3: ccc
1: ddd
2: eee
3: fff
4: ggg
5: hhh
6: iii
1: jjj
2: kkk
3: lll
7: mmm
8: nnn
9: ooo
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-2814">
      <description>Count non-existent nodes, level=multiple. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-28"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2814.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>: aaa
: bbb
: ccc
: ddd
: eee
: fff
: ggg
: hhh
: iii
: jjj
: kkk
: lll
: mmm
: nnn
: ooo
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-2901">
      <description>Test of level (any) and counting only some nodes. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-29"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2901.xsl"/>
      </test>
      <result>
         <assert-xml file="number-2901.out"/>
      </result>
   </test-case>

   <test-case name="number-2902">
      <description>Test of level (single) and counting only some nodes. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-29"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-2902.xsl"/>
      </test>
      <result>
         <assert-xml file="number-2902.out"/>
      </result>
   </test-case>

   <test-case name="number-3001">
      <description>Test of value attribute with popular "of n" format. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-30"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3001.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3001.out"/>
      </result>
   </test-case>

   <test-case name="number-3002">
      <description>Number without value= inside sorted for-each. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-30"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3002.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3002.out"/>
      </result>
   </test-case>

   <test-case name="number-3003">
      <description>Numbering comes from sorted order if value attribute used. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-30"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3003.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3003.out"/>
      </result>
   </test-case>

   <test-case name="number-3101">
      <description>Number without value= inside template called within sorted for-each. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="number-31.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3101.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3101.out"/>
      </result>
   </test-case>

   <test-case name="number-3201">
      <description>Test of numbering of multi-level document, level=multiple and default from. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3201.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3201.out"/>
      </result>
   </test-case>

   <test-case name="number-3202">
      <description>Test of numbering of multi-level document, level=single and default from. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3202.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3202.out"/>
      </result>
   </test-case>

   <test-case name="number-3203">
      <description>Test of numbering of multi-level document, level=any and default from. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3203.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3203.out"/>
      </result>
   </test-case>

   <test-case name="number-3204">
      <description>Test xsl:number formatting separators, propagating last one. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3204.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3204.out"/>
      </result>
   </test-case>

   <test-case name="number-3205">
      <description>Test xsl:number formatting separators, propagating last one. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3205.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3205.out"/>
      </result>
   </test-case>

   <test-case name="number-3206">
      <description>Test xsl:number formatting separators, propagating last one, watching for confusion with default (.) separator. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3206.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3206.out"/>
      </result>
   </test-case>

   <test-case name="number-3207">
      <description>Test xsl:number formatting separators, propagating last one. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3207.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3207.out"/>
      </result>
   </test-case>

   <test-case name="number-3208">
      <description>Test xsl:number formatting separators, propagating last one, with default (.) elsewhere in format. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3208.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3208.out"/>
      </result>
   </test-case>

   <test-case name="number-3209">
      <description>Test xsl:number formatting separators, propagating last one. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3209.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3209.out"/>
      </result>
   </test-case>

   <test-case name="number-3210">
      <description>Test xsl:number formatting separators, propagating last one. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3210.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3210.out"/>
      </result>
   </test-case>

   <test-case name="number-3211">
      <description>Test xsl:number formatting separators, with extra characters that look the same. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3211.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3211.out"/>
      </result>
   </test-case>

   <test-case name="number-3212">
      <description>Test xsl:number formatting separators, with extra characters that look the same. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3212.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3212.out"/>
      </result>
   </test-case>

   <test-case name="number-3213">
      <description>Test xsl:number formatting separators, propagating last one, with extra characters that look the same. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3213.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3213.out"/>
      </result>
   </test-case>

   <test-case name="number-3214">
      <description>Test xsl:number formatting separators, propagating last one. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3214.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3214.out"/>
      </result>
   </test-case>

   <test-case name="number-3215">
      <description>Test xsl:number formatting separators, propagating last one (which is the last one between). </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3215.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3215.out"/>
      </result>
   </test-case>

   <test-case name="number-3216">
      <description>Test xsl:number formatting separators, propagating last one. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3216.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3216.out"/>
      </result>
   </test-case>

   <test-case name="number-3217">
      <description>Test xsl:number formatting separators, propagating last one. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3217.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3217.out"/>
      </result>
   </test-case>

   <test-case name="number-3218">
      <description>Test xsl:number formatting separators, propagating last one. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3218.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3218.out"/>
      </result>
   </test-case>

   <test-case name="number-3219">
      <description>Test xsl:number formatting separators, with multiple characters in between numbering tokens. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3219.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3219.out"/>
      </result>
   </test-case>

   <test-case name="number-3220">
      <description>Establish that the default for level is single. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3220.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3220.out"/>
      </result>
   </test-case>

   <test-case name="number-3221">
      <description>Count only top-level changes but number all the way down, level=single. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3221.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3221.out"/>
      </result>
   </test-case>

   <test-case name="number-3222">
      <description>Count only bottom-level changes but number all the way down, level=any. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3222.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3222.out"/>
      </result>
   </test-case>

   <test-case name="number-3223">
      <description>Allow level to default to single and count top-level items all the way down. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3223.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3223.out"/>
      </result>
   </test-case>

   <test-case name="number-3224">
      <description>Test xsl:number with from and count defaulted but level=any. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3224.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3224.out"/>
      </result>
   </test-case>

   <test-case name="number-3225">
      <description>Test of numbering of multi-level document, level=any, from specifies middle level. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3225.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3225.out"/>
      </result>
   </test-case>

   <test-case name="number-3226">
      <description>Count one level of changes and number below there, level=single. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3226.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3226.out"/>
      </result>
   </test-case>

   <test-case name="number-3227">
      <description>Count all levels of changes and number by level, level=single. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3227.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3227.out"/>
      </result>
   </test-case>

   <test-case name="number-3228">
      <description>Test of numbering of multi-level document with specified from level, level=multiple.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3228.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3228.out"/>
      </result>
   </test-case>

   <test-case name="number-3229">
      <description>Test of numbering of multi-level document with two from levels, level=multiple.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3229.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3229.out"/>
      </result>
   </test-case>

   <test-case name="number-3230">
      <description>Count non-existent nodes, level=single.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3230.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3230.out"/>
      </result>
   </test-case>

   <test-case name="number-3231">
      <description>Count non-existent nodes, level=any.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-32"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3231.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3231.out"/>
      </result>
   </test-case>

   <test-case name="number-3301">
      <description>Test more than one xsl:number counter active at the same time.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="number-33.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3301.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3301.out"/>
      </result>
   </test-case>

   <test-case name="number-3401">
      <description>Test of level (any) and counting only some nodes, with from defaulted.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-34"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3401.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3401.out"/>
      </result>
   </test-case>

   <test-case name="number-3402">
      <description>Test of level (any) and counting only some nodes, from specifies next-higher level.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-34"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3402.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3402.out"/>
      </result>
   </test-case>

   <test-case name="number-3403">
      <description>Test of level (any) and counting only some nodes, from specifies two higher levels.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-34"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3403.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3403.out"/>
      </result>
   </test-case>

   <test-case name="number-3404">
      <description>Test of level (single) and counting only some nodes, from specifies two higher levels.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-34"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3404.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3404.out"/>
      </result>
   </test-case>

   <test-case name="number-3405">
      <description>Test counting only some nodes, with key() in count pattern.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-34"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3405.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3405.out"/>
      </result>
   </test-case>

   <test-case name="number-3501">
      <description>Test of numbering of multi-level document with specified from level, count filtered.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="number-35.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3501.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3501.out"/>
      </result>
   </test-case>

   <test-case name="number-3601">
      <description>Test xsl:number with with from set for two levels, level=any, count defaulted.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="number-36.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3601.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3601.out"/>
      </result>
   </test-case>

   <test-case name="number-3701">
      <description>Test xsl:number with from set for two levels, level=any.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-37"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3701.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3701.out"/>
      </result>
   </test-case>

   <test-case name="number-3702">
      <description>Test xsl:number with from set for two levels, level=any, counting two levels.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-37"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3702.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3702.out"/>
      </result>
   </test-case>

   <test-case name="number-3801">
      <description>Test of level (single), from specifies two higher levels, count defaulted.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-38"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3801.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3801.out"/>
      </result>
   </test-case>

   <test-case name="number-3802">
      <description>Test of level (single), from specifies two higher levels.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-38"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3802.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3802.out"/>
      </result>
   </test-case>

   <test-case name="number-3901">
      <description>Test of level (single) and counting two types of nodes, from specifies two higher levels.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="number-39.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-3901.xsl"/>
      </test>
      <result>
         <assert-xml file="number-3901.out"/>
      </result>
   </test-case>

   <test-case name="number-4001">
      <description>Test of numbering of multi-level document with two from levels and filtering the lowest count level.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="number-40.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-4001.xsl"/>
      </test>
      <result>
         <assert-xml file="number-4001.out"/>
      </result>
   </test-case>

   <test-case name="number-4101">
      <description>Test that value attribute gets rounded correctly with various formats.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role=".">
            <content><![CDATA[<doc>
</doc>]]></content>
         </source>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-4101.xsl"/>
      </test>
      <result>
         <assert-xml file="number-4101.out"/>
      </result>
   </test-case>

   <test-case name="number-4201">
      <description>CaseName: numbering86 Namespaced elements should work just like non-namespaced ones.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-42"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-4201.xsl"/>
      </test>
      <result>
         <assert-xml file="number-4201.out"/>
      </result>
   </test-case>

   <test-case name="number-4202">
      <description>Namespaced elements should work just like non-namespaced ones even when prefixes in source document and stylesheet are different.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-42"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-4202.xsl"/>
      </test>
      <result>
         <assert-xml file="number-4202.out"/>
      </result>
   </test-case>

   <test-case name="number-4301">
      <description>Number the namespaced elements when mixed with non-namespaced ones.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="number-43.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-4301.xsl"/>
      </test>
      <result>
         <assert-xml file="number-4301.out"/>
      </result>
   </test-case>

   <test-case name="number-4401">
      <description>Show discrepancies between number and position.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-44"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-4401.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><chap number="1" position="2">aaa<sel number="1" position="1"/></chap><chap number="2" position="4">zzz<sel number="2" position="1"/></chap></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-4402">
      <description>Show discrepancies between number and position.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="number-44"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-4402.xsl"/>
      </test>
      <result>
         <all-of>
            <assert>/out/chap[1][@number='1'][@position='2'][note='aaa']</assert>
            <assert>/out/chap[1]/text[1][@number='1'][@position='1']</assert>
            <assert>/out/chap[1]/sel[1][@number='1'][@position='2']</assert>
            <assert>/out/chap[1]/text[2][@number='2'][@position='3']</assert>
            <assert>/out/chap[1]/sel[2][@number='2'][@position='4']</assert>
            <assert>/out/chap[1]/text[3][@number='3'][@position='5']</assert>
            <assert>/out/chap[2][@number='2'][@position='4'][note='zzz']</assert>
            <assert>/out/chap[2]/text[1][@number='1'][@position='1']</assert>
            <assert>/out/chap[2]/sel[1][@number='1'][@position='2']</assert>
            <assert>/out/chap[2]/text[2][@number='2'][@position='3']</assert>
            <assert>/out/chap[2]/sel[2][@number='2'][@position='4']</assert>
            <assert>/out/chap[2]/text[3][@number='3'][@position='5']</assert>
         </all-of>
      </result>
   </test-case>

   <test-case name="number-4501">
      <description>Test counting only some nodes, with id() in count pattern.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <modified by="Michael Kay" on="2016-03-16" change="add DTD dependency"/>
      <environment>
         <source role="." file="number-45.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
         <feature value="dtd"/>
      </dependencies>
      <test>
         <stylesheet file="number-4501.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>(no) a(1) b(no) c(2) d(no) e(no) f(3) g(no) h</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="number-4601">
      <description>If the source document has a named default namespace, the counting (on xsl:number) should still work. </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="number-46.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-4601.xsl"/>
      </test>
      <result>
         <assert-xml file="number-4601.out"/>
      </result>
   </test-case>

   <test-case name="number-4701">
      <description>test xsl:number with level="any", from="/"</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="number-47.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="number-4701.xsl"/>
      </test>
      <result>
         <all-of>
            <assert>deep-equal(/out/z/from-slash/number(), (1,2,3,4,5,6))</assert>
            <assert>deep-equal(/out/z/from-star/number(), (1,1,2,3,4,5))</assert>
         </all-of>
      </result>
   </test-case>
   

   
   <test-case name="number-5001">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'CIRCLED DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="CIRCLED DIGIT ONE" range="0 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' ①'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭</assert-string-value>
            <assert-string-value>⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ 10 11 12 13 14</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5002">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'CIRCLED DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="CIRCLED DIGIT ONE" range="0 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' ①'"/>
      </test>
      <result>
         <assert-string-value>⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5003">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'CIRCLED DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="CIRCLED DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' ①'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭</assert-string-value>
            <assert-string-value>⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭</assert-string-value>
            <assert-string-value>0 ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ 10 11 12 13 14</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5004">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'CIRCLED DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="CIRCLED DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' ①'"/>
      </test>
      <result>
         <assert-string-value>① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5005">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'CIRCLED DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="CIRCLED DIGIT ONE" range="0 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="15"/>
         <param name="format-string" as="xs:string" select="' ①'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮</assert-string-value>
            <assert-string-value>⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ 11 12 13 14 15</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5006">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'CIRCLED DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="CIRCLED DIGIT ONE" range="0 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="10"/>
         <param name="format-string" as="xs:string" select="' ①'"/>
      </test>
      <result>
         <assert-string-value>⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5007">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'CIRCLED DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="CIRCLED DIGIT ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="15"/>
         <param name="format-string" as="xs:string" select="' ①'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮</assert-string-value>
            <assert-string-value>⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮</assert-string-value>
            <assert-string-value>0 ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ 11 12 13 14 15</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5008">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'CIRCLED DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="CIRCLED DIGIT ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="10"/>
         <param name="format-string" as="xs:string" select="' ①'"/>
      </test>
      <result>
         <assert-string-value>① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5009">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'CIRCLED DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="CIRCLED DIGIT ONE" range="0 to 20"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="25"/>
         <param name="format-string" as="xs:string" select="' ①'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ㉑ ㉒ ㉓ ㉔ ㉕</assert-string-value>
            <assert-string-value>⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ 21 22 23 24 25</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5010">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'CIRCLED DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="CIRCLED DIGIT ONE" range="0 to 20"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="20"/>
         <param name="format-string" as="xs:string" select="' ①'"/>
      </test>
      <result>
         <assert-string-value>⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5011">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'CIRCLED DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="CIRCLED DIGIT ONE" range="1 to 20"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="25"/>
         <param name="format-string" as="xs:string" select="' ①'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ㉑ ㉒ ㉓ ㉔ ㉕</assert-string-value>
            <assert-string-value>⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ㉑ ㉒ ㉓ ㉔ ㉕</assert-string-value>
            <assert-string-value>0 ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ 21 22 23 24 25</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5012">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'CIRCLED DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="CIRCLED DIGIT ONE" range="1 to 20"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="20"/>
         <param name="format-string" as="xs:string" select="' ①'"/>
      </test>
      <result>
         <assert-string-value>① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5013">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'CIRCLED DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="CIRCLED DIGIT ONE" range="0 to 50"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="55"/>
         <param name="format-string" as="xs:string" select="' ①'"/>
      </test>
      <result>
         <assert-string-value>⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ㉑ ㉒ ㉓ ㉔ ㉕ ㉖ ㉗ ㉘ ㉙ ㉚ ㉛ ㉜ ㉝ ㉞ ㉟ ㊱ ㊲ ㊳ ㊴ ㊵ ㊶ ㊷ ㊸ ㊹ ㊺ ㊻ ㊼ ㊽ ㊾ ㊿ 51 52 53 54 55</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5014">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'CIRCLED DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="CIRCLED DIGIT ONE" range="0 to 50"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="50"/>
         <param name="format-string" as="xs:string" select="' ①'"/>
      </test>
      <result>
         <assert-string-value>⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ㉑ ㉒ ㉓ ㉔ ㉕ ㉖ ㉗ ㉘ ㉙ ㉚ ㉛ ㉜ ㉝ ㉞ ㉟ ㊱ ㊲ ㊳ ㊴ ㊵ ㊶ ㊷ ㊸ ㊹ ㊺ ㊻ ㊼ ㊽ ㊾ ㊿</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5015">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'CIRCLED DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="CIRCLED DIGIT ONE" range="1 to 50"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="55"/>
         <param name="format-string" as="xs:string" select="' ①'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ㉑ ㉒ ㉓ ㉔ ㉕ ㉖ ㉗ ㉘ ㉙ ㉚ ㉛ ㉜ ㉝ ㉞ ㉟ ㊱ ㊲ ㊳ ㊴ ㊵ ㊶ ㊷ ㊸ ㊹ ㊺ ㊻ ㊼ ㊽ ㊾ ㊿ 51 52 53 54 55</assert-string-value>
            <assert-string-value>⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ㉑ ㉒ ㉓ ㉔ ㉕ ㉖ ㉗ ㉘ ㉙ ㉚ ㉛ ㉜ ㉝ ㉞ ㉟ ㊱ ㊲ ㊳ ㊴ ㊵ ㊶ ㊷ ㊸ ㊹ ㊺ ㊻ ㊼ ㊽ ㊾ ㊿ 51 52 53 54 55</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5016">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'CIRCLED DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="CIRCLED DIGIT ONE" range="1 to 50"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="50"/>
         <param name="format-string" as="xs:string" select="' ①'"/>
      </test>
      <result>
         <assert-string-value>① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ㉑ ㉒ ㉓ ㉔ ㉕ ㉖ ㉗ ㉘ ㉙ ㉚ ㉛ ㉜ ㉝ ㉞ ㉟ ㊱ ㊲ ㊳ ㊴ ㊵ ㊶ ㊷ ㊸ ㊹ ㊺ ㊻ ㊼ ㊽ ㊾ ㊿</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5017">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'PARENTHESIZED DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="PARENTHESIZED DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' ⑴'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 ⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁</assert-string-value>
            <assert-string-value>0 ⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ 10 11 12 13 14</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5018">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'PARENTHESIZED DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="PARENTHESIZED DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' ⑴'"/>
      </test>
      <result>
         <assert-string-value>⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5019">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'PARENTHESIZED DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="PARENTHESIZED DIGIT ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="15"/>
         <param name="format-string" as="xs:string" select="' ⑴'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 ⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂</assert-string-value>
            <assert-string-value>0 ⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ 11 12 13 14 15</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5020">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'PARENTHESIZED DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="PARENTHESIZED DIGIT ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="10"/>
         <param name="format-string" as="xs:string" select="' ⑴'"/>
      </test>
      <result>
         <assert-string-value>⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5021">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'PARENTHESIZED DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="PARENTHESIZED DIGIT ONE" range="1 to 20"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="25"/>
         <param name="format-string" as="xs:string" select="' ⑴'"/>
      </test>
      <result>
         <assert-string-value>0 ⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ 21 22 23 24 25</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5022">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'PARENTHESIZED DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="PARENTHESIZED DIGIT ONE" range="1 to 20"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="20"/>
         <param name="format-string" as="xs:string" select="' ⑴'"/>
      </test>
      <result>
         <assert-string-value>⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5023">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DIGIT ONE FULL STOP' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DIGIT ONE FULL STOP" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' ⒈'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕</assert-string-value>
            <assert-string-value>🄀 ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕</assert-string-value>
            <assert-string-value>0 ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ 10 11 12 13 14</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5024">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DIGIT ONE FULL STOP' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DIGIT ONE FULL STOP" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' ⒈'"/>
      </test>
      <result>
         <assert-string-value>⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5025">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DIGIT ONE FULL STOP' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DIGIT ONE FULL STOP" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' ⒈'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕</assert-string-value>
            <assert-string-value>🄀 ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕</assert-string-value>
            <assert-string-value>0 ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ 10 11 12 13 14</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5026">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DIGIT ONE FULL STOP' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DIGIT ONE FULL STOP" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' ⒈'"/>
      </test>
      <result>
         <assert-string-value>⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5027">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DIGIT ONE FULL STOP' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DIGIT ONE FULL STOP" range="0 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="15"/>
         <param name="format-string" as="xs:string" select="' ⒈'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>🄀 ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖</assert-string-value>
            <assert-string-value>🄀 ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ 11 12 13 14 15</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5028">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DIGIT ONE FULL STOP' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DIGIT ONE FULL STOP" range="0 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="10"/>
         <param name="format-string" as="xs:string" select="' ⒈'"/>
      </test>
      <result>
         <assert-string-value>🄀 ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5029">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DIGIT ONE FULL STOP' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DIGIT ONE FULL STOP" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="15"/>
         <param name="format-string" as="xs:string" select="' ⒈'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖</assert-string-value>
            <assert-string-value>🄀 ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖</assert-string-value>
            <assert-string-value>0 ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ 11 12 13 14 15</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5030">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DIGIT ONE FULL STOP' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DIGIT ONE FULL STOP" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="10"/>
         <param name="format-string" as="xs:string" select="' ⒈'"/>
      </test>
      <result>
         <assert-string-value>⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5031">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DIGIT ONE FULL STOP' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DIGIT ONE FULL STOP" range="0 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="15"/>
         <param name="format-string" as="xs:string" select="' ⒈'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>🄀 ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖</assert-string-value>
            <assert-string-value>🄀 ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ 11 12 13 14 15</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5032">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DIGIT ONE FULL STOP' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DIGIT ONE FULL STOP" range="0 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="10"/>
         <param name="format-string" as="xs:string" select="' ⒈'"/>
      </test>
      <result>
         <assert-string-value>🄀 ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5033">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DIGIT ONE FULL STOP' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DIGIT ONE FULL STOP" range="1 to 20"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="25"/>
         <param name="format-string" as="xs:string" select="' ⒈'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ 21 22 23 24 25</assert-string-value>
            <assert-string-value>🄀 ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ 21 22 23 24 25</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5034">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DIGIT ONE FULL STOP' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DIGIT ONE FULL STOP" range="1 to 20"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="20"/>
         <param name="format-string" as="xs:string" select="' ⒈'"/>
      </test>
      <result>
         <assert-string-value>⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5035">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT NEGATIVE CIRCLED DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT NEGATIVE CIRCLED DIGIT ONE" range="0 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' ❶'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>⓿ ❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ ❿ ⓫ ⓬ ⓭ ⓮</assert-string-value>
            <assert-string-value>⓿ ❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ 10 11 12 13 14</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5036">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT NEGATIVE CIRCLED DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT NEGATIVE CIRCLED DIGIT ONE" range="0 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' ❶'"/>
      </test>
      <result>
         <assert-string-value>⓿ ❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5037">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT NEGATIVE CIRCLED DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT NEGATIVE CIRCLED DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' ❶'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 ❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ ❿ ⓫ ⓬ ⓭ ⓮</assert-string-value>
            <assert-string-value>⓿ ❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ ❿ ⓫ ⓬ ⓭ ⓮</assert-string-value>
            <assert-string-value>0 ❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ 10 11 12 13 14</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5038">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT NEGATIVE CIRCLED DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT NEGATIVE CIRCLED DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' ❶'"/>
      </test>
      <result>
         <assert-string-value>❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5039">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT NEGATIVE CIRCLED DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT NEGATIVE CIRCLED DIGIT ONE" range="0 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="15"/>
         <param name="format-string" as="xs:string" select="' ❶'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>⓿ ❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ ❿ ⓫ ⓬ ⓭ ⓮ ⓯</assert-string-value>
            <assert-string-value>⓿ ❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ ❿ 11 12 13 14 15</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5040">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT NEGATIVE CIRCLED DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT NEGATIVE CIRCLED DIGIT ONE" range="0 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="10"/>
         <param name="format-string" as="xs:string" select="' ❶'"/>
      </test>
      <result>
         <assert-string-value>⓿ ❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ ❿</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5041">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT NEGATIVE CIRCLED DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT NEGATIVE CIRCLED DIGIT ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="15"/>
         <param name="format-string" as="xs:string" select="' ❶'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 ❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ ❿ ⓫ ⓬ ⓭ ⓮ ⓯</assert-string-value>
            <assert-string-value>⓿ ❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ ❿ ⓫ ⓬ ⓭ ⓮ ⓯</assert-string-value>
            <assert-string-value>0 ❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ ❿ 11 12 13 14 15</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5042">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT NEGATIVE CIRCLED DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT NEGATIVE CIRCLED DIGIT ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="10"/>
         <param name="format-string" as="xs:string" select="' ❶'"/>
      </test>
      <result>
         <assert-string-value>❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ ❿</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5043">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT NEGATIVE CIRCLED DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT NEGATIVE CIRCLED DIGIT ONE" range="0 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="15"/>
         <param name="format-string" as="xs:string" select="' ❶'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>⓿ ❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ ❿ ⓫ ⓬ ⓭ ⓮ ⓯</assert-string-value>
            <assert-string-value>⓿ ❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ ❿ 11 12 13 14 15</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5044">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT NEGATIVE CIRCLED DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT NEGATIVE CIRCLED DIGIT ONE" range="0 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="10"/>
         <param name="format-string" as="xs:string" select="' ❶'"/>
      </test>
      <result>
         <assert-string-value>⓿ ❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ ❿</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5045">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT NEGATIVE CIRCLED DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT NEGATIVE CIRCLED DIGIT ONE" range="1 to 20"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="25"/>
         <param name="format-string" as="xs:string" select="' ❶'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 ❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ ❿ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ 21 22 23 24 25</assert-string-value>
            <assert-string-value>⓿ ❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ ❿ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ 21 22 23 24 25</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5046">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT NEGATIVE CIRCLED DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT NEGATIVE CIRCLED DIGIT ONE" range="1 to 20"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="20"/>
         <param name="format-string" as="xs:string" select="' ❶'"/>
      </test>
      <result>
         <assert-string-value>❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ ❿ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5047">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DOUBLE CIRCLED DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DOUBLE CIRCLED DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' ⓵'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 ⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ 11 12 13 14</assert-string-value>
            <assert-string-value>0 ⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ 10 11 12 13 14</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5048">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DOUBLE CIRCLED DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DOUBLE CIRCLED DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' ⓵'"/>
      </test>
      <result>
         <assert-string-value>⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5049">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DOUBLE CIRCLED DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DOUBLE CIRCLED DIGIT ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="15"/>
         <param name="format-string" as="xs:string" select="' ⓵'"/>
      </test>
      <result>
         <assert-string-value>0 ⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ 11 12 13 14 15</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5050">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DOUBLE CIRCLED DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DOUBLE CIRCLED DIGIT ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="10"/>
         <param name="format-string" as="xs:string" select="' ⓵'"/>
      </test>
      <result>
         <assert-string-value>⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5051">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT CIRCLED SANS-SERIF DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT CIRCLED SANS-SERIF DIGIT ONE" range="0 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' ➀'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>🄋 ➀ ➁ ➂ ➃ ➄ ➅ ➆ ➇ ➈ ➉ 11 12 13 14</assert-string-value>
            <assert-string-value>🄋 ➀ ➁ ➂ ➃ ➄ ➅ ➆ ➇ ➈ 10 11 12 13 14</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5052">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT CIRCLED SANS-SERIF DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT CIRCLED SANS-SERIF DIGIT ONE" range="0 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' ➀'"/>
      </test>
      <result>
         <assert-string-value>🄋 ➀ ➁ ➂ ➃ ➄ ➅ ➆ ➇ ➈</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5053">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT CIRCLED SANS-SERIF DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT CIRCLED SANS-SERIF DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' ➀'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 ➀ ➁ ➂ ➃ ➄ ➅ ➆ ➇ ➈ ➉</assert-string-value>
            <assert-string-value>🄋 ➀ ➁ ➂ ➃ ➄ ➅ ➆ ➇ ➈ ➉ 11 12 13 14</assert-string-value>
            <assert-string-value>0 ➀ ➁ ➂ ➃ ➄ ➅ ➆ ➇ ➈ 10 11 12 13 14</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5054">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT CIRCLED SANS-SERIF DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT CIRCLED SANS-SERIF DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' ➀'"/>
      </test>
      <result>
         <assert-string-value>➀ ➁ ➂ ➃ ➄ ➅ ➆ ➇ ➈</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5055">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT CIRCLED SANS-SERIF DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT CIRCLED SANS-SERIF DIGIT ONE" range="0 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="15"/>
         <param name="format-string" as="xs:string" select="' ➀'"/>
      </test>
      <result>
         <assert-string-value>🄋 ➀ ➁ ➂ ➃ ➄ ➅ ➆ ➇ ➈ ➉ 11 12 13 14 15</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5056">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT CIRCLED SANS-SERIF DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT CIRCLED SANS-SERIF DIGIT ONE" range="0 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="10"/>
         <param name="format-string" as="xs:string" select="' ➀'"/>
      </test>
      <result>
         <assert-string-value>🄋 ➀ ➁ ➂ ➃ ➄ ➅ ➆ ➇ ➈ ➉</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5057">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT CIRCLED SANS-SERIF DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT CIRCLED SANS-SERIF DIGIT ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="15"/>
         <param name="format-string" as="xs:string" select="' ➀'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 ➀ ➁ ➂ ➃ ➄ ➅ ➆ ➇ ➈ ➉ 11 12 13 14 15</assert-string-value>
            <assert-string-value>🄋 ➀ ➁ ➂ ➃ ➄ ➅ ➆ ➇ ➈ ➉ 11 12 13 14 15</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5058">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT CIRCLED SANS-SERIF DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT CIRCLED SANS-SERIF DIGIT ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="10"/>
         <param name="format-string" as="xs:string" select="' ➀'"/>
      </test>
      <result>
         <assert-string-value>➀ ➁ ➂ ➃ ➄ ➅ ➆ ➇ ➈ ➉</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5059">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' ➊'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 ➊ ➋ ➌ ➍ ➎ ➏ ➐ ➑ ➒ ➓</assert-string-value>
            <assert-string-value>🄌 ➊ ➋ ➌ ➍ ➎ ➏ ➐ ➑ ➒ ➓ 11 12 13 14</assert-string-value>
            <assert-string-value>0 ➊ ➋ ➌ ➍ ➎ ➏ ➐ ➑ ➒ 10 11 12 13 14</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5060">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' ➊'"/>
      </test>
      <result>
         <assert-string-value>➊ ➋ ➌ ➍ ➎ ➏ ➐ ➑ ➒</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5061">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' ➊'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 ➊ ➋ ➌ ➍ ➎ ➏ ➐ ➑ ➒ ➓</assert-string-value>
            <assert-string-value>🄌 ➊ ➋ ➌ ➍ ➎ ➏ ➐ ➑ ➒ ➓ 11 12 13 14</assert-string-value>
            <assert-string-value>0 ➊ ➋ ➌ ➍ ➎ ➏ ➐ ➑ ➒ 10 11 12 13 14</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5062">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' ➊'"/>
      </test>
      <result>
         <assert-string-value>➊ ➋ ➌ ➍ ➎ ➏ ➐ ➑ ➒</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5063">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ONE" range="0 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="15"/>
         <param name="format-string" as="xs:string" select="' ➊'"/>
      </test>
      <result>
         <assert-string-value>🄌 ➊ ➋ ➌ ➍ ➎ ➏ ➐ ➑ ➒ ➓ 11 12 13 14 15</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5064">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ONE" range="0 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="10"/>
         <param name="format-string" as="xs:string" select="' ➊'"/>
      </test>
      <result>
         <assert-string-value>🄌 ➊ ➋ ➌ ➍ ➎ ➏ ➐ ➑ ➒ ➓</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5065">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="15"/>
         <param name="format-string" as="xs:string" select="' ➊'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 ➊ ➋ ➌ ➍ ➎ ➏ ➐ ➑ ➒ ➓ 11 12 13 14 15</assert-string-value>
            <assert-string-value>🄌 ➊ ➋ ➌ ➍ ➎ ➏ ➐ ➑ ➒ ➓ 11 12 13 14 15</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5066">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="10"/>
         <param name="format-string" as="xs:string" select="' ➊'"/>
      </test>
      <result>
         <assert-string-value>➊ ➋ ➌ ➍ ➎ ➏ ➐ ➑ ➒ ➓</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5067">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'PARENTHESIZED IDEOGRAPH ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="PARENTHESIZED IDEOGRAPH ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' ㈠'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 ㈠ ㈡ ㈢ ㈣ ㈤ ㈥ ㈦ ㈧ ㈨ ㈩ 11 12 13 14</assert-string-value>
            <assert-string-value>0 ㈠ ㈡ ㈢ ㈣ ㈤ ㈥ ㈦ ㈧ ㈨ 10 11 12 13 14</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5068">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'PARENTHESIZED IDEOGRAPH ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="PARENTHESIZED IDEOGRAPH ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' ㈠'"/>
      </test>
      <result>
         <assert-string-value>㈠ ㈡ ㈢ ㈣ ㈤ ㈥ ㈦ ㈧ ㈨</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5069">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'PARENTHESIZED IDEOGRAPH ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="PARENTHESIZED IDEOGRAPH ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="15"/>
         <param name="format-string" as="xs:string" select="' ㈠'"/>
      </test>
      <result>
         <assert-string-value>0 ㈠ ㈡ ㈢ ㈣ ㈤ ㈥ ㈦ ㈧ ㈨ ㈩ 11 12 13 14 15</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5070">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'PARENTHESIZED IDEOGRAPH ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="PARENTHESIZED IDEOGRAPH ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="10"/>
         <param name="format-string" as="xs:string" select="' ㈠'"/>
      </test>
      <result>
         <assert-string-value>㈠ ㈡ ㈢ ㈣ ㈤ ㈥ ㈦ ㈧ ㈨ ㈩</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5071">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'CIRCLED IDEOGRAPH ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="CIRCLED IDEOGRAPH ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' ㊀'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 ㊀ ㊁ ㊂ ㊃ ㊄ ㊅ ㊆ ㊇ ㊈ ㊉ 11 12 13 14</assert-string-value>
            <assert-string-value>0 ㊀ ㊁ ㊂ ㊃ ㊄ ㊅ ㊆ ㊇ ㊈ 10 11 12 13 14</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5072">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'CIRCLED IDEOGRAPH ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="CIRCLED IDEOGRAPH ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' ㊀'"/>
      </test>
      <result>
         <assert-string-value>㊀ ㊁ ㊂ ㊃ ㊄ ㊅ ㊆ ㊇ ㊈</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5073">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'CIRCLED IDEOGRAPH ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="CIRCLED IDEOGRAPH ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="15"/>
         <param name="format-string" as="xs:string" select="' ㊀'"/>
      </test>
      <result>
         <assert-string-value>0 ㊀ ㊁ ㊂ ㊃ ㊄ ㊅ ㊆ ㊇ ㊈ ㊉ 11 12 13 14 15</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5074">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'CIRCLED IDEOGRAPH ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="CIRCLED IDEOGRAPH ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="10"/>
         <param name="format-string" as="xs:string" select="' ㊀'"/>
      </test>
      <result>
         <assert-string-value>㊀ ㊁ ㊂ ㊃ ㊄ ㊅ ㊆ ㊇ ㊈ ㊉</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5075">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'AEGEAN NUMBER ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="AEGEAN NUMBER ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' 𐄇'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 𐄇 𐄈 𐄉 𐄊 𐄋 𐄌 𐄍 𐄎 𐄏 𐄐 11 12 13 14</assert-string-value>
            <assert-string-value>0 𐄇 𐄈 𐄉 𐄊 𐄋 𐄌 𐄍 𐄎 𐄏 10 11 12 13 14</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5076">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'AEGEAN NUMBER ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="AEGEAN NUMBER ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' 𐄇'"/>
      </test>
      <result>
         <assert-string-value>𐄇 𐄈 𐄉 𐄊 𐄋 𐄌 𐄍 𐄎 𐄏</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5077">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'AEGEAN NUMBER ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="AEGEAN NUMBER ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="15"/>
         <param name="format-string" as="xs:string" select="' 𐄇'"/>
      </test>
      <result>
         <assert-string-value>0 𐄇 𐄈 𐄉 𐄊 𐄋 𐄌 𐄍 𐄎 𐄏 𐄐 11 12 13 14 15</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5078">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'AEGEAN NUMBER ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="AEGEAN NUMBER ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="10"/>
         <param name="format-string" as="xs:string" select="' 𐄇'"/>
      </test>
      <result>
         <assert-string-value>𐄇 𐄈 𐄉 𐄊 𐄋 𐄌 𐄍 𐄎 𐄏 𐄐</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5079">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'COPTIC EPACT DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="COPTIC EPACT DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' 𐋡'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 𐋡 𐋢 𐋣 𐋤 𐋥 𐋦 𐋧 𐋨 𐋩 𐋪 11 12 13 14</assert-string-value>
            <assert-string-value>0 𐋡 𐋢 𐋣 𐋤 𐋥 𐋦 𐋧 𐋨 𐋩 10 11 12 13 14</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5080">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'COPTIC EPACT DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="COPTIC EPACT DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' 𐋡'"/>
      </test>
      <result>
         <assert-string-value>𐋡 𐋢 𐋣 𐋤 𐋥 𐋦 𐋧 𐋨 𐋩</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5081">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'COPTIC EPACT DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="COPTIC EPACT DIGIT ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="15"/>
         <param name="format-string" as="xs:string" select="' 𐋡'"/>
      </test>
      <result>
         <assert-string-value>0 𐋡 𐋢 𐋣 𐋤 𐋥 𐋦 𐋧 𐋨 𐋩 𐋪 11 12 13 14 15</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5082">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'COPTIC EPACT DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="COPTIC EPACT DIGIT ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="10"/>
         <param name="format-string" as="xs:string" select="' 𐋡'"/>
      </test>
      <result>
         <assert-string-value>𐋡 𐋢 𐋣 𐋤 𐋥 𐋦 𐋧 𐋨 𐋩 𐋪</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5083">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'RUMI DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="RUMI DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' 𐹠'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 𐹠 𐹡 𐹢 𐹣 𐹤 𐹥 𐹦 𐹧 𐹨 𐹩 11 12 13 14</assert-string-value>
            <assert-string-value>0 𐹠 𐹡 𐹢 𐹣 𐹤 𐹥 𐹦 𐹧 𐹨 10 11 12 13 14</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5084">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'RUMI DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="RUMI DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' 𐹠'"/>
      </test>
      <result>
         <assert-string-value>𐹠 𐹡 𐹢 𐹣 𐹤 𐹥 𐹦 𐹧 𐹨</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5085">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'RUMI DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="RUMI DIGIT ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="15"/>
         <param name="format-string" as="xs:string" select="' 𐹠'"/>
      </test>
      <result>
         <assert-string-value>0 𐹠 𐹡 𐹢 𐹣 𐹤 𐹥 𐹦 𐹧 𐹨 𐹩 11 12 13 14 15</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5086">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'RUMI DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="RUMI DIGIT ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="10"/>
         <param name="format-string" as="xs:string" select="' 𐹠'"/>
      </test>
      <result>
         <assert-string-value>𐹠 𐹡 𐹢 𐹣 𐹤 𐹥 𐹦 𐹧 𐹨 𐹩</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5087">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'BRAHMI NUMBER ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="BRAHMI NUMBER ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' 𑁒'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 𑁒 𑁓 𑁔 𑁕 𑁖 𑁗 𑁘 𑁙 𑁚 𑁛 11 12 13 14</assert-string-value>
            <assert-string-value>0 𑁒 𑁓 𑁔 𑁕 𑁖 𑁗 𑁘 𑁙 𑁚 10 11 12 13 14</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5088">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'BRAHMI NUMBER ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="BRAHMI NUMBER ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' 𑁒'"/>
      </test>
      <result>
         <assert-string-value>𑁒 𑁓 𑁔 𑁕 𑁖 𑁗 𑁘 𑁙 𑁚</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5089">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'BRAHMI NUMBER ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="BRAHMI NUMBER ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="15"/>
         <param name="format-string" as="xs:string" select="' 𑁒'"/>
      </test>
      <result>
         <assert-string-value>0 𑁒 𑁓 𑁔 𑁕 𑁖 𑁗 𑁘 𑁙 𑁚 𑁛 11 12 13 14 15</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5090">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'BRAHMI NUMBER ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="BRAHMI NUMBER ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="10"/>
         <param name="format-string" as="xs:string" select="' 𑁒'"/>
      </test>
      <result>
         <assert-string-value>𑁒 𑁓 𑁔 𑁕 𑁖 𑁗 𑁘 𑁙 𑁚 𑁛</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5091">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'SINHALA ARCHAIC DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="SINHALA ARCHAIC DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' 𑇡'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 𑇡 𑇢 𑇣 𑇤 𑇥 𑇦 𑇧 𑇨 𑇩 𑇪 11 12 13 14</assert-string-value>
            <assert-string-value>0 𑇡 𑇢 𑇣 𑇤 𑇥 𑇦 𑇧 𑇨 𑇩 10 11 12 13 14</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5092">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'SINHALA ARCHAIC DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="SINHALA ARCHAIC DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' 𑇡'"/>
      </test>
      <result>
         <assert-string-value>𑇡 𑇢 𑇣 𑇤 𑇥 𑇦 𑇧 𑇨 𑇩</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5093">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'SINHALA ARCHAIC DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="SINHALA ARCHAIC DIGIT ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="15"/>
         <param name="format-string" as="xs:string" select="' 𑇡'"/>
      </test>
      <result>
         <assert-string-value>0 𑇡 𑇢 𑇣 𑇤 𑇥 𑇦 𑇧 𑇨 𑇩 𑇪 11 12 13 14 15</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5094">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'SINHALA ARCHAIC DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="SINHALA ARCHAIC DIGIT ONE" range="1 to 10"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="10"/>
         <param name="format-string" as="xs:string" select="' 𑇡'"/>
      </test>
      <result>
         <assert-string-value>𑇡 𑇢 𑇣 𑇤 𑇥 𑇦 𑇧 𑇨 𑇩 𑇪</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5095">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'COUNTING ROD UNIT DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="COUNTING ROD UNIT DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' 𝍠'"/>
      </test>
      <result>
         <assert-string-value>0 𝍠 𝍡 𝍢 𝍣 𝍤 𝍥 𝍦 𝍧 𝍨 10 11 12 13 14</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5096">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'COUNTING ROD UNIT DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="COUNTING ROD UNIT DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' 𝍠'"/>
      </test>
      <result>
         <assert-string-value>𝍠 𝍡 𝍢 𝍣 𝍤 𝍥 𝍦 𝍧 𝍨</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5097">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'MENDE KIKAKUI DIGIT ONE' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="MENDE KIKAKUI DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' 𞣇'"/>
      </test>
      <result>
         <assert-string-value>0 𞣇 𞣈 𞣉 𞣊 𞣋 𞣌 𞣍 𞣎 𞣏 10 11 12 13 14</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5098">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'MENDE KIKAKUI DIGIT ONE' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="MENDE KIKAKUI DIGIT ONE" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' 𞣇'"/>
      </test>
      <result>
         <assert-string-value>𞣇 𞣈 𞣉 𞣊 𞣋 𞣌 𞣍 𞣎 𞣏</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5099">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DIGIT ONE COMMA' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DIGIT ONE COMMA" range="0 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' 🄂'"/>
      </test>
      <result>
         <assert-string-value>🄁 🄂 🄃 🄄 🄅 🄆 🄇 🄈 🄉 🄊 10 11 12 13 14</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5100">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DIGIT ONE COMMA' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DIGIT ONE COMMA" range="0 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' 🄂'"/>
      </test>
      <result>
         <assert-string-value>🄁 🄂 🄃 🄄 🄅 🄆 🄇 🄈 🄉 🄊</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="number-5101">
      <!--This test is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DIGIT ONE COMMA' with overflowing range (tested range overflows the supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DIGIT ONE COMMA" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="0"/>
         <param name="to" as="xs:integer" select="14"/>
         <param name="format-string" as="xs:string" select="' 🄂'"/>
      </test>
      <result>
         <any-of>
            <!--If a processor supports 0 to 1000, it also supports 1 to 9, 0 to 20 etc, unless range is implied by Unicode range-->
            <assert-string-value>0 🄂 🄃 🄄 🄅 🄆 🄇 🄈 🄉 🄊 10 11 12 13 14</assert-string-value>
            <assert-string-value>🄁 🄂 🄃 🄄 🄅 🄆 🄇 🄈 🄉 🄊 10 11 12 13 14</assert-string-value>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="number-5102">
      <!--This test was converted from Exselt and is auto-generated using _number-other-create.xsl-->
      <description>Numbering using 'DIGIT ONE COMMA' with matching range (tested range matches exact with supported range)</description>
      <created by="Abel Braaksma" on="2015-05-16"/>
      <environment ref="number-06"/>
      <dependencies>
         <spec value="XSLT10+"/>
         <combinations_for_numbering value="DIGIT ONE COMMA" range="1 to 9"/>
      </dependencies>
      <test>
         <stylesheet file="number-5000.xsl"/>
         <param name="from" as="xs:integer" select="1"/>
         <param name="to" as="xs:integer" select="9"/>
         <param name="format-string" as="xs:string" select="' 🄂'"/>
      </test>
      <result>
         <assert-string-value>🄂 🄃 🄄 🄅 🄆 🄇 🄈 🄉 🄊</assert-string-value>
      </result>
   </test-case>
</test-set>
