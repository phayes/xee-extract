<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns:xs="http://www.w3.org/2001/XMLSchema"
          xmlns="http://www.w3.org/2012/10/xslt-test-catalog"
          name="sort">
   <description>Tests sort</description>
   
   <environment name="sort002">
      <source role="." file="sort002.xml"/>
   </environment>
   <environment name="sort003">
      <source role="." file="sort003.xml"/>
   </environment>
   
   <environment name="sort004">
      <source role=".">
         <content><![CDATA[<doc/>]]></content>
      </source>
   </environment>
   
   <environment name="sort008">
      <source role="." file="sort008.xml"/>
   </environment>
   
   <environment name="sort010">
      <source role="." file="sort010.xml"/>
   </environment>
   
   <environment name="sort020">
      <source role=".">
         <content><![CDATA[<doc><a>1</a><a>5</a><a>0</a><a>-5</a><a>100</a><a>3.3</a><a>NaN</a></doc>]]></content>
      </source>
   </environment>
  
   <environment name="sort123">
      <source role="." file="sort123.xml"/>
   </environment>
   
   <environment name="sort125">
      <source role=".">
         <content><![CDATA[<doc><alpha key="a"/><alpha key="b"/><alpha key="c"/><alpha key="d"/><alpha key="e"/><alpha key="f"/><alpha key="g"/></doc>]]></content>
      </source>
   </environment>
   
   <environment name="sort127">
      <source role=".">
         <content><![CDATA[<main>
  j
  <sub size="7">d</sub>
  f
  <sub size="3">h</sub>
  i
  <sub size="5">e</sub>
  b
</main>]]></content>
      </source>
   </environment>
   
   <environment name="sort129">
      <source role="." file="sort129.xml"/>
   </environment>
   
   <environment name="sort132">
      <source role=".">
         <content><![CDATA[<!-- Test for xsl:sort -->
<doc>
  <t>1</t>
  <t>007</t>
  <t>1.0</t>
  <t>7</t>
  <t>bogus</t>
  <t>0.5</t>
  <t>1.1</t>
  <t>11</t>
</doc>]]></content>
      </source>
   </environment>
   
   <environment name="sort135">
      <source role="." file="sort135.xml"/>
   </environment>
   
   <environment name="sort136">
      <source role="." file="sort136.xml"/>
   </environment>
   
   <environment name="sort142">
      <source role=".">
         <content><![CDATA[<div><br/><b>AAA</b>BBB<b>CCC</b><br/><b>DDD</b>EEE<b>FFF</b>GGG<br/></div>]]></content>
      </source>
   </environment>
   
   <!--<test-case name="sort-0001">
      <description>A test with a large input of strings</description>
      <created by="Abel Braaksma" on="2015-10-07"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-0001.xsl"/>
      </test>
      <result>
         <assert-xml file="sort-0001.out"/>
      </result>
   </test-case>-->

   
   <test-case name="sort-001">
      <description>A test for xsl:sort with numeric keys</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="sort001.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-001.xsl"/>
      </test>
      <result>
         <assert-xml file="sort-001.out"/>
      </result>
   </test-case>

   <test-case name="sort-002">
      <description>A test for xsl:sort. Lowercase a-z alpha keys, to avoid collation problems</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort002"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-002.xsl"/>
      </test>
      <result>
         <all-of>
            <assert>deep-equal(/out/asc/item/string(), 
               ("document", "elements", "mechanism", "must", "namespaces", "prefix", "processors", "recognize", 
               "recognized", "specified", "to", "uri", "use", "xml", "xslt", "xsltdefined"))</assert>
            <assert>deep-equal(/out/desc/item/string(), 
               reverse(("document", "elements", "mechanism", "must", "namespaces", "prefix", "processors", "recognize", 
               "recognized", "specified", "to", "uri", "use", "xml", "xslt", "xsltdefined")))</assert>
         </all-of>
      </result>
   </test-case>

   <test-case name="sort-003">
      <description>A test for xsl:sort &lt;desc&gt; &lt;xsl:for-each select="item"&gt; &lt;xsl:sort order="descending"/&gt; &lt;xsl:copy-of select="."/&gt;&lt;xsl:text&gt; &lt;/xsl:text&gt; &lt;/xsl:for-each&gt; &lt;/desc&gt;</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort002"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-003.xsl"/>
      </test>
      <result>
         <assert>deep-equal(/out/asc/item/string(), 
            ("document", "elements", "mechanism", "must", "namespaces", "prefix", "processors", "recognize", 
            "recognized", "specified", "to", "uri", "use", "xml", "xslt", "xsltdefined"))</assert>
      </result>
   </test-case>

   <test-case name="sort-004">
      <description>A test for xsl:sort, calling a function within a sequence constructor</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort002"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-004.xsl"/>
      </test>
      <result>
         <all-of>
            <assert>deep-equal(/out/asc/item/string(),
                ("specified", "xsltdefined", "recognized", "use", "recognize", "uri", "xml", "mechanism",
               "to", "namespaces", "processors", "elements", "xslt", "document", "must", "prefix"))</assert>
            <assert>deep-equal(/out/desc/item/string(),
               reverse(("specified", "xsltdefined", "recognized", "use", "recognize", "uri", "xml", "mechanism",
               "to", "namespaces", "processors", "elements", "xslt", "document", "must", "prefix")))</assert>
         </all-of>
      </result>
   </test-case>

   <test-case name="sort-005">
      <description>A test for xsl:sort. Multi-part sort keys, all of the form [A-Z][a-z]* to avoid collation problems</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort003"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-005.xsl"/>
      </test>
      <result>
         <assert-xml file="sort-005.out"/>
      </result>
   </test-case>

   <test-case name="sort-006">
      <description>A test for xsl:sort, including putting duplicates in document order</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort003"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-006.xsl"/>
      </test>
      <result>
         <assert>/ok</assert>
      </result>
   </test-case>

   <test-case name="sort-007">
      <description>A test for xsl:sort, multipart alphabetic sort key</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort003"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-007.xsl"/>
      </test>
      <result>
         <assert-xml file="sort-007.out"/>
      </result>
   </test-case>

   <test-case name="sort-008">
      <description>A test for xsl:sort, multipart keys, alpha</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort003"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-008.xsl"/>
      </test>
      <result>
         <assert-xml file="sort-008.out"/>
      </result>
   </test-case>

   <test-case name="sort-009">
      <description>A test for xsl:sort, multipart, alpha, some keys null</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort003"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-009.xsl"/>
      </test>
      <result>
         <assert-xml file="sort-009.out"/>
      </result>
   </test-case>

   <test-case name="sort-010">
      <description>A test for xsl:sort, in which sort order depends on the source document</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort003"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-010.xsl"/>
      </test>
      <result>
         <assert>/ok</assert>
      </result>
   </test-case>

   <test-case name="sort-011">
      <description>A test for xsl:sort: sort by reverse document order</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort008"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-011.xsl"/>
      </test>
      <result>
         <assert-xml file="sort-011.out"/>
      </result>
   </test-case>

   <test-case name="sort-012">
      <description>Test xsl:sort with sort parameters given as AVTs, changing the values on successive runs</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <modified by="Abel Braaksma" on="2018-12-27" change="W3C Bug #30386: Removed collation attribute from xsl:sort, as it would throw an error XTDE1030, see sort-012err" />
      <environment ref="sort008"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-012.xsl"/>
      </test>
      <result>
         <assert-xml file="sort-012.out"/>
      </result>
   </test-case>

   <!--<test-case name="sort-012err">
      <description>Originally this was sort-012, see bug #30386. Combination of data-type="number" and collation is an error.</description>
      <created by="Abel Braaksma" on="2018-12-27"/>
      <environment ref="sort008"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-012err.xsl"/>
      </test>
      <result>
         <error code="XTDE1030" />
      </result>
   </test-case>-->

   <test-case name="sort-013">
      <description>Test xsl:perform-sort</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort010"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-013.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>-47,-13,0,1,002,3,04,5,0008,23,40,69,82,99,100,666,777,803.05,803.23,803.33333332,803.33333333,1001001001</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-014">
      <description>Test xsl:perform-sort with data-type attribute</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort010"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-014.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>-47,-13,0,1,002,3,04,5,0008,23,40,69,82,99,100,666,777,803.05,803.23,803.33333332,803.33333333,1001001001</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-015">
      <description>Test xsl:perform-sort</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort010"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-015.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>-47,-13,0,1,002,3,04,5,0008,23,40,69,82,99,100,666,777,803.05,803.23,803.33333332,803.33333333,1001001001</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-016">
      <description>Test that lang has no effect on numeric data.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort010"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-016.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>-47 -13 0 1 002 3 04 5 0008 23 40 69 82 99 100 666 777 803.05 803.23 803.33333332 803.33333333 1001001001 </out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-017">
      <description>
         Test xsl:sort-key with different languages. 
         Note, the sort keys are chosen so that the results are predictable in any language, 
         this is really just testing that the lang attribute is accepted.
      </description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="sort013.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-017.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<result><out lang="en">B,C,K,T,U,V,X</out><out lang="de">B,C,K,T,U,V,X</out><out lang="sv">B,C,K,T,U,V,X</out></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-018">
      <description>Test xsl:perform-sort with different case-order options</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="sort014.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-018.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<result><out lang="en-lower-first">a,b,B,c,C,K,r,t,u,U,V,V,x,X</out><out lang="en-upper-first">a,B,b,C,c,K,r,t,U,u,V,V,X,x</out></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-019">
      <description>Test xsl:perform-sort with Unicode code-point collation</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="sort018.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-019.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out lang="default-order">JAEGER,JAGGED,Jaeger,Jager,Jagger,JÄGER,JÆGER,Jäger,Jæger,jogger,jäger</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-020">
      <description>Test xsl:sort using a code-point collation</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="sort024.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-020.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>  ccix,-13,-47,0,0008,002,04,1,100,1001001001,23,3,40,5,666,69,777,803.05,803.23,803.33333332,803.33333333,82,99,FIFTY,SEVEN,forty,sixty</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-021">
      <description></description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="sort111.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-021.xsl"/>
      </test>
      <result>
         <assert-xml file="sort-021.out"/>
      </result>
   </test-case>

   <test-case name="sort-022">
      <description></description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="sort112.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-022.xsl"/>
      </test>
      <result>
         <assert-xml file="sort-022.out"/>
      </result>
   </test-case>

   <test-case name="sort-023">
      <description></description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="sort113.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-023.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
    Ascending order....
    First|p2|1.0.9|00k|1.u|0.5.9|1-m|0.5s|Last|0|0.5|1|1.0| 1.1|007|7|11|</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-024">
      <description></description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role=".">
            <content><![CDATA[<doc><alpha key="ve1"/><alpha key="xd2"/><alpha key="ua3"/><alpha key="tf4"/><alpha key="zc5"/><alpha key="wg6"/><alpha key="yb7"/></doc>]]></content>
         </source>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-024.xsl"/>
      </test>
      <result>
         <assert>/out = "ua3,yb7,zc5,xd2,ve1,tf4,wg6,"</assert>
      </result>
   </test-case>

   <test-case name="sort-025">
      <description></description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort123"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-025.xsl"/>
      </test>
      <result>
         <assert>/out = "8,12,15,18,20,21,24,"</assert>
      </result>
   </test-case>

   <test-case name="sort-026">
      <description>Variant of sort123, uses sort keys that are numeric, but with data-type="text"</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort123"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-026.xsl"/>
      </test>
      <result>
         <assert>/out = "12,15,18,20,21,24,8,"</assert>
      </result>
   </test-case>

   <test-case name="sort-027">
      <description>Error, unknown collation</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort123"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-027.xsl"/>
      </test>
      <result>
         <error code="XTDE1035"/>
      </result>
   </test-case>

   <test-case name="sort-028">
      <description>Error, invalid lang attribute, detected statically</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <modified by="Tim Mills" on="2012-12-20" change="Added XTSE0020"/>
      <environment ref="sort123"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-028.xsl"/>
      </test>
      <result>
	<any-of>
         <error code="XTDE0030"/>
         <error code="XTSE0020"/>
	</any-of>
      </result>
   </test-case>

   <test-case name="sort-029">
      <description>Error, invalid lang attribute, detected dynamically</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <modified by="Abel Braaksma" on="2018-12-26" change="Forced at least two evaluations, as when xsl:for-each returns zero or one item, the lang='{...}' may never be evaluated and no error is raised" />
      <environment ref="sort123"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-029.xsl"/>
      </test>
      <result>
         <error code="XTDE0030"/>
      </result>
   </test-case>

   <test-case name="sort-030">
      <description> Purpose: Test for xsl:sort using a numeric expression for the select. 
      Note that we show that this sort does NOT do the expected rearrangement of nodes! 
      Apparently, the conversion of the select expression to a string occurs at a bad time.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role=".">
            <content><![CDATA[<doc><alpha key="a44a"/><alpha key="b2"/><alpha key="c6666c"/><alpha key="d"/><alpha key="e555e"/><alpha key="f77777f"/><alpha key="g3g"/></doc>]]></content>
         </source>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-030.xsl"/>
      </test>
      <result>
         <assert>/out = "a44a|b2|c6666c|d|e555e|f77777f|g3g|"</assert>
      </result>
   </test-case>

   <test-case name="sort-031">
      <description></description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort125"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-031.xsl"/>
      </test>
      <result>
         <assert>/out = "gfedcba"</assert>
      </result>
   </test-case>

   <test-case name="sort-032">
      <description>Test case that uses an ifexpr in @select of an xsl:sort instruction.(Using count function in the ifexpr)</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="sort125"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-032.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>gfedcba</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-033">
      <description>Test for xsl:sort on apply-templates that does not have a select attribute.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="sort126.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-033.xsl"/>
      </test>
      <result>
         <assert-xml file="sort-033.out"/>
      </result>
   </test-case>

   <test-case name="sort-034">
      <description>Test for xsl:sort on apply-templates that will get text and element children.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort127"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-034.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
  b
-d-e-
  f
  -h-
  i
  -
  j
  -</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-035">
      <description>Test for xsl:sort on apply-templates without select, numeric sort.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort127"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-035.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
  j
  -
  f
  -
  i
  -
  b
-h-e-d-</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-036">
      <description>Test for xsl:sort using a variable in the select, for-each loop. --&gt;</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort129"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-036.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>First,Second,Third,Fourth,Fifth,Sixth,Seventh,</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-037">
      <description>Test for xsl:sort using a local variable in the select, apply-templates.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort129"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-037.xsl"/>
      </test>
      <result>
         <assert>/out = "First,Second,Third,Fourth,Fifth,Sixth,Seventh,"</assert>
      </result>
   </test-case>

   <test-case name="sort-038">
      <description>Test for xsl:sort using a global variable in the select, apply-templates.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort129"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-038.xsl"/>
      </test>
      <result>
         <assert>/out = "First,Second,Third,Fourth,Fifth,Sixth,Seventh,"</assert>
      </result>
   </test-case>

   <test-case name="sort-039">
      <description>Test that stable="yes" can be set on an xsl:sort instruction.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="sort129"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-039.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>First,Second,Third,Fourth,Fifth,Sixth,Seventh,</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-040">
      <description>Test that stable="no" can be set, but apply to data where it's moot .</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="sort129"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-040.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>First,Second,Third,Fourth,Fifth,Sixth,Seventh,</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-041">
      <description> Purpose: Try to set data-type from a variable.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort132"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-041.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
    Ascending order....
    bogus|0.5|1|1.0|1.1|007|7|11|</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-042">
      <description>Try to set order from a variable.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort132"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-042.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
    Descending order....
    11|007|7|1.1|1|1.0|0.5|bogus|</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-043">
      <description>Try to set case-order from a variable.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="sort134.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-043.xsl"/>
      </test>
      <result>
         <assert-xml file="sort-043.out"/>
      </result>
   </test-case>

   <test-case name="sort-044">
      <description>Test the famous technique for choosing the sort key dynamically.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort135"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-044.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><z>tf4,</z><z>ua3,</z><z>ve1,</z><z>wg6,</z><z>xd2,</z><z>yb7,</z><z>zc5,</z></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-045">
      <description>If nothing comes through select, should get document order.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort135"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-045.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><z>ve1,</z><z>xd2,</z><z>ua3,</z><z>tf4,</z><z>zc5,</z><z>wg6,</z><z>yb7,</z></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-046">
      <description>Test the famous technique for sorting with conditionals. In this case, we want to sort strings with and without "Re: " prefix by the rest of the string. Technique from Oliver Becker (obecker@informatik.hu-berlin.de).</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort136"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-046.xsl"/>
      </test>
      <result>
         <assert-xml file="sort-046.out"/>
      </result>
   </test-case>

   <test-case name="sort-047">
      <description>Test case that uses an ifexpr in @select of an xsl:sort instruction. (Using string functions in the ifexpr)</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="sort136"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-047.xsl"/>
      </test>
      <result>
         <assert-xml file="sort-047.out"/>
      </result>
   </test-case>

   <test-case name="sort-048">
      <description>Numeric sort, but no items are true numbers.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role=".">
            <content><![CDATA[<doc><t>First</t><t>p2</t><t>1.0.9</t><t>00k</t><t>1.u</t><t>1-m</t><t>0.5s</t><t>Last</t></doc>]]></content>
         </source>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-048.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
    Ascending order....
    First|p2|1.0.9|00k|1.u|1-m|0.5s|Last|</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-049">
      <description>Purpose: Try to set lang from an expression.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="sort139.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-049.xsl"/>
      </test>
      <result>
         <assert-xml file="sort-049.out"/>
      </result>
   </test-case>

   <test-case name="sort-050">
      <description>Purpose: Loop over a node-set in for-each and sort the nodes.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="sort140.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-050.xsl"/>
      </test>
      <result>
         <assert-xml file="sort-050.out"/>
      </result>
   </test-case>

   <test-case name="sort-051">
      <description>Test xsl:sort using a sequence constructor</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="sort141.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-051.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
    Descending order....
    1001001001 803.23 803.05 803.33333333 803.33333332 777 666 100 99 82 69 40 23 0008 5 04 3 002 1 0 -13 -47 </out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-052">
      <description>tests sorting axes into document order</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort142"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-052.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><p class="seq1"><b>AAA</b>BBB<b>CCC</b><br/><b>DDD</b>EEE<b>FFF</b>GGG<br/></p
            ><p class="seq2"><br/><b>AAA</b>BBB<b>CCC</b></p
            ><p class="intersect"><b>AAA</b>BBB<b>CCC</b></p
            ><p class="seq1"><b>DDD</b>EEE<b>FFF</b>GGG<br/></p
            ><p class="seq2"><br/><b>AAA</b>BBB<b>CCC</b><br/><b>DDD</b>EEE<b>FFF</b>GGG</p
            ><p class="intersect"><b>DDD</b>EEE<b>FFF</b>GGG</p></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-053">
      <description>test sorting into document order</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sort142"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-053.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><p class="seq1"><b>AAA</b>BBB<b>CCC</b><br/><b>DDD</b>EEE<b>FFF</b>GGG<br/></p
            ><p class="seq2"><br/><b>AAA</b>BBB<b>CCC</b></p
            ><p class="intersect"><b>AAA</b>BBB<b>CCC</b></p
            ><p class="seq1"><b>DDD</b>EEE<b>FFF</b>GGG<br/></p
            ><p class="seq2"><br/><b>AAA</b>BBB<b>CCC</b><br/><b>DDD</b>EEE<b>FFF</b>GGG</p
            ><p class="intersect"><b>DDD</b>EEE<b>FFF</b>GGG</p></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-054">
      <description>comparing two xs:anyURI values is now allowed, they are promoted to strings</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment>
         <source role="." file="sort144.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-054.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<a xmlns:xs="http://www.w3.org/2001/XMLSchema">false</a>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-055">
      <description>Test that collation attribute is accepted for an xsl:sort instruction (use codepoint collation for universality).</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment>
         <source role="." file="sort055.xml"/>
      </environment>   
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-055.xsl"/>
      </test>
      <result>
         <assert>deep-equal(/out/e/@num/number(), (22, 18, 20, 12, 14, 9, 17, 15, 16, 1, 5, 6, 13, 21, 19, 2, 4, 3, 8, 11, 10, 7))</assert>
         <!--<assert-xml><![CDATA[<out
            ><e num="22" t="  a b "
            /><e num="18" t="- -a- -"
            /><e num="20" t="-a-bcd"
            /><e num="12" t="Ab"
            /><e num="14" t="Az"
            /><e num="9" t="a"
            /><e num="17" t="a  b- "
            /><e num="15" t="a-b"
            /><e num="16" t="a-c"
            /><e num="1" t="ab"
            /><e num="5" t="ab"
            /><e num="6" t="ab"
            /><e num="13" t="ab"
            /><e num="21" t="ab!"
            /><e num="19" t="ab!c!d!"
            /><e num="2" t="cd"
            /><e num="4" t="cd"
            /><e num="3" t="dc"
            /><e num="8" t="zb"
            /><e num="11" t="Äb"
            /><e num="10" t="ä"
            /><e num="7" t="äb"
            /></out>]]></assert-xml>-->
      </result>
   </test-case>

   <test-case name="sort-056">
      <description>Sort a sequence of atomic values, xsl:for-each to iterate.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="sort004"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-056.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>300 | 5 | 4 | 1 | 0 | -2 | </out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-057">
      <description>Use sequence constructor in xsl:sort instead of select, refer to '.' in the constructor.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="sort004"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-057.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>300 | 5 | 4 | 1 | 0 | -2 | </out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-058">
      <description>String sort on a set that includes empty strings.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="sort004"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-058.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out> |  |   | a | b | g | x | </out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-059">
      <description>Sort values that are cast to dates dynamically in the select attribute</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="sort004"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-059.xsl"/>
      </test>
      <result>
         <assert-xml file="sort-059.out"/>
      </result>
   </test-case>

   <test-case name="sort-060">
      <description>Sort with two keys, both being cast to specific datatypes in their respective selects</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="sort004"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-060.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><a>100</a><a>105</a><a>200</a><a>300</a><a>700</a><a>900</a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-061">
      <description>Sort a sequence of numeric values of various types that includes float NaNs and double NaNs.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="sort004"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-061.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>12.5 | 1 | 0.009 | 0 | -0.05 | NaN | NaN | </out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-062">
      <description>Use xsl:perform-sort inside xsl:function to sort a sequence of atomic values. (Idea taken from Specification's examples).</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="sort004"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-062.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><letter>a | d | f | u | z</letter><number>-5 | 0 | 0.002 | 3 | 3 | 10 | 400</number></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-063">
      <description>Sort a sequence of text nodes</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="sort004"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-063.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>  aadsx</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-064">
      <description>Sort a sequence of attributes</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="sort004"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-064.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out att2="a" att4="V_4" att3="V3" att1="z"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-065">
      <description>Sort a sequence of comment nodes</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="sort004"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-065.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><!----><!----><!--A comment --><!--First comment--><!--My comment--><!--XSLT_comment --></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-066">
      <description>Test case to show that the @data-type of the xsl:sort instruction can be used to sort data types that are not comparable (eg:xs:QName) as text or number.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="sort004"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-066.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<txt>my:z</txt>
<txt>my:g</txt>
<txt>my:a</txt>

<num>my:z</num>
<num>my:g</num>
<num>my:a</num>
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-067">
      <description>Test that case-order is ignored when collation is present (use codepoint collation for universality; with lower-first).</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment>
         <source role="." file="sort009.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-067.xsl"/>
      </test>
      <result>
         <all-of>
            <assert>/out/With-collation = "15:AB * 11:Ab * 14:CD * 12:Cd * 13:Dc * 1:ab * 5:ab * 2:cd * 4:cd * 3:dc * "</assert>
            <assert>/out/Without-collation = "1:ab * 5:ab * 11:Ab * 15:AB * 2:cd * 4:cd * 12:Cd * 14:CD * 3:dc * 13:Dc * "</assert>
         </all-of>
      </result>
   </test-case>

   <test-case name="sort-068">
      <description>
         Sort values that are cast to a specific type dynamically in the select attribute, 
         but also have data-type to force the real sort to occur on the string values
      </description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment>
         <source role=".">
            <content><![CDATA[<doc><a>1999-12-31</a><a>2000-12-31</a><a>1999-11-01</a><a>1990-10-30</a><a>2005-11-03</a><a>2006-04-04</a></doc>]]></content>
         </source>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-068.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><a>1999-12-31</a><a>2000-12-31</a><a>1999-11-01</a><a>1990-10-30</a><a>2005-11-03</a><a>2006-04-04</a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-069">
      <description>Use sequence constructor in xsl:sort and refer to last()</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment>
         <source role=".">
            <content><![CDATA[<doc><a>1</a><a>5</a><a>20</a><a>0</a><a>-5</a><a>30</a></doc>]]></content>
         </source>
      </environment>   
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-069.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>List of numbers: 1 5 20 0 -5 30<Last_BeforeSort>30</Last_BeforeSort><last_AfterSort>-5</last_AfterSort></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-070">
      <description>Sort values that are cast to float in the select attribute and have some NaN values.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment>
         <source role=".">
            <content><![CDATA[<doc><a>12.5</a><a>1.0</a><a>NaN</a><a>0.009</a><a>-0.05</a><a>-1</a><a>NaN</a></doc>]]></content>
         </source>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-070.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>12.5 | 1.0 | 0.009 | -0.05 | -1 | NaN | NaN | </out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-071">
      <description>
         Test case to show that if there is no select attribute and no sequence constructor for an xsl:perform-sort 
         instruction then the initial sequence (and therefore, the sorted sequence) is an empty sequence.
      </description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="sort020"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-071.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-072">
      <description>Nest xsl:sort in xsl:for-each as sequence-constructor for xsl:perform-sort</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="sort020"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-072.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>NaN | -5 | 0 | 1 | 3.3 | 5 | 100 | </out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="sort-073">
      <description>Provide sequence-constructor content for an xsl:perform-sort instruction</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment>
         <source role=".">
            <content><![CDATA[<doc><a>a </a><a>d </a><a>z </a><a>f </a><a>r </a><a>w </a><a>l </a></doc>]]></content>
         </source>
      </environment>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-073.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>z w r l f d a </out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="sort-074">
      <description>Test that stable="true" can be set on an xsl:sort instruction.</description>
      <created by="Debbie Lockett" on="2014-08-08"/>
      <environment ref="sort129"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-074.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>First,Second,Third,Fourth,Fifth,Sixth,Seventh,</out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="sort-075">
      <description>Test that stable="false" can be set, but apply to data where it's moot.</description>
      <created by="Debbie Lockett" on="2014-08-08"/>
      <environment ref="sort129"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-075.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>First,Second,Third,Fourth,Fifth,Sixth,Seventh,</out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="sort-076">
      <description>Test that stable=" 1 " can be set on an xsl:sort instruction.</description>
      <created by="Debbie Lockett" on="2014-08-08"/>
      <environment ref="sort129"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-076.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>First,Second,Third,Fourth,Fifth,Sixth,Seventh,</out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="sort-077">
      <description>Test that stable="0" can be set, but apply to data where it's moot.</description>
      <created by="Debbie Lockett" on="2014-08-08"/>
      <environment ref="sort129"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-077.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>First,Second,Third,Fourth,Fifth,Sixth,Seventh,</out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="sort-078">
      <description>Test with stable="YES" (not allowed).</description>
      <created by="Debbie Lockett" on="2014-08-08"/>
      <environment ref="sort129"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-078.xsl"/>
      </test>
      <result>
         <error code="XTSE0020"/>
      </result>
   </test-case>
   
   <test-case name="sort-079">
      <description>Test UCA collation, specifically the effect of alternate=blanked and alterate=shifted</description>
      <created by="Michael Kay" on="2016-09-23"/>
      <modified by="Michael Kay" on="2017-05-11" change="Changed the results for blanked to put 'Deluge' in the right place. 
         Added results for shifted - currently the same as blanked - I'm not convinced by them but it seems to be what ICU is generating."/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-079.xsl"/>
      </test>
      <result>
         <all-of>
            <assert>/out/primary/non-ignorable = 'de-luge delu-ge delug deluge Deluge deluge-'</assert>
            <assert>/out/primary/shifted = 'delug deluge Deluge delu-ge de-luge deluge-'</assert>
            <assert>/out/primary/blanked = 'delug deluge Deluge delu-ge de-luge deluge-'</assert>
            <assert>/out/secondary/non-ignorable = 'de-luge delu-ge delug deluge Deluge deluge-'</assert>
            <assert>/out/secondary/shifted = 'delug deluge Deluge delu-ge de-luge deluge-'</assert>
            <assert>/out/secondary/blanked = 'delug deluge Deluge delu-ge de-luge deluge-'</assert>
            <assert>/out/tertiary/non-ignorable = 'de-luge delu-ge delug deluge Deluge deluge-'</assert>
            <assert>/out/tertiary/shifted = 'delug deluge delu-ge de-luge deluge- Deluge'</assert>
            <assert>/out/tertiary/blanked = 'delug deluge delu-ge de-luge deluge- Deluge'</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="sort-080">
      <description>Attempt to sort a sequence containing untyped attributes and typed dates</description>
      <created by="Michael Kay" on="2017-09-18"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="sort-080.xsl"/>
      </test>
      <result>
         <error code="XTDE1030"/>
      </result>
   </test-case>
   
</test-set>
