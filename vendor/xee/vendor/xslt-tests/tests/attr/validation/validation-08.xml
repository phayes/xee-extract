<?xml version="1.0"?><html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://ns.example.com/val08/ validation-08.xsd"
    xmlns="http://ns.example.com/val08/">

<head>
  <title>XSLT Patterns</title>

</head>

<body>


<h1>XSLT Patterns</h1>


<page>
<h2 id="intro">XSLT Patterns</h2>

<p>This document gives an informal description of the syntax of XSLT patterns.
For a formal specification, see the XSLT recommendation. Pattern syntax has not
changed significantly in XSLT 2.0, except that any XPath 2.0 expression may now
be used within a predicate.</p>

<p>Patterns define a condition that a node may or may not satisfy: a node either matches the
pattern, or it does not. The syntax of patterns is a subset of that for
 <a href="expressions.html">XPath Expressions</a>, and formally, a node matches
a pattern if it is a member of the node set selected by the corresponding expression, with
some ancestor of the node acting as the current node for evaluating the expression. For example
a TITLE node matches the pattern "TITLE" because it is a member of the node set selected by the
expression "TITLE" when evaluated at the immediate parent node.</p>

<p>XSLT patterns may be used either in an XSLT stylesheet, or as a parameter to various Java
interfaces in the Saxon API. The syntax is the same in both cases. In the Java interface, patterns are encapsulated
by the <b>net.sf.saxon.pattern.Pattern</b> class, and are created by calling the static method Pattern.make().</p>

<p>In style sheets, patterns are used primarily in the <b>match</b> attribute of the xsl:template element.
They are also used in the <b>count</b> and <b>from</b> attributes of xsl:number, the
<b>match</b> attribute of xsl:key, and the <b>group-starting-at</b> attribute of
xsl:for-each-group.</p>
</page>

<page>
<h2 id="syntax">Pattern syntax</h2>

<p>Saxon supports the full XSLT syntax for patterns. The rules below describe
a simplified form of this syntax (for example, it omits the legal but useless pattern
'@comment()'):</p>

<example>
pattern          ::= path ( '|' path )*
path             ::= anchor? remainder? (Note 1)

anchor           ::= '/' | '//' | id | key
id               ::= 'id' '(' value ')'
key              ::= 'key' '(' literal ',' value ')'
value            ::= literal | variable-reference

remainder        ::= path-part ( sep path-part )* 
sep              ::= '/' | '//'
path-part        ::= node-match predicate+
node-match       ::= element-match | text-match | attribute-match | pi-match | node-match
element-match    ::= 'child::'? ( name | '*' ) 
text-match       ::= 'text' '(' ')' 
attribute-match  ::= ('attribute::' | '@') ( name | '*' ) 
pi-match         ::= 'processing-instruction' '(' literal? ')'
node-match       ::= 'node' '(' ')'

predicate        ::= '[' ( boolean-expression | numeric-expression ) ']'
</example>


<p>Note 1: not all combinations are allowed.
 If the anchor is '//' then the remainder is mandatory.</p>

<p>The form of a literal is as defined in expressions; and a predicate is itself a boolean
 or numeric expression. As with predicates in expressions, a numeric predicate [P] is shorthand
 for the boolean predicate [position()=P].</p>

<p>Informally, a pattern consists of either a single path or a sequence of paths separated
 by vertical bars. An element matches the match-pattern if it matches any one of the paths.</p>

<p>A path consists of a sequence of path-parts separated by either "/" or "//".
 There is an optional separator ("/" or "//") at the start; a "//" has no effect and
 can be ignored. The last path-part may be an element-match, a text-match, an
  attribute-match, a pi-match, or a node-match; in practice, a path-part other than the last
   should be an element-match. </p>

<p>The axis syntax child:: and attribute:: may also be used in patterns, as described in the XSLT
specification.</p>

</page>
<page>
<h2 id="examples">Examples of Patterns</h2>

<p>The table below gives some examples of patterns, and explains their meaning:</p>

<table>
  <tr>
    <td width="50%" valign="top"><p><b>Pattern</b></p></td>
    <td width="50%" valign="top"><p><b>Meaning</b></p></td>
  </tr>
  <tr>
    <td width="50%" valign="top"><p>XXX</p></td>
    <td width="50%" valign="top"><p>Matches any element whose name (tag) is XXX</p></td>
  </tr>
  <tr>
    <td width="50%" valign="top"><p><b>*</b></p></td>
    <td width="50%" valign="top"><p>Matches any element</p></td>
  </tr>
  <tr>
    <td width="50%" valign="top"><p>XXX/YYY</p></td>
    <td width="50%" valign="top"><p>Matches any YYY element 
    whose parent is an XXX</p></td>
  </tr>
  <tr>
    <td width="50%" valign="top"><p>XXX//YYY</p></td>
    <td width="50%" valign="top"><p>Matches any YYY element that has an ancestor named XXX</p></td>
  </tr>
  <tr>
    <td width="50%" valign="top"><p>/*/XXX</p></td>
    <td width="50%" valign="top"><p>Matches any XXX element that is immediately below
    the top-level element in the document</p></td>
  </tr>
  <tr>
    <td width="50%" valign="top"><p>*[@NAME]</p></td>
    <td width="50%" valign="top"><p>Matches any element with a NAME attribute</p></td>
  </tr>
  <tr>
    <td width="50%" valign="top"><p>SECTION/PARA[1]</p></td>
    <td width="50%" valign="top"><p>Matches any PARA element that is the first PARA child of
    a SECTION element</p></td>
  </tr>
  <tr>
    <td width="50%" valign="top"><p>SECTION[TITLE="Contents"]</p></td>
    <td width="50%" valign="top"><p>Matches any SECTION element whose first TITLE child element
    has the value "Contents"</p></td>
  </tr>
  <tr>
    <td width="50%" valign="top"><p>A/TITLE | B/TITLE | C/TITLE</p></td>
    <td width="50%" valign="top"><p>Matches any TITLE element whose parent is of type A or B or C
    (Note that this cannot be written "(A|B|C)/TITLE", although that is a valid node-set expression.)</p></td>
  </tr>
  <tr>
    <td width="50%" valign="top"><p>/BOOK//*</p></td>
    <td width="50%" valign="top"><p>Matches any element in a document provided the top-level element in
    the document is named "BOOK"</p></td>
  </tr>
  <tr>
    <td width="50%" valign="top"><p>A/text() </p></td>
    <td width="50%" valign="top"><p>Matches the character content of an A element</p></td>
  </tr>
  <tr>
    <td width="50%" valign="top"><p>A/@*</p></td>
    <td width="50%" valign="top"><p>Matches any attribute of an A element</p></td>
  </tr>
</table>


</page>
<!--
<hr/>
<p align="center" id="sig">Michael H. Kay<br/>
12 November 2002</p>
-->
</body>
</html>
