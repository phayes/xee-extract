<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns:xs="http://www.w3.org/2001/XMLSchema"
          xmlns="http://www.w3.org/2012/10/xslt-test-catalog"
          name="system-property-gen">
   <description>
      Tests system-property.
   
      This test set consists of a complex set of automatically-generated tests. It is unclear how useful these are;
      they test some pretty complex scenarios, but it's very hard to understand exactly what each test is actually
      testing, and when a test failure occurs, it's almost impossible to debug. The tests have therefore been
      "quarantined": the test set still exists, but it is no longer referenced from the top level test catalog.
     
   </description>

   <test-case name="system-property-101a">
      <description>
          Function-call system-property with arguments 'xsl:version'.
          Testing method scope set to 'static', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101a-qname">
      <description>
          Function-call xpath:system-property with arguments 'xsl:version'.
          Testing method scope set to 'static', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'xpath:'"/>
         <param static="yes" name="property" select="'xsl:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101a-eqname">
      <description>
          Function-call Q{http://www.w3.org/2005/xpath-functions}system-property with arguments 'xsl:version'.
          Testing method scope set to 'static', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'Q{http://www.w3.org/2005/xpath-functions}'"/>
         <param static="yes" name="property" select="'xsl:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101b">
      <description>
          Function-call system-property with arguments 'version'.
          Testing method scope set to 'static', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101b-qname">
      <description>
          Function-call xpath:system-property with arguments 'version'.
          Testing method scope set to 'static', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'xpath:'"/>
         <param static="yes" name="property" select="'version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101b-eqname">
      <description>
          Function-call Q{http://www.w3.org/2005/xpath-functions}system-property with arguments 'version'.
          Testing method scope set to 'static', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'Q{http://www.w3.org/2005/xpath-functions}'"/>
         <param static="yes" name="property" select="'version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101c">
      <description>
          Function-call system-property with arguments 'other:version'.
          Testing method scope set to 'static', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101c-qname">
      <description>
          Function-call xpath:system-property with arguments 'other:version'.
          Testing method scope set to 'static', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'xpath:'"/>
         <param static="yes" name="property" select="'other:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101c-eqname">
      <description>
          Function-call Q{http://www.w3.org/2005/xpath-functions}system-property with arguments 'other:version'.
          Testing method scope set to 'static', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'Q{http://www.w3.org/2005/xpath-functions}'"/>
         <param static="yes" name="property" select="'other:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101d">
      <description>
          Function-call system-property with arguments 'xsl:version'.
          Testing method scope set to 'evaluate', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101d-qname">
      <description>
          Function-call xpath:system-property with arguments 'xsl:version'.
          Testing method scope set to 'evaluate', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'xpath:'"/>
         <param static="yes" name="property" select="'xsl:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101d-eqname">
      <description>
          Function-call Q{http://www.w3.org/2005/xpath-functions}system-property with arguments 'xsl:version'.
          Testing method scope set to 'evaluate', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'Q{http://www.w3.org/2005/xpath-functions}'"/>
         <param static="yes" name="property" select="'xsl:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101e">
      <description>
          Function-call system-property with arguments 'version'.
          Testing method scope set to 'evaluate', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101e-qname">
      <description>
          Function-call xpath:system-property with arguments 'version'.
          Testing method scope set to 'evaluate', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'xpath:'"/>
         <param static="yes" name="property" select="'version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101e-eqname">
      <description>
          Function-call Q{http://www.w3.org/2005/xpath-functions}system-property with arguments 'version'.
          Testing method scope set to 'evaluate', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'Q{http://www.w3.org/2005/xpath-functions}'"/>
         <param static="yes" name="property" select="'version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101f">
      <description>
          Function-call system-property with arguments 'other:version'.
          Testing method scope set to 'evaluate', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101f-qname">
      <description>
          Function-call xpath:system-property with arguments 'other:version'.
          Testing method scope set to 'evaluate', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'xpath:'"/>
         <param static="yes" name="property" select="'other:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101f-eqname">
      <description>
          Function-call Q{http://www.w3.org/2005/xpath-functions}system-property with arguments 'other:version'.
          Testing method scope set to 'evaluate', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'Q{http://www.w3.org/2005/xpath-functions}'"/>
         <param static="yes" name="property" select="'other:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101g">
      <description>
          Function-call system-property with arguments 'xsl:version'.
          Testing method scope set to 'apply-templates', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101g-qname">
      <description>
          Function-call xpath:system-property with arguments 'xsl:version'.
          Testing method scope set to 'apply-templates', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'xpath:'"/>
         <param static="yes" name="property" select="'xsl:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101g-eqname">
      <description>
          Function-call Q{http://www.w3.org/2005/xpath-functions}system-property with arguments 'xsl:version'.
          Testing method scope set to 'apply-templates', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'Q{http://www.w3.org/2005/xpath-functions}'"/>
         <param static="yes" name="property" select="'xsl:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101h">
      <description>
          Function-call system-property with arguments 'version'.
          Testing method scope set to 'apply-templates', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101h-qname">
      <description>
          Function-call xpath:system-property with arguments 'version'.
          Testing method scope set to 'apply-templates', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'xpath:'"/>
         <param static="yes" name="property" select="'version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101h-eqname">
      <description>
          Function-call Q{http://www.w3.org/2005/xpath-functions}system-property with arguments 'version'.
          Testing method scope set to 'apply-templates', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'Q{http://www.w3.org/2005/xpath-functions}'"/>
         <param static="yes" name="property" select="'version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101i">
      <description>
          Function-call system-property with arguments 'other:version'.
          Testing method scope set to 'apply-templates', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101i-qname">
      <description>
          Function-call xpath:system-property with arguments 'other:version'.
          Testing method scope set to 'apply-templates', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'xpath:'"/>
         <param static="yes" name="property" select="'other:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101i-eqname">
      <description>
          Function-call Q{http://www.w3.org/2005/xpath-functions}system-property with arguments 'other:version'.
          Testing method scope set to 'apply-templates', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'Q{http://www.w3.org/2005/xpath-functions}'"/>
         <param static="yes" name="property" select="'other:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101j">
      <description>
          Function-call system-property with arguments 'xsl:version'.
          Testing method scope set to 'stylesheet-function', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101j-qname">
      <description>
          Function-call xpath:system-property with arguments 'xsl:version'.
          Testing method scope set to 'stylesheet-function', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'xpath:'"/>
         <param static="yes" name="property" select="'xsl:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101j-eqname">
      <description>
          Function-call Q{http://www.w3.org/2005/xpath-functions}system-property with arguments 'xsl:version'.
          Testing method scope set to 'stylesheet-function', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'Q{http://www.w3.org/2005/xpath-functions}'"/>
         <param static="yes" name="property" select="'xsl:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101k">
      <description>
          Function-call system-property with arguments 'version'.
          Testing method scope set to 'stylesheet-function', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101k-qname">
      <description>
          Function-call xpath:system-property with arguments 'version'.
          Testing method scope set to 'stylesheet-function', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'xpath:'"/>
         <param static="yes" name="property" select="'version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101k-eqname">
      <description>
          Function-call Q{http://www.w3.org/2005/xpath-functions}system-property with arguments 'version'.
          Testing method scope set to 'stylesheet-function', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'Q{http://www.w3.org/2005/xpath-functions}'"/>
         <param static="yes" name="property" select="'version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101l">
      <description>
          Function-call system-property with arguments 'other:version'.
          Testing method scope set to 'stylesheet-function', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101l-qname">
      <description>
          Function-call xpath:system-property with arguments 'other:version'.
          Testing method scope set to 'stylesheet-function', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'xpath:'"/>
         <param static="yes" name="property" select="'other:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101l-eqname">
      <description>
          Function-call Q{http://www.w3.org/2005/xpath-functions}system-property with arguments 'other:version'.
          Testing method scope set to 'stylesheet-function', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'Q{http://www.w3.org/2005/xpath-functions}'"/>
         <param static="yes" name="property" select="'other:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101m">
      <description>
          Function-call system-property with arguments 'xsl:version'.
          Testing method scope set to 'tunneled', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101m-qname">
      <description>
          Function-call xpath:system-property with arguments 'xsl:version'.
          Testing method scope set to 'tunneled', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'xpath:'"/>
         <param static="yes" name="property" select="'xsl:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101m-eqname">
      <description>
          Function-call Q{http://www.w3.org/2005/xpath-functions}system-property with arguments 'xsl:version'.
          Testing method scope set to 'tunneled', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'Q{http://www.w3.org/2005/xpath-functions}'"/>
         <param static="yes" name="property" select="'xsl:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101n">
      <description>
          Function-call system-property with arguments 'version'.
          Testing method scope set to 'tunneled', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101n-qname">
      <description>
          Function-call xpath:system-property with arguments 'version'.
          Testing method scope set to 'tunneled', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'xpath:'"/>
         <param static="yes" name="property" select="'version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101n-eqname">
      <description>
          Function-call Q{http://www.w3.org/2005/xpath-functions}system-property with arguments 'version'.
          Testing method scope set to 'tunneled', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'Q{http://www.w3.org/2005/xpath-functions}'"/>
         <param static="yes" name="property" select="'version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101o">
      <description>
          Function-call system-property with arguments 'other:version'.
          Testing method scope set to 'tunneled', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101o-qname">
      <description>
          Function-call xpath:system-property with arguments 'other:version'.
          Testing method scope set to 'tunneled', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'xpath:'"/>
         <param static="yes" name="property" select="'other:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101o-eqname">
      <description>
          Function-call Q{http://www.w3.org/2005/xpath-functions}system-property with arguments 'other:version'.
          Testing method scope set to 'tunneled', testing result = ('3.0')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="'Q{http://www.w3.org/2005/xpath-functions}'"/>
         <param static="yes" name="property" select="'other:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102a">
      <description>
          Function-call system-property with arguments 'xsl:is-schema-aware'.
          Testing method scope set to 'static', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:is-schema-aware'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102b">
      <description>
          Function-call system-property with arguments 'is-schema-aware'.
          Testing method scope set to 'static', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'is-schema-aware'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102c">
      <description>
          Function-call system-property with arguments 'other:is-schema-aware'.
          Testing method scope set to 'static', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:is-schema-aware'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102d">
      <description>
          Function-call system-property with arguments 'xsl:is-schema-aware'.
          Testing method scope set to 'evaluate', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:is-schema-aware'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102e">
      <description>
          Function-call system-property with arguments 'is-schema-aware'.
          Testing method scope set to 'evaluate', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'is-schema-aware'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102f">
      <description>
          Function-call system-property with arguments 'other:is-schema-aware'.
          Testing method scope set to 'evaluate', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:is-schema-aware'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102g">
      <description>
          Function-call system-property with arguments 'xsl:is-schema-aware'.
          Testing method scope set to 'apply-templates', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:is-schema-aware'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102h">
      <description>
          Function-call system-property with arguments 'is-schema-aware'.
          Testing method scope set to 'apply-templates', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'is-schema-aware'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102i">
      <description>
          Function-call system-property with arguments 'other:is-schema-aware'.
          Testing method scope set to 'apply-templates', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:is-schema-aware'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102j">
      <description>
          Function-call system-property with arguments 'xsl:is-schema-aware'.
          Testing method scope set to 'stylesheet-function', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:is-schema-aware'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102k">
      <description>
          Function-call system-property with arguments 'is-schema-aware'.
          Testing method scope set to 'stylesheet-function', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'is-schema-aware'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102l">
      <description>
          Function-call system-property with arguments 'other:is-schema-aware'.
          Testing method scope set to 'stylesheet-function', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:is-schema-aware'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102m">
      <description>
          Function-call system-property with arguments 'xsl:is-schema-aware'.
          Testing method scope set to 'tunneled', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:is-schema-aware'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102n">
      <description>
          Function-call system-property with arguments 'is-schema-aware'.
          Testing method scope set to 'tunneled', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'is-schema-aware'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102o">
      <description>
          Function-call system-property with arguments 'other:is-schema-aware'.
          Testing method scope set to 'tunneled', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:is-schema-aware'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103a">
      <description>
          Function-call system-property with arguments 'xsl:supports-serialization'.
          Testing method scope set to 'static', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-serialization'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103b">
      <description>
          Function-call system-property with arguments 'supports-serialization'.
          Testing method scope set to 'static', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-serialization'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103c">
      <description>
          Function-call system-property with arguments 'other:supports-serialization'.
          Testing method scope set to 'static', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-serialization'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103d">
      <description>
          Function-call system-property with arguments 'xsl:supports-serialization'.
          Testing method scope set to 'evaluate', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-serialization'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103e">
      <description>
          Function-call system-property with arguments 'supports-serialization'.
          Testing method scope set to 'evaluate', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-serialization'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103f">
      <description>
          Function-call system-property with arguments 'other:supports-serialization'.
          Testing method scope set to 'evaluate', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-serialization'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103g">
      <description>
          Function-call system-property with arguments 'xsl:supports-serialization'.
          Testing method scope set to 'apply-templates', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-serialization'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103h">
      <description>
          Function-call system-property with arguments 'supports-serialization'.
          Testing method scope set to 'apply-templates', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-serialization'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103i">
      <description>
          Function-call system-property with arguments 'other:supports-serialization'.
          Testing method scope set to 'apply-templates', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-serialization'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103j">
      <description>
          Function-call system-property with arguments 'xsl:supports-serialization'.
          Testing method scope set to 'stylesheet-function', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-serialization'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103k">
      <description>
          Function-call system-property with arguments 'supports-serialization'.
          Testing method scope set to 'stylesheet-function', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-serialization'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103l">
      <description>
          Function-call system-property with arguments 'other:supports-serialization'.
          Testing method scope set to 'stylesheet-function', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-serialization'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103m">
      <description>
          Function-call system-property with arguments 'xsl:supports-serialization'.
          Testing method scope set to 'tunneled', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-serialization'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103n">
      <description>
          Function-call system-property with arguments 'supports-serialization'.
          Testing method scope set to 'tunneled', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-serialization'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103o">
      <description>
          Function-call system-property with arguments 'other:supports-serialization'.
          Testing method scope set to 'tunneled', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-serialization'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104a">
      <description>
          Function-call system-property with arguments 'xsl:supports-backwards-compatibility'.
          Testing method scope set to 'static', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104b">
      <description>
          Function-call system-property with arguments 'supports-backwards-compatibility'.
          Testing method scope set to 'static', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104c">
      <description>
          Function-call system-property with arguments 'other:supports-backwards-compatibility'.
          Testing method scope set to 'static', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104d">
      <description>
          Function-call system-property with arguments 'xsl:supports-backwards-compatibility'.
          Testing method scope set to 'evaluate', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104e">
      <description>
          Function-call system-property with arguments 'supports-backwards-compatibility'.
          Testing method scope set to 'evaluate', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104f">
      <description>
          Function-call system-property with arguments 'other:supports-backwards-compatibility'.
          Testing method scope set to 'evaluate', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104g">
      <description>
          Function-call system-property with arguments 'xsl:supports-backwards-compatibility'.
          Testing method scope set to 'apply-templates', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104h">
      <description>
          Function-call system-property with arguments 'supports-backwards-compatibility'.
          Testing method scope set to 'apply-templates', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104i">
      <description>
          Function-call system-property with arguments 'other:supports-backwards-compatibility'.
          Testing method scope set to 'apply-templates', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104j">
      <description>
          Function-call system-property with arguments 'xsl:supports-backwards-compatibility'.
          Testing method scope set to 'stylesheet-function', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104k">
      <description>
          Function-call system-property with arguments 'supports-backwards-compatibility'.
          Testing method scope set to 'stylesheet-function', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104l">
      <description>
          Function-call system-property with arguments 'other:supports-backwards-compatibility'.
          Testing method scope set to 'stylesheet-function', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104m">
      <description>
          Function-call system-property with arguments 'xsl:supports-backwards-compatibility'.
          Testing method scope set to 'tunneled', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104n">
      <description>
          Function-call system-property with arguments 'supports-backwards-compatibility'.
          Testing method scope set to 'tunneled', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104o">
      <description>
          Function-call system-property with arguments 'other:supports-backwards-compatibility'.
          Testing method scope set to 'tunneled', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105a">
      <description>
          Function-call system-property with arguments 'xsl:supports-namespace-axis'.
          Testing method scope set to 'static', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-namespace-axis'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105b">
      <description>
          Function-call system-property with arguments 'supports-namespace-axis'.
          Testing method scope set to 'static', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-namespace-axis'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105c">
      <description>
          Function-call system-property with arguments 'other:supports-namespace-axis'.
          Testing method scope set to 'static', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-namespace-axis'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105d">
      <description>
          Function-call system-property with arguments 'xsl:supports-namespace-axis'.
          Testing method scope set to 'evaluate', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-namespace-axis'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105e">
      <description>
          Function-call system-property with arguments 'supports-namespace-axis'.
          Testing method scope set to 'evaluate', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-namespace-axis'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105f">
      <description>
          Function-call system-property with arguments 'other:supports-namespace-axis'.
          Testing method scope set to 'evaluate', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-namespace-axis'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105g">
      <description>
          Function-call system-property with arguments 'xsl:supports-namespace-axis'.
          Testing method scope set to 'apply-templates', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-namespace-axis'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105h">
      <description>
          Function-call system-property with arguments 'supports-namespace-axis'.
          Testing method scope set to 'apply-templates', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-namespace-axis'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105i">
      <description>
          Function-call system-property with arguments 'other:supports-namespace-axis'.
          Testing method scope set to 'apply-templates', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-namespace-axis'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105j">
      <description>
          Function-call system-property with arguments 'xsl:supports-namespace-axis'.
          Testing method scope set to 'stylesheet-function', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-namespace-axis'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105k">
      <description>
          Function-call system-property with arguments 'supports-namespace-axis'.
          Testing method scope set to 'stylesheet-function', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-namespace-axis'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105l">
      <description>
          Function-call system-property with arguments 'other:supports-namespace-axis'.
          Testing method scope set to 'stylesheet-function', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-namespace-axis'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105m">
      <description>
          Function-call system-property with arguments 'xsl:supports-namespace-axis'.
          Testing method scope set to 'tunneled', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-namespace-axis'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105n">
      <description>
          Function-call system-property with arguments 'supports-namespace-axis'.
          Testing method scope set to 'tunneled', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-namespace-axis'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105o">
      <description>
          Function-call system-property with arguments 'other:supports-namespace-axis'.
          Testing method scope set to 'tunneled', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-namespace-axis'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106a">
      <description>
          Function-call system-property with arguments 'xsl:supports-streaming'.
          Testing method scope set to 'static', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-streaming'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106b">
      <description>
          Function-call system-property with arguments 'supports-streaming'.
          Testing method scope set to 'static', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-streaming'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106c">
      <description>
          Function-call system-property with arguments 'other:supports-streaming'.
          Testing method scope set to 'static', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-streaming'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106d">
      <description>
          Function-call system-property with arguments 'xsl:supports-streaming'.
          Testing method scope set to 'evaluate', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-streaming'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106e">
      <description>
          Function-call system-property with arguments 'supports-streaming'.
          Testing method scope set to 'evaluate', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-streaming'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106f">
      <description>
          Function-call system-property with arguments 'other:supports-streaming'.
          Testing method scope set to 'evaluate', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-streaming'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106g">
      <description>
          Function-call system-property with arguments 'xsl:supports-streaming'.
          Testing method scope set to 'apply-templates', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-streaming'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106h">
      <description>
          Function-call system-property with arguments 'supports-streaming'.
          Testing method scope set to 'apply-templates', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-streaming'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106i">
      <description>
          Function-call system-property with arguments 'other:supports-streaming'.
          Testing method scope set to 'apply-templates', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-streaming'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106j">
      <description>
          Function-call system-property with arguments 'xsl:supports-streaming'.
          Testing method scope set to 'stylesheet-function', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-streaming'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106k">
      <description>
          Function-call system-property with arguments 'supports-streaming'.
          Testing method scope set to 'stylesheet-function', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-streaming'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106l">
      <description>
          Function-call system-property with arguments 'other:supports-streaming'.
          Testing method scope set to 'stylesheet-function', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-streaming'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106m">
      <description>
          Function-call system-property with arguments 'xsl:supports-streaming'.
          Testing method scope set to 'tunneled', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-streaming'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106n">
      <description>
          Function-call system-property with arguments 'supports-streaming'.
          Testing method scope set to 'tunneled', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-streaming'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106o">
      <description>
          Function-call system-property with arguments 'other:supports-streaming'.
          Testing method scope set to 'tunneled', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-streaming'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107a">
      <description>
          Function-call system-property with arguments 'xsl:supports-dynamic-evaluation'.
          Testing method scope set to 'static', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107b">
      <description>
          Function-call system-property with arguments 'supports-dynamic-evaluation'.
          Testing method scope set to 'static', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107c">
      <description>
          Function-call system-property with arguments 'other:supports-dynamic-evaluation'.
          Testing method scope set to 'static', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107d">
      <description>
          Function-call system-property with arguments 'xsl:supports-dynamic-evaluation'.
          Testing method scope set to 'evaluate', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107e">
      <description>
          Function-call system-property with arguments 'supports-dynamic-evaluation'.
          Testing method scope set to 'evaluate', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107f">
      <description>
          Function-call system-property with arguments 'other:supports-dynamic-evaluation'.
          Testing method scope set to 'evaluate', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107g">
      <description>
          Function-call system-property with arguments 'xsl:supports-dynamic-evaluation'.
          Testing method scope set to 'apply-templates', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107h">
      <description>
          Function-call system-property with arguments 'supports-dynamic-evaluation'.
          Testing method scope set to 'apply-templates', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107i">
      <description>
          Function-call system-property with arguments 'other:supports-dynamic-evaluation'.
          Testing method scope set to 'apply-templates', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107j">
      <description>
          Function-call system-property with arguments 'xsl:supports-dynamic-evaluation'.
          Testing method scope set to 'stylesheet-function', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107k">
      <description>
          Function-call system-property with arguments 'supports-dynamic-evaluation'.
          Testing method scope set to 'stylesheet-function', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107l">
      <description>
          Function-call system-property with arguments 'other:supports-dynamic-evaluation'.
          Testing method scope set to 'stylesheet-function', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107m">
      <description>
          Function-call system-property with arguments 'xsl:supports-dynamic-evaluation'.
          Testing method scope set to 'tunneled', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107n">
      <description>
          Function-call system-property with arguments 'supports-dynamic-evaluation'.
          Testing method scope set to 'tunneled', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107o">
      <description>
          Function-call system-property with arguments 'other:supports-dynamic-evaluation'.
          Testing method scope set to 'tunneled', testing result = ('yes', 'no')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108a">
      <description>
          Function-call system-property with arguments 'xsl:xpath-version'.
          Testing method scope set to 'static', testing result = ('3.0', '3.1')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:xpath-version'"/>
         <param static="yes" name="result" select="'3.0', '3.1'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108b">
      <description>
          Function-call system-property with arguments 'xpath-version'.
          Testing method scope set to 'static', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xpath-version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108c">
      <description>
          Function-call system-property with arguments 'other:xpath-version'.
          Testing method scope set to 'static', testing result = ('3.0', '3.1')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:xpath-version'"/>
         <param static="yes" name="result" select="'3.0', '3.1'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108d">
      <description>
          Function-call system-property with arguments 'xsl:xpath-version'.
          Testing method scope set to 'evaluate', testing result = ('3.0', '3.1')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:xpath-version'"/>
         <param static="yes" name="result" select="'3.0', '3.1'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108e">
      <description>
          Function-call system-property with arguments 'xpath-version'.
          Testing method scope set to 'evaluate', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xpath-version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108f">
      <description>
          Function-call system-property with arguments 'other:xpath-version'.
          Testing method scope set to 'evaluate', testing result = ('3.0', '3.1')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:xpath-version'"/>
         <param static="yes" name="result" select="'3.0', '3.1'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108g">
      <description>
          Function-call system-property with arguments 'xsl:xpath-version'.
          Testing method scope set to 'apply-templates', testing result = ('3.0', '3.1')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:xpath-version'"/>
         <param static="yes" name="result" select="'3.0', '3.1'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108h">
      <description>
          Function-call system-property with arguments 'xpath-version'.
          Testing method scope set to 'apply-templates', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xpath-version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108i">
      <description>
          Function-call system-property with arguments 'other:xpath-version'.
          Testing method scope set to 'apply-templates', testing result = ('3.0', '3.1')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:xpath-version'"/>
         <param static="yes" name="result" select="'3.0', '3.1'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108j">
      <description>
          Function-call system-property with arguments 'xsl:xpath-version'.
          Testing method scope set to 'stylesheet-function', testing result = ('3.0', '3.1')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:xpath-version'"/>
         <param static="yes" name="result" select="'3.0', '3.1'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108k">
      <description>
          Function-call system-property with arguments 'xpath-version'.
          Testing method scope set to 'stylesheet-function', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xpath-version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108l">
      <description>
          Function-call system-property with arguments 'other:xpath-version'.
          Testing method scope set to 'stylesheet-function', testing result = ('3.0', '3.1')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:xpath-version'"/>
         <param static="yes" name="result" select="'3.0', '3.1'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108m">
      <description>
          Function-call system-property with arguments 'xsl:xpath-version'.
          Testing method scope set to 'tunneled', testing result = ('3.0', '3.1')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:xpath-version'"/>
         <param static="yes" name="result" select="'3.0', '3.1'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108n">
      <description>
          Function-call system-property with arguments 'xpath-version'.
          Testing method scope set to 'tunneled', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xpath-version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108o">
      <description>
          Function-call system-property with arguments 'other:xpath-version'.
          Testing method scope set to 'tunneled', testing result = ('3.0', '3.1')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:xpath-version'"/>
         <param static="yes" name="result" select="'3.0', '3.1'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109a">
      <description>
          Function-call system-property with arguments 'xsl:xsd-version'.
          Testing method scope set to 'static', testing result = ('1.0', '1.1')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:xsd-version'"/>
         <param static="yes" name="result" select="'1.0', '1.1'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109b">
      <description>
          Function-call system-property with arguments 'xsd-version'.
          Testing method scope set to 'static', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsd-version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109c">
      <description>
          Function-call system-property with arguments 'other:xsd-version'.
          Testing method scope set to 'static', testing result = ('1.0', '1.1')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:xsd-version'"/>
         <param static="yes" name="result" select="'1.0', '1.1'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109d">
      <description>
          Function-call system-property with arguments 'xsl:xsd-version'.
          Testing method scope set to 'evaluate', testing result = ('1.0', '1.1')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:xsd-version'"/>
         <param static="yes" name="result" select="'1.0', '1.1'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109e">
      <description>
          Function-call system-property with arguments 'xsd-version'.
          Testing method scope set to 'evaluate', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsd-version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109f">
      <description>
          Function-call system-property with arguments 'other:xsd-version'.
          Testing method scope set to 'evaluate', testing result = ('1.0', '1.1')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:xsd-version'"/>
         <param static="yes" name="result" select="'1.0', '1.1'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>count(/output/evaluate-direct/static-call) = 5</assert>
            <assert>every $res in /output/evaluate-direct/static-call satisfies $res = 'CAUGHT'</assert>
            <assert>count(/output/evaluate-ref/(dynamic-context | static-context)/(dynamic-call | dynamic-call-all)) = 10</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/evaluate-ref/(static-context | dynamic-context)/dynamic-call-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109g">
      <description>
          Function-call system-property with arguments 'xsl:xsd-version'.
          Testing method scope set to 'apply-templates', testing result = ('1.0', '1.1')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:xsd-version'"/>
         <param static="yes" name="result" select="'1.0', '1.1'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109h">
      <description>
          Function-call system-property with arguments 'xsd-version'.
          Testing method scope set to 'apply-templates', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsd-version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109i">
      <description>
          Function-call system-property with arguments 'other:xsd-version'.
          Testing method scope set to 'apply-templates', testing result = ('1.0', '1.1')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:xsd-version'"/>
         <param static="yes" name="result" select="'1.0', '1.1'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109j">
      <description>
          Function-call system-property with arguments 'xsl:xsd-version'.
          Testing method scope set to 'stylesheet-function', testing result = ('1.0', '1.1')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:xsd-version'"/>
         <param static="yes" name="result" select="'1.0', '1.1'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109k">
      <description>
          Function-call system-property with arguments 'xsd-version'.
          Testing method scope set to 'stylesheet-function', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsd-version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109l">
      <description>
          Function-call system-property with arguments 'other:xsd-version'.
          Testing method scope set to 'stylesheet-function', testing result = ('1.0', '1.1')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:xsd-version'"/>
         <param static="yes" name="result" select="'1.0', '1.1'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109m">
      <description>
          Function-call system-property with arguments 'xsl:xsd-version'.
          Testing method scope set to 'tunneled', testing result = ('1.0', '1.1')
          Using namespace variant for static and dynamic global variables: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsl:xsd-version'"/>
         <param static="yes" name="result" select="'1.0', '1.1'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109n">
      <description>
          Function-call system-property with arguments 'xsd-version'.
          Testing method scope set to 'tunneled', testing result = ('')
          Using namespace variant for static and dynamic global variables: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'xsd-version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109o">
      <description>
          Function-call system-property with arguments 'other:xsd-version'.
          Testing method scope set to 'tunneled', testing result = ('1.0', '1.1')
          Using namespace variant for static and dynamic global variables: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <source uri="system-property-100-data.xml" file="system-property-100-data.xml" context="static-expression-context"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="prefix" select="''"/>
         <param static="yes" name="property" select="'other:xsd-version'"/>
         <param static="yes" name="result" select="'1.0', '1.1'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>count(/output/global-variables/(static-context | dynamic-context)/(static-call|ref-call|let-call|anon-call|partial-call|lookup-call)) = 12</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result satisfies $res/@arity = 1</assert>
            <assert>every $res in /output/(static-context | dynamic-context)/result[position() = 1 or position() = last()] satisfies $res/@name/ends-with(., 'system-property')</assert>
         </all-of>
      </result>
   </test-case>




   <test-case name="system-property-999gen">
      <description>
         NOTE: this test is only here to check if test-gen results are available, it does not test a specific XSLT feature
         
         Tests if the test-generator works and whether all auto-generated tests have been added in the testset.
         Note: the test-generator generates XML in no-namespace and is designed that all tests matching /*/test-case
         should be added. The test numbers start with 101 and end with 100+ count(available-systemproperties()), minus 
         the system properties xsl:product, xsl:vendor, xsl:vendor-url, which is 9, and each subtest numbered a-g.
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <modified by="Debbie Lockett" on="2017-02-23" change="add HOF dependency"/>
      <environment>
         <resource file="_system-property-test-set.xml" uri="_system-property-test-set.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="higher_order_functions"/>         
      </dependencies>
      <test>
         <stylesheet file="_generate-property-tests.xsl"/>
      </test>
      <result>
         <all-of>
            <!-- note: the result of this test is NOT in the test-case namespace, it is in no-namespace -->
            <assert>count(/*/test-case) = 15 * 3 + 15 * 8</assert>
            <!-- check test names -->
            <assert>every $result in (for $i in 1 to 9 return (for $a in 97 to 114 return not(empty(/*/test-case[starts-with(@name, 'system-property-10' || $i)])))) satisfies $result</assert>
            <!-- the following 9 tests test the presence of property names in the resulting test sets -->
            <assert>count(/*/test-case/test/param[@select/(ends-with(., 'version''') and not(contains(., 'xsd')) and not(contains(., 'xpath')))]) = 45</assert>
            <assert>count(/*/test-case/test/param[@select/ends-with(., 'is-schema-aware''')]) = 15</assert>
            <assert>count(/*/test-case/test/param[@select/ends-with(., 'supports-serialization''')]) = 15</assert>
            <assert>count(/*/test-case/test/param[@select/ends-with(., 'supports-backwards-compatibility''')]) = 15</assert>
            <assert>count(/*/test-case/test/param[@select/ends-with(., 'supports-namespace-axis''')]) = 15</assert>
            <assert>count(/*/test-case/test/param[@select/ends-with(., 'supports-streaming''')]) = 15</assert>
            <assert>count(/*/test-case/test/param[@select/ends-with(., 'supports-dynamic-evaluation''')]) = 15</assert>
            <assert>count(/*/test-case/test/param[@select/ends-with(., 'xpath-version''')]) = 15</assert>
            <assert>count(/*/test-case/test/param[@select/ends-with(., 'xsd-version''')]) = 15</assert>
            <!-- test if they are all in this test set -->
            <assert>
               every $name in /*/test-case/@name 
               satisfies 
                  exists(doc('_system-property-test-set.xml')
                  /*/*:test-case/@name[. = $name])</assert>
         </all-of>
      </result>
   </test-case>

</test-set>
