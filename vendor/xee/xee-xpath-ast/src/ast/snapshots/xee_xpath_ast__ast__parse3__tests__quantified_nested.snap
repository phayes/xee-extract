---
source: xee-xpath-ast/src/ast/parse3.rs
expression: "parse_expr_single(\"every $x in (1, 2), $y in (3, 4) satisfies $x > 0 and $y > 0\")"
---
Ok(Quantified(QuantifiedExpr(
  quantifier: Every,
  var_name: Name(
    name: "x",
    prefix: None,
    namespace: None,
  ),
  var_expr: Path(PathExpr(
    steps: [
      PrimaryExpr(Expr(Some(Expr([
        Path(PathExpr(
          steps: [
            PrimaryExpr(Literal(Integer((Positive, [
              1,
            ])))),
          ],
        )),
        Path(PathExpr(
          steps: [
            PrimaryExpr(Literal(Integer((Positive, [
              2,
            ])))),
          ],
        )),
      ])))),
    ],
  )),
  satisfies_expr: Quantified(QuantifiedExpr(
    quantifier: Every,
    var_name: Name(
      name: "y",
      prefix: None,
      namespace: None,
    ),
    var_expr: Path(PathExpr(
      steps: [
        PrimaryExpr(Expr(Some(Expr([
          Path(PathExpr(
            steps: [
              PrimaryExpr(Literal(Integer((Positive, [
                3,
              ])))),
            ],
          )),
          Path(PathExpr(
            steps: [
              PrimaryExpr(Literal(Integer((Positive, [
                4,
              ])))),
            ],
          )),
        ])))),
      ],
    )),
    satisfies_expr: Path(PathExpr(
      steps: [
        PrimaryExpr(Expr(Some(Expr([
          Binary(BinaryExpr(
            operator: And,
            left: PathExpr(
              steps: [
                PrimaryExpr(Expr(Some(Expr([
                  Binary(BinaryExpr(
                    operator: GenGt,
                    left: PathExpr(
                      steps: [
                        PrimaryExpr(VarRef(Name(
                          name: "x",
                          prefix: None,
                          namespace: None,
                        ))),
                      ],
                    ),
                    right: PathExpr(
                      steps: [
                        PrimaryExpr(Literal(Integer((Positive, [])))),
                      ],
                    ),
                  )),
                ])))),
              ],
            ),
            right: PathExpr(
              steps: [
                PrimaryExpr(Expr(Some(Expr([
                  Binary(BinaryExpr(
                    operator: GenGt,
                    left: PathExpr(
                      steps: [
                        PrimaryExpr(VarRef(Name(
                          name: "y",
                          prefix: None,
                          namespace: None,
                        ))),
                      ],
                    ),
                    right: PathExpr(
                      steps: [
                        PrimaryExpr(Literal(Integer((Positive, [])))),
                      ],
                    ),
                  )),
                ])))),
              ],
            ),
          )),
        ])))),
      ],
    )),
  )),
)))
